
CANBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ca4  08008ca4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08008ca4  08008ca4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ca4  08008ca4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c0c  20000010  08008cbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c1c  08008cbc  00021c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f28b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003abc  00000000  00000000  0003f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e8  00000000  00000000  00042d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001730  00000000  00000000  00044670  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b67  00000000  00000000  00045da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001602b  00000000  00000000  00049907  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b505e  00000000  00000000  0005f932  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aa4  00000000  00000000  00114a0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008bdc 	.word	0x08008bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008bdc 	.word	0x08008bdc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2uiz>:
 800096c:	004a      	lsls	r2, r1, #1
 800096e:	d211      	bcs.n	8000994 <__aeabi_d2uiz+0x28>
 8000970:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000974:	d211      	bcs.n	800099a <__aeabi_d2uiz+0x2e>
 8000976:	d50d      	bpl.n	8000994 <__aeabi_d2uiz+0x28>
 8000978:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800097c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000980:	d40e      	bmi.n	80009a0 <__aeabi_d2uiz+0x34>
 8000982:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000986:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800098e:	fa23 f002 	lsr.w	r0, r3, r2
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d102      	bne.n	80009a6 <__aeabi_d2uiz+0x3a>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	4770      	bx	lr
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	4770      	bx	lr

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f001 faec 	bl	8001f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f842 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 faaa 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 80009bc:	f000 fa82 	bl	8000ec4 <MX_DMA_Init>
  MX_ADC1_Init();
 80009c0:	f000 f89a 	bl	8000af8 <MX_ADC1_Init>
  MX_CAN_Init();
 80009c4:	f000 f99e 	bl	8000d04 <MX_CAN_Init>
  MX_CRC_Init();
 80009c8:	f000 fa1a 	bl	8000e00 <MX_CRC_Init>
  MX_ADC2_Init();
 80009cc:	f000 f93c 	bl	8000c48 <MX_ADC2_Init>
  MX_I2C1_Init();
 80009d0:	f000 fa38 	bl	8000e44 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) anInAdc1, ADC_1_COUNT);
 80009d4:	2205      	movs	r2, #5
 80009d6:	490f      	ldr	r1, [pc, #60]	; (8000a14 <main+0x68>)
 80009d8:	480f      	ldr	r0, [pc, #60]	; (8000a18 <main+0x6c>)
 80009da:	f001 fcbd 	bl	8002358 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*) anInAdc2, ADC_2_COUNT);
 80009de:	2201      	movs	r2, #1
 80009e0:	490e      	ldr	r1, [pc, #56]	; (8000a1c <main+0x70>)
 80009e2:	480f      	ldr	r0, [pc, #60]	; (8000a20 <main+0x74>)
 80009e4:	f001 fcb8 	bl	8002358 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009e8:	f005 fbbc 	bl	8006164 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <main+0x78>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <main+0x7c>)
 80009f2:	f005 fc1f 	bl	8006234 <osThreadNew>
 80009f6:	4602      	mov	r2, r0
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <main+0x80>)
 80009fa:	601a      	str	r2, [r3, #0]

  /* creation of CanTxTask */
  CanTxTaskHandle = osThreadNew(StartCanTxTask, NULL, &CanTxTask_attributes);
 80009fc:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <main+0x84>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <main+0x88>)
 8000a02:	f005 fc17 	bl	8006234 <osThreadNew>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <main+0x8c>)
 8000a0a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a0c:	f005 fbde 	bl	80061cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <main+0x64>
 8000a12:	bf00      	nop
 8000a14:	20001af4 	.word	0x20001af4
 8000a18:	20001aa0 	.word	0x20001aa0
 8000a1c:	20001af0 	.word	0x20001af0
 8000a20:	200019b8 	.word	0x200019b8
 8000a24:	08008c24 	.word	0x08008c24
 8000a28:	08001789 	.word	0x08001789
 8000a2c:	200019b4 	.word	0x200019b4
 8000a30:	08008c48 	.word	0x08008c48
 8000a34:	0800185d 	.word	0x0800185d
 8000a38:	20001b44 	.word	0x20001b44

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b096      	sub	sp, #88	; 0x58
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a46:	2228      	movs	r2, #40	; 0x28
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f008 f8bd 	bl	8008bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a70:	2303      	movs	r3, #3
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a82:	2310      	movs	r3, #16
 8000a84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a86:	2302      	movs	r3, #2
 8000a88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a90:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a94:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f003 fe52 	bl	8004744 <HAL_RCC_OscConfig>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000aa6:	f000 ffe9 	bl	8001a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aaa:	230f      	movs	r3, #15
 8000aac:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac0:	f107 031c 	add.w	r3, r7, #28
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fd44 	bl	8005554 <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ad2:	f000 ffd3 	bl	8001a7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f004 ff7d 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000aec:	f000 ffc6 	bl	8001a7c <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3758      	adds	r7, #88	; 0x58
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b1a:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b22:	4b48      	ldr	r3, [pc, #288]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b28:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2a:	4b46      	ldr	r3, [pc, #280]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b30:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b36:	4b43      	ldr	r3, [pc, #268]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b3c:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b44:	4b3f      	ldr	r3, [pc, #252]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b50:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000b56:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b58:	2205      	movs	r2, #5
 8000b5a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b5c:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b64:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b76:	4833      	ldr	r0, [pc, #204]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b78:	f001 fa5c 	bl	8002034 <HAL_ADC_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b82:	f000 ff7b 	bl	8001a7c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	482c      	ldr	r0, [pc, #176]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000b92:	f001 ff7d 	bl	8002a90 <HAL_ADCEx_MultiModeConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000b9c:	f000 ff6e 	bl	8001a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000bac:	2307      	movs	r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4821      	ldr	r0, [pc, #132]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000bbe:	f001 fca5 	bl	800250c <HAL_ADC_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000bc8:	f000 ff58 	bl	8001a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	481a      	ldr	r0, [pc, #104]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000bda:	f001 fc97 	bl	800250c <HAL_ADC_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000be4:	f000 ff4a 	bl	8001a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000be8:	2303      	movs	r3, #3
 8000bea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bec:	2303      	movs	r3, #3
 8000bee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000bf6:	f001 fc89 	bl	800250c <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000c00:	f000 ff3c 	bl	8001a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c04:	2304      	movs	r3, #4
 8000c06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000c12:	f001 fc7b 	bl	800250c <HAL_ADC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8000c1c:	f000 ff2e 	bl	8001a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c20:	2310      	movs	r3, #16
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000c24:	2305      	movs	r3, #5
 8000c26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_ADC1_Init+0x14c>)
 8000c2e:	f001 fc6d 	bl	800250c <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8000c38:	f000 ff20 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20001aa0 	.word	0x20001aa0

08000c48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4e:	463b      	mov	r3, r7
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
 8000c5c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c5e:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <MX_ADC2_Init+0xb8>)
 8000c62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c66:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c6c:	4b23      	ldr	r3, [pc, #140]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000c78:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000ca8:	2204      	movs	r2, #4
 8000caa:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000cba:	f001 f9bb 	bl	8002034 <HAL_ADC_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000cc4:	f000 feda 	bl	8001a7c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC2_Init+0xb4>)
 8000ce6:	f001 fc11 	bl	800250c <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000cf0:	f000 fec4 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200019b8 	.word	0x200019b8
 8000d00:	50000100 	.word	0x50000100

08000d04 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d0c:	4a3a      	ldr	r2, [pc, #232]	; (8000df8 <MX_CAN_Init+0xf4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d10:	4b38      	ldr	r3, [pc, #224]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d12:	2204      	movs	r2, #4
 8000d14:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d1c:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d22:	4b34      	ldr	r3, [pc, #208]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d24:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d28:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d30:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d38:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d50:	4b28      	ldr	r3, [pc, #160]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d56:	4827      	ldr	r0, [pc, #156]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d58:	f002 f883 	bl	8002e62 <HAL_CAN_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000d62:	f000 fe8b 	bl	8001a7c <Error_Handler>
  //---------------------------------------------------------------
  //Set CAN RX filter
  //---------------------------------------------------------------
  CAN_FilterTypeDef  sFilterConfig;

  sFilterConfig.FilterBank = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000d86:	2301      	movs	r3, #1
 8000d88:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8000d8a:	230e      	movs	r3, #14
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4818      	ldr	r0, [pc, #96]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000d94:	f002 f960 	bl	8003058 <HAL_CAN_ConfigFilter>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_CAN_Init+0x9e>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000d9e:	f000 fe6d 	bl	8001a7c <Error_Handler>
  }

  CanTxHeader.StdId = CAN_BASE_ID;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_CAN_Init+0xf8>)
 8000da4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000da8:	601a      	str	r2, [r3, #0]
  CanTxHeader.ExtId = 0;
 8000daa:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_CAN_Init+0xf8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  CanTxHeader.RTR = CAN_RTR_DATA;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_CAN_Init+0xf8>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  CanTxHeader.IDE = CAN_ID_STD;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_CAN_Init+0xf8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  CanTxHeader.DLC = 8;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_CAN_Init+0xf8>)
 8000dbe:	2208      	movs	r2, #8
 8000dc0:	611a      	str	r2, [r3, #16]
  CanTxHeader.TransmitGlobalTime = DISABLE;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_CAN_Init+0xf8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	751a      	strb	r2, [r3, #20]

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000dc8:	480a      	ldr	r0, [pc, #40]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000dca:	f002 fa0f 	bl	80031ec <HAL_CAN_Start>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_CAN_Init+0xd4>
  {
    /* Start Error */
    Error_Handler();
 8000dd4:	f000 fe52 	bl	8001a7c <Error_Handler>
  }

  //---------------------------------------------------------------
  //Set CAN RX interrupt
  //---------------------------------------------------------------
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_CAN_Init+0xf0>)
 8000ddc:	f002 fc37 	bl	800364e <HAL_CAN_ActivateNotification>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_CAN_Init+0xe6>
  {
    /* Notification Error */
    Error_Handler();
 8000de6:	f000 fe49 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20001a78 	.word	0x20001a78
 8000df8:	40006400 	.word	0x40006400
 8000dfc:	20000040 	.word	0x20000040

08000e00 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <MX_CRC_Init+0x40>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e18:	2220      	movs	r2, #32
 8000e1a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_CRC_Init+0x3c>)
 8000e2a:	f002 ff41 	bl	8003cb0 <HAL_CRC_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000e34:	f000 fe22 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20001a54 	.word	0x20001a54
 8000e40:	40023000 	.word	0x40023000

08000e44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_I2C1_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <MX_I2C1_Init+0x7c>)
 8000e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e80:	f003 fb3a 	bl	80044f8 <HAL_I2C_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e8a:	f000 fdf7 	bl	8001a7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e92:	f003 fbc0 	bl	8004616 <HAL_I2CEx_ConfigAnalogFilter>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e9c:	f000 fdee 	bl	8001a7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000ea4:	f003 fc02 	bl	80046ac <HAL_I2CEx_ConfigDigitalFilter>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 fde5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20001a08 	.word	0x20001a08
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	2000090e 	.word	0x2000090e

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_DMA_Init+0x48>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <MX_DMA_Init+0x48>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_DMA_Init+0x48>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	200b      	movs	r0, #11
 8000ee8:	f002 feb8 	bl	8003c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000eec:	200b      	movs	r0, #11
 8000eee:	f002 fed1 	bl	8003c94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	200c      	movs	r0, #12
 8000ef8:	f002 feb0 	bl	8003c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000efc:	200c      	movs	r0, #12
 8000efe:	f002 fec9 	bl	8003c94 <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f26:	4b36      	ldr	r3, [pc, #216]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	4a35      	ldr	r2, [pc, #212]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f30:	6153      	str	r3, [r2, #20]
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	4a2f      	ldr	r2, [pc, #188]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6153      	str	r3, [r2, #20]
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	4a29      	ldr	r2, [pc, #164]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f60:	6153      	str	r3, [r2, #20]
 8000f62:	4b27      	ldr	r3, [pc, #156]	; (8001000 <MX_GPIO_Init+0xf0>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f6a:	603b      	str	r3, [r7, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DO1_GPIO_Port, DO1_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f78:	f003 faa6 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2138      	movs	r1, #56	; 0x38
 8000f80:	4820      	ldr	r0, [pc, #128]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000f82:	f003 faa1 	bl	80044c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI6_Pin
                           DI7_Pin DI8_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI6_Pin
 8000f86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f8a:	60fb      	str	r3, [r7, #12]
                          |DI7_Pin|DI8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9e:	f003 f909 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI4_Pin DI5_Pin */
  GPIO_InitStruct.Pin = DI4_Pin|DI5_Pin;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 030c 	add.w	r3, r7, #12
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000fb6:	f003 f8fd 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DO1_Pin */
  GPIO_InitStruct.Pin = DO1_Pin;
 8000fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DO1_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f003 f8ed 	bl	80041b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = DO2_Pin|DO3_Pin|DO4_Pin;
 8000fda:	2338      	movs	r3, #56	; 0x38
 8000fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_GPIO_Init+0xf4>)
 8000ff2:	f003 f8df 	bl	80041b4 <HAL_GPIO_Init>

}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	48000400 	.word	0x48000400

08001008 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]

  if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &CanRxHeader, CanRxData) != HAL_OK)
 8001010:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001012:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001014:	2100      	movs	r1, #0
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f002 fa07 	bl	800342a <HAL_CAN_GetRxMessage>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8001022:	f000 fd2b 	bl	8001a7c <Error_Handler>
  }

  if((CanRxHeader.StdId == CAN_BASE_ID + 3) && (CanRxHeader.IDE == CAN_ID_STD) && (CanRxHeader.DLC >= 4))
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f240 6243 	movw	r2, #1603	; 0x643
 800102e:	4293      	cmp	r3, r2
 8001030:	d123      	bne.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d11f      	bne.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	2b03      	cmp	r3, #3
 8001040:	d91b      	bls.n	800107a <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
  {
    nCanDigOut[0] = CanRxData[0] & 0x01;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800104e:	701a      	strb	r2, [r3, #0]
    nCanDigOut[1] = CanRxData[1] & 0x01;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800105c:	705a      	strb	r2, [r3, #1]
    nCanDigOut[2] = CanRxData[2] & 0x01;
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800106a:	709a      	strb	r2, [r3, #2]
    nCanDigOut[3] = CanRxData[3] & 0x01;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_CAN_RxFifo0MsgPendingCallback+0x7c>)
 800106e:	78db      	ldrb	r3, [r3, #3]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001078:	70da      	strb	r2, [r3, #3]
  }
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000007c 	.word	0x2000007c
 8001088:	20000058 	.word	0x20000058
 800108c:	2000008c 	.word	0x2000008c

08001090 <TxCanMsgs>:

void TxCanMsgs()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
  //=======================================================
  //Build Msg 0 (Analog inputs 1-4 millivolts)
  //=======================================================
  CanTxHeader.StdId = CAN_BASE_ID + 0;
 8001096:	4b9b      	ldr	r3, [pc, #620]	; (8001304 <TxCanMsgs+0x274>)
 8001098:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800109c:	601a      	str	r2, [r3, #0]
  CanTxHeader.DLC = 8; //Bytes to send
 800109e:	4b99      	ldr	r3, [pc, #612]	; (8001304 <TxCanMsgs+0x274>)
 80010a0:	2208      	movs	r2, #8
 80010a2:	611a      	str	r2, [r3, #16]
  CanTxData[0] = ((float)anIn[0] / 4096) * 4850; //Scaled to 4.85v - voltage divider on input, 3.3V = 4.85V on input
 80010a4:	4b98      	ldr	r3, [pc, #608]	; (8001308 <TxCanMsgs+0x278>)
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	b29b      	uxth	r3, r3
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b2:	eddf 6a96 	vldr	s13, [pc, #600]	; 800130c <TxCanMsgs+0x27c>
 80010b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ba:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001310 <TxCanMsgs+0x280>
 80010be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80010ca:	793b      	ldrb	r3, [r7, #4]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b91      	ldr	r3, [pc, #580]	; (8001314 <TxCanMsgs+0x284>)
 80010d0:	701a      	strb	r2, [r3, #0]
  CanTxData[1] = ((float)(anIn[0] >> 8) / 4096) * 4850;
 80010d2:	4b8d      	ldr	r3, [pc, #564]	; (8001308 <TxCanMsgs+0x278>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	b29b      	uxth	r3, r3
 80010dc:	ee07 3a90 	vmov	s15, r3
 80010e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e4:	eddf 6a89 	vldr	s13, [pc, #548]	; 800130c <TxCanMsgs+0x27c>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001310 <TxCanMsgs+0x280>
 80010f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f8:	edc7 7a01 	vstr	s15, [r7, #4]
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b84      	ldr	r3, [pc, #528]	; (8001314 <TxCanMsgs+0x284>)
 8001102:	705a      	strb	r2, [r3, #1]
  CanTxData[2] = ((float)anIn[1] / 4096) * 4850;
 8001104:	4b80      	ldr	r3, [pc, #512]	; (8001308 <TxCanMsgs+0x278>)
 8001106:	885b      	ldrh	r3, [r3, #2]
 8001108:	b29b      	uxth	r3, r3
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001112:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800130c <TxCanMsgs+0x27c>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8001310 <TxCanMsgs+0x280>
 800111e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001126:	edc7 7a01 	vstr	s15, [r7, #4]
 800112a:	793b      	ldrb	r3, [r7, #4]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b79      	ldr	r3, [pc, #484]	; (8001314 <TxCanMsgs+0x284>)
 8001130:	709a      	strb	r2, [r3, #2]
  CanTxData[3] = ((float)(anIn[1] >> 8) / 4096) * 4850;
 8001132:	4b75      	ldr	r3, [pc, #468]	; (8001308 <TxCanMsgs+0x278>)
 8001134:	885b      	ldrh	r3, [r3, #2]
 8001136:	b29b      	uxth	r3, r3
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	b29b      	uxth	r3, r3
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	eddf 6a71 	vldr	s13, [pc, #452]	; 800130c <TxCanMsgs+0x27c>
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001310 <TxCanMsgs+0x280>
 8001150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001158:	edc7 7a01 	vstr	s15, [r7, #4]
 800115c:	793b      	ldrb	r3, [r7, #4]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <TxCanMsgs+0x284>)
 8001162:	70da      	strb	r2, [r3, #3]
  CanTxData[4] = ((float)anIn[2] / 4096) * 4850;
 8001164:	4b68      	ldr	r3, [pc, #416]	; (8001308 <TxCanMsgs+0x278>)
 8001166:	889b      	ldrh	r3, [r3, #4]
 8001168:	b29b      	uxth	r3, r3
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001172:	eddf 6a66 	vldr	s13, [pc, #408]	; 800130c <TxCanMsgs+0x27c>
 8001176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800117a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001310 <TxCanMsgs+0x280>
 800117e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001186:	edc7 7a01 	vstr	s15, [r7, #4]
 800118a:	793b      	ldrb	r3, [r7, #4]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4b61      	ldr	r3, [pc, #388]	; (8001314 <TxCanMsgs+0x284>)
 8001190:	711a      	strb	r2, [r3, #4]
  CanTxData[5] = ((float)(anIn[2] >> 8) / 4096) * 4850;
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <TxCanMsgs+0x278>)
 8001194:	889b      	ldrh	r3, [r3, #4]
 8001196:	b29b      	uxth	r3, r3
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	b29b      	uxth	r3, r3
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a4:	eddf 6a59 	vldr	s13, [pc, #356]	; 800130c <TxCanMsgs+0x27c>
 80011a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ac:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001310 <TxCanMsgs+0x280>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b8:	edc7 7a01 	vstr	s15, [r7, #4]
 80011bc:	793b      	ldrb	r3, [r7, #4]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	4b54      	ldr	r3, [pc, #336]	; (8001314 <TxCanMsgs+0x284>)
 80011c2:	715a      	strb	r2, [r3, #5]
  CanTxData[6] = ((float)anIn[3] / 4096) * 4850;
 80011c4:	4b50      	ldr	r3, [pc, #320]	; (8001308 <TxCanMsgs+0x278>)
 80011c6:	88db      	ldrh	r3, [r3, #6]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800130c <TxCanMsgs+0x27c>
 80011d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011da:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001310 <TxCanMsgs+0x280>
 80011de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80011ea:	793b      	ldrb	r3, [r7, #4]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <TxCanMsgs+0x284>)
 80011f0:	719a      	strb	r2, [r3, #6]
  CanTxData[7] = ((float)(anIn[3] >> 8) / 4096) * 4850;
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <TxCanMsgs+0x278>)
 80011f4:	88db      	ldrh	r3, [r3, #6]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	eddf 6a41 	vldr	s13, [pc, #260]	; 800130c <TxCanMsgs+0x27c>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001310 <TxCanMsgs+0x280>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001218:	edc7 7a01 	vstr	s15, [r7, #4]
 800121c:	793b      	ldrb	r3, [r7, #4]
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <TxCanMsgs+0x284>)
 8001222:	71da      	strb	r2, [r3, #7]

  //=======================================================
  //Send CAN msg
  //=======================================================
  if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &CanTxMailbox) != HAL_OK){
 8001224:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <TxCanMsgs+0x288>)
 8001226:	4a3b      	ldr	r2, [pc, #236]	; (8001314 <TxCanMsgs+0x284>)
 8001228:	4936      	ldr	r1, [pc, #216]	; (8001304 <TxCanMsgs+0x274>)
 800122a:	483c      	ldr	r0, [pc, #240]	; (800131c <TxCanMsgs+0x28c>)
 800122c:	f002 f822 	bl	8003274 <HAL_CAN_AddTxMessage>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <TxCanMsgs+0x1aa>
    Error_Handler();
 8001236:	f000 fc21 	bl	8001a7c <Error_Handler>
  }

  osDelay(CAN_TX_MSG_SPLIT);
 800123a:	2005      	movs	r0, #5
 800123c:	f005 f8a4 	bl	8006388 <osDelay>

  //=======================================================
  //Build Msg 1 (Analog input 5 millivolts and temperature)
  //=======================================================
  CanTxHeader.StdId = CAN_BASE_ID + 1;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <TxCanMsgs+0x274>)
 8001242:	f240 6241 	movw	r2, #1601	; 0x641
 8001246:	601a      	str	r2, [r3, #0]
  CanTxHeader.DLC = 8; //Bytes to send
 8001248:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <TxCanMsgs+0x274>)
 800124a:	2208      	movs	r2, #8
 800124c:	611a      	str	r2, [r3, #16]
  CanTxData[0] = ((float)anIn[4] / 4096) * 4850; //Scaled to 4.85v - voltage divider on input, 3.3V = 4.85V on input
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <TxCanMsgs+0x278>)
 8001250:	891b      	ldrh	r3, [r3, #8]
 8001252:	b29b      	uxth	r3, r3
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800125c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800130c <TxCanMsgs+0x27c>
 8001260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001264:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001310 <TxCanMsgs+0x280>
 8001268:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	edc7 7a01 	vstr	s15, [r7, #4]
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <TxCanMsgs+0x284>)
 800127a:	701a      	strb	r2, [r3, #0]
  CanTxData[1] = ((float)(anIn[4] >> 8) / 4096) * 4850;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <TxCanMsgs+0x278>)
 800127e:	891b      	ldrh	r3, [r3, #8]
 8001280:	b29b      	uxth	r3, r3
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b29b      	uxth	r3, r3
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800130c <TxCanMsgs+0x27c>
 8001292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001296:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001310 <TxCanMsgs+0x280>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80012a6:	793b      	ldrb	r3, [r7, #4]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <TxCanMsgs+0x284>)
 80012ac:	705a      	strb	r2, [r3, #1]
  CanTxData[2] = 0;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <TxCanMsgs+0x284>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	709a      	strb	r2, [r3, #2]
  CanTxData[3] = 0;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <TxCanMsgs+0x284>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	70da      	strb	r2, [r3, #3]
  CanTxData[4] = 0;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <TxCanMsgs+0x284>)
 80012bc:	2200      	movs	r2, #0
 80012be:	711a      	strb	r2, [r3, #4]
  CanTxData[5] = 0;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <TxCanMsgs+0x284>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	715a      	strb	r2, [r3, #5]
  CanTxData[6] = temperature;
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <TxCanMsgs+0x290>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <TxCanMsgs+0x284>)
 80012d0:	719a      	strb	r2, [r3, #6]
  CanTxData[7] = (temperature >> 8);
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <TxCanMsgs+0x290>)
 80012d4:	881b      	ldrh	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	b29b      	uxth	r3, r3
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <TxCanMsgs+0x284>)
 80012e0:	71da      	strb	r2, [r3, #7]

  //=======================================================
  //Send CAN msg
  //=======================================================
  if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &CanTxMailbox) != HAL_OK){
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <TxCanMsgs+0x288>)
 80012e4:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <TxCanMsgs+0x284>)
 80012e6:	4907      	ldr	r1, [pc, #28]	; (8001304 <TxCanMsgs+0x274>)
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <TxCanMsgs+0x28c>)
 80012ea:	f001 ffc3 	bl	8003274 <HAL_CAN_AddTxMessage>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <TxCanMsgs+0x268>
    Error_Handler();
 80012f4:	f000 fbc2 	bl	8001a7c <Error_Handler>
  }

  osDelay(CAN_TX_MSG_SPLIT);
 80012f8:	2005      	movs	r0, #5
 80012fa:	f005 f845 	bl	8006388 <osDelay>

  for(int i=0; i<5; i++)
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e16f      	b.n	80015e4 <TxCanMsgs+0x554>
 8001304:	20000040 	.word	0x20000040
 8001308:	20000034 	.word	0x20000034
 800130c:	45800000 	.word	0x45800000
 8001310:	45979000 	.word	0x45979000
 8001314:	20000074 	.word	0x20000074
 8001318:	20000084 	.word	0x20000084
 800131c:	20001a78 	.word	0x20001a78
 8001320:	2000003e 	.word	0x2000003e
  {
    if(nCanRotaryInvert[i]){
 8001324:	4a53      	ldr	r2, [pc, #332]	; (8001474 <TxCanMsgs+0x3e4>)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 80a6 	beq.w	8001480 <TxCanMsgs+0x3f0>
      //Analog as rotary switch
      if(anIn[i] > 3300)
 8001334:	4a50      	ldr	r2, [pc, #320]	; (8001478 <TxCanMsgs+0x3e8>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800133c:	b29b      	uxth	r3, r3
 800133e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001342:	4293      	cmp	r3, r2
 8001344:	d904      	bls.n	8001350 <TxCanMsgs+0x2c0>
        nCanRotarySwitch[i] = 1;
 8001346:	4a4d      	ldr	r2, [pc, #308]	; (800147c <TxCanMsgs+0x3ec>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 3300) && (anIn[i] > 2700))
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <TxCanMsgs+0x3e8>)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001358:	b29b      	uxth	r3, r3
 800135a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800135e:	4293      	cmp	r3, r2
 8001360:	d80d      	bhi.n	800137e <TxCanMsgs+0x2ee>
 8001362:	4a45      	ldr	r2, [pc, #276]	; (8001478 <TxCanMsgs+0x3e8>)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136a:	b29b      	uxth	r3, r3
 800136c:	f640 228c 	movw	r2, #2700	; 0xa8c
 8001370:	4293      	cmp	r3, r2
 8001372:	d904      	bls.n	800137e <TxCanMsgs+0x2ee>
        nCanRotarySwitch[i] = 2;
 8001374:	4a41      	ldr	r2, [pc, #260]	; (800147c <TxCanMsgs+0x3ec>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	2202      	movs	r2, #2
 800137c:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 2700) && (anIn[i] > 2200))
 800137e:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <TxCanMsgs+0x3e8>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001386:	b29b      	uxth	r3, r3
 8001388:	f640 228c 	movw	r2, #2700	; 0xa8c
 800138c:	4293      	cmp	r3, r2
 800138e:	d80d      	bhi.n	80013ac <TxCanMsgs+0x31c>
 8001390:	4a39      	ldr	r2, [pc, #228]	; (8001478 <TxCanMsgs+0x3e8>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001398:	b29b      	uxth	r3, r3
 800139a:	f640 0298 	movw	r2, #2200	; 0x898
 800139e:	4293      	cmp	r3, r2
 80013a0:	d904      	bls.n	80013ac <TxCanMsgs+0x31c>
        nCanRotarySwitch[i] = 3;
 80013a2:	4a36      	ldr	r2, [pc, #216]	; (800147c <TxCanMsgs+0x3ec>)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	2203      	movs	r2, #3
 80013aa:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 2200) && (anIn[i] > 1800))
 80013ac:	4a32      	ldr	r2, [pc, #200]	; (8001478 <TxCanMsgs+0x3e8>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	f640 0298 	movw	r2, #2200	; 0x898
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d80c      	bhi.n	80013d8 <TxCanMsgs+0x348>
 80013be:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <TxCanMsgs+0x3e8>)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80013cc:	d904      	bls.n	80013d8 <TxCanMsgs+0x348>
        nCanRotarySwitch[i] = 4;
 80013ce:	4a2b      	ldr	r2, [pc, #172]	; (800147c <TxCanMsgs+0x3ec>)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	2204      	movs	r2, #4
 80013d6:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 1800) && (anIn[i] > 1400))
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <TxCanMsgs+0x3e8>)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80013e6:	d80c      	bhi.n	8001402 <TxCanMsgs+0x372>
 80013e8:	4a23      	ldr	r2, [pc, #140]	; (8001478 <TxCanMsgs+0x3e8>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 80013f6:	d904      	bls.n	8001402 <TxCanMsgs+0x372>
        nCanRotarySwitch[i] = 5;
 80013f8:	4a20      	ldr	r2, [pc, #128]	; (800147c <TxCanMsgs+0x3ec>)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	2205      	movs	r2, #5
 8001400:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 1400) && (anIn[i] > 1000))
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <TxCanMsgs+0x3e8>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800140a:	b29b      	uxth	r3, r3
 800140c:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001410:	d80c      	bhi.n	800142c <TxCanMsgs+0x39c>
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <TxCanMsgs+0x3e8>)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800141a:	b29b      	uxth	r3, r3
 800141c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001420:	d904      	bls.n	800142c <TxCanMsgs+0x39c>
        nCanRotarySwitch[i] = 6;
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <TxCanMsgs+0x3ec>)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	2206      	movs	r2, #6
 800142a:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 1000) && (anIn[i] > 600))
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <TxCanMsgs+0x3e8>)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001434:	b29b      	uxth	r3, r3
 8001436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800143a:	d80c      	bhi.n	8001456 <TxCanMsgs+0x3c6>
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <TxCanMsgs+0x3e8>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001444:	b29b      	uxth	r3, r3
 8001446:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800144a:	d904      	bls.n	8001456 <TxCanMsgs+0x3c6>
        nCanRotarySwitch[i] = 7;
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <TxCanMsgs+0x3ec>)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4413      	add	r3, r2
 8001452:	2207      	movs	r2, #7
 8001454:	701a      	strb	r2, [r3, #0]
      if(anIn[i] <= 600)
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <TxCanMsgs+0x3e8>)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800145e:	b29b      	uxth	r3, r3
 8001460:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001464:	f200 80aa 	bhi.w	80015bc <TxCanMsgs+0x52c>
        nCanRotarySwitch[i] = 8;
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <TxCanMsgs+0x3ec>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	2208      	movs	r2, #8
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e0a3      	b.n	80015bc <TxCanMsgs+0x52c>
 8001474:	200000a0 	.word	0x200000a0
 8001478:	20000034 	.word	0x20000034
 800147c:	20000090 	.word	0x20000090
    }
    else
    {
      //Analog as rotary switch
      if(anIn[i] > 3300)
 8001480:	4aa7      	ldr	r2, [pc, #668]	; (8001720 <TxCanMsgs+0x690>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001488:	b29b      	uxth	r3, r3
 800148a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800148e:	4293      	cmp	r3, r2
 8001490:	d904      	bls.n	800149c <TxCanMsgs+0x40c>
        nCanRotarySwitch[i] = 8;
 8001492:	4aa4      	ldr	r2, [pc, #656]	; (8001724 <TxCanMsgs+0x694>)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	2208      	movs	r2, #8
 800149a:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 3300) && (anIn[i] > 2700))
 800149c:	4aa0      	ldr	r2, [pc, #640]	; (8001720 <TxCanMsgs+0x690>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d80d      	bhi.n	80014ca <TxCanMsgs+0x43a>
 80014ae:	4a9c      	ldr	r2, [pc, #624]	; (8001720 <TxCanMsgs+0x690>)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f640 228c 	movw	r2, #2700	; 0xa8c
 80014bc:	4293      	cmp	r3, r2
 80014be:	d904      	bls.n	80014ca <TxCanMsgs+0x43a>
        nCanRotarySwitch[i] = 7;
 80014c0:	4a98      	ldr	r2, [pc, #608]	; (8001724 <TxCanMsgs+0x694>)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4413      	add	r3, r2
 80014c6:	2207      	movs	r2, #7
 80014c8:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 2700) && (anIn[i] > 2200))
 80014ca:	4a95      	ldr	r2, [pc, #596]	; (8001720 <TxCanMsgs+0x690>)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f640 228c 	movw	r2, #2700	; 0xa8c
 80014d8:	4293      	cmp	r3, r2
 80014da:	d80d      	bhi.n	80014f8 <TxCanMsgs+0x468>
 80014dc:	4a90      	ldr	r2, [pc, #576]	; (8001720 <TxCanMsgs+0x690>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	f640 0298 	movw	r2, #2200	; 0x898
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d904      	bls.n	80014f8 <TxCanMsgs+0x468>
        nCanRotarySwitch[i] = 6;
 80014ee:	4a8d      	ldr	r2, [pc, #564]	; (8001724 <TxCanMsgs+0x694>)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	2206      	movs	r2, #6
 80014f6:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 2200) && (anIn[i] > 1800))
 80014f8:	4a89      	ldr	r2, [pc, #548]	; (8001720 <TxCanMsgs+0x690>)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001500:	b29b      	uxth	r3, r3
 8001502:	f640 0298 	movw	r2, #2200	; 0x898
 8001506:	4293      	cmp	r3, r2
 8001508:	d80c      	bhi.n	8001524 <TxCanMsgs+0x494>
 800150a:	4a85      	ldr	r2, [pc, #532]	; (8001720 <TxCanMsgs+0x690>)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001512:	b29b      	uxth	r3, r3
 8001514:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001518:	d904      	bls.n	8001524 <TxCanMsgs+0x494>
        nCanRotarySwitch[i] = 5;
 800151a:	4a82      	ldr	r2, [pc, #520]	; (8001724 <TxCanMsgs+0x694>)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4413      	add	r3, r2
 8001520:	2205      	movs	r2, #5
 8001522:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 1800) && (anIn[i] > 1400))
 8001524:	4a7e      	ldr	r2, [pc, #504]	; (8001720 <TxCanMsgs+0x690>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800152c:	b29b      	uxth	r3, r3
 800152e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001532:	d80c      	bhi.n	800154e <TxCanMsgs+0x4be>
 8001534:	4a7a      	ldr	r2, [pc, #488]	; (8001720 <TxCanMsgs+0x690>)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800153c:	b29b      	uxth	r3, r3
 800153e:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 8001542:	d904      	bls.n	800154e <TxCanMsgs+0x4be>
        nCanRotarySwitch[i] = 4;
 8001544:	4a77      	ldr	r2, [pc, #476]	; (8001724 <TxCanMsgs+0x694>)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	2204      	movs	r2, #4
 800154c:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 1400) && (anIn[i] > 1000))
 800154e:	4a74      	ldr	r2, [pc, #464]	; (8001720 <TxCanMsgs+0x690>)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001556:	b29b      	uxth	r3, r3
 8001558:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800155c:	d80c      	bhi.n	8001578 <TxCanMsgs+0x4e8>
 800155e:	4a70      	ldr	r2, [pc, #448]	; (8001720 <TxCanMsgs+0x690>)
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001566:	b29b      	uxth	r3, r3
 8001568:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800156c:	d904      	bls.n	8001578 <TxCanMsgs+0x4e8>
        nCanRotarySwitch[i] = 3;
 800156e:	4a6d      	ldr	r2, [pc, #436]	; (8001724 <TxCanMsgs+0x694>)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4413      	add	r3, r2
 8001574:	2203      	movs	r2, #3
 8001576:	701a      	strb	r2, [r3, #0]
      if((anIn[i] <= 1000) && (anIn[i] > 600))
 8001578:	4a69      	ldr	r2, [pc, #420]	; (8001720 <TxCanMsgs+0x690>)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001580:	b29b      	uxth	r3, r3
 8001582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001586:	d80c      	bhi.n	80015a2 <TxCanMsgs+0x512>
 8001588:	4a65      	ldr	r2, [pc, #404]	; (8001720 <TxCanMsgs+0x690>)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001596:	d904      	bls.n	80015a2 <TxCanMsgs+0x512>
        nCanRotarySwitch[i] = 2;
 8001598:	4a62      	ldr	r2, [pc, #392]	; (8001724 <TxCanMsgs+0x694>)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4413      	add	r3, r2
 800159e:	2202      	movs	r2, #2
 80015a0:	701a      	strb	r2, [r3, #0]
      if(anIn[i] <= 600)
 80015a2:	4a5f      	ldr	r2, [pc, #380]	; (8001720 <TxCanMsgs+0x690>)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80015b0:	d804      	bhi.n	80015bc <TxCanMsgs+0x52c>
        nCanRotarySwitch[i] = 1;
 80015b2:	4a5c      	ldr	r2, [pc, #368]	; (8001724 <TxCanMsgs+0x694>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
    }

    //Analog as digital switch
    nCanAnalogSwitch[i] = anIn[i] > 2048;
 80015bc:	4a58      	ldr	r2, [pc, #352]	; (8001720 <TxCanMsgs+0x690>)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015ca:	bf8c      	ite	hi
 80015cc:	2301      	movhi	r3, #1
 80015ce:	2300      	movls	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	4a54      	ldr	r2, [pc, #336]	; (8001728 <TxCanMsgs+0x698>)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4413      	add	r3, r2
 80015da:	460a      	mov	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<5; i++)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3301      	adds	r3, #1
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	f77f ae9c 	ble.w	8001324 <TxCanMsgs+0x294>
  }

  //=======================================================
  //Build Msg 2 (Rotary switches, dig inputs, analog input switches, low side output status, heartbeat)
  //=======================================================
  CanTxHeader.StdId = CAN_BASE_ID + 2;
 80015ec:	4b4f      	ldr	r3, [pc, #316]	; (800172c <TxCanMsgs+0x69c>)
 80015ee:	f240 6242 	movw	r2, #1602	; 0x642
 80015f2:	601a      	str	r2, [r3, #0]
  CanTxHeader.DLC = 8; //Bytes to send
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <TxCanMsgs+0x69c>)
 80015f6:	2208      	movs	r2, #8
 80015f8:	611a      	str	r2, [r3, #16]
  CanTxData[0] = (nCanRotarySwitch[1] << 4) + nCanRotarySwitch[0];
 80015fa:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <TxCanMsgs+0x694>)
 80015fc:	785b      	ldrb	r3, [r3, #1]
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b47      	ldr	r3, [pc, #284]	; (8001724 <TxCanMsgs+0x694>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <TxCanMsgs+0x6a0>)
 8001610:	701a      	strb	r2, [r3, #0]
  CanTxData[1] = (nCanRotarySwitch[3] << 4) + nCanRotarySwitch[2];
 8001612:	4b44      	ldr	r3, [pc, #272]	; (8001724 <TxCanMsgs+0x694>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	b2da      	uxtb	r2, r3
 800161c:	4b41      	ldr	r3, [pc, #260]	; (8001724 <TxCanMsgs+0x694>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b42      	ldr	r3, [pc, #264]	; (8001730 <TxCanMsgs+0x6a0>)
 8001628:	705a      	strb	r2, [r3, #1]
  CanTxData[2] = nCanRotarySwitch[4];
 800162a:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <TxCanMsgs+0x694>)
 800162c:	791b      	ldrb	r3, [r3, #4]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <TxCanMsgs+0x6a0>)
 8001632:	709a      	strb	r2, [r3, #2]
  CanTxData[3] = 0; //Empty
 8001634:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <TxCanMsgs+0x6a0>)
 8001636:	2200      	movs	r2, #0
 8001638:	70da      	strb	r2, [r3, #3]
  CanTxData[4] = (digIn[7] << 7) + (digIn[6] << 6) + (digIn[5] << 5) + (digIn[4] << 4) + (digIn[3] << 3) + (digIn[2] << 2) + (digIn[1] << 1) + digIn[0];
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <TxCanMsgs+0x6a4>)
 800163c:	79db      	ldrb	r3, [r3, #7]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	01db      	lsls	r3, r3, #7
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <TxCanMsgs+0x6a4>)
 8001646:	799b      	ldrb	r3, [r3, #6]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	019b      	lsls	r3, r3, #6
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4413      	add	r3, r2
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4b38      	ldr	r3, [pc, #224]	; (8001734 <TxCanMsgs+0x6a4>)
 8001654:	795b      	ldrb	r3, [r3, #5]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4413      	add	r3, r2
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b34      	ldr	r3, [pc, #208]	; (8001734 <TxCanMsgs+0x6a4>)
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4413      	add	r3, r2
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <TxCanMsgs+0x6a4>)
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	b2db      	uxtb	r3, r3
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	4413      	add	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <TxCanMsgs+0x6a4>)
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4413      	add	r3, r2
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <TxCanMsgs+0x6a4>)
 800168c:	785b      	ldrb	r3, [r3, #1]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	b2db      	uxtb	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <TxCanMsgs+0x6a4>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <TxCanMsgs+0x6a0>)
 80016a4:	711a      	strb	r2, [r3, #4]
  CanTxData[5] = (nCanAnalogSwitch[4] << 4) + (nCanAnalogSwitch[3] << 3) + (nCanAnalogSwitch[2] << 2) + (nCanAnalogSwitch[1] << 1) + nCanAnalogSwitch[0];
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <TxCanMsgs+0x698>)
 80016a8:	791b      	ldrb	r3, [r3, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <TxCanMsgs+0x698>)
 80016b2:	78db      	ldrb	r3, [r3, #3]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	4413      	add	r3, r2
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <TxCanMsgs+0x698>)
 80016c0:	789b      	ldrb	r3, [r3, #2]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <TxCanMsgs+0x698>)
 80016ce:	785b      	ldrb	r3, [r3, #1]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4413      	add	r3, r2
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <TxCanMsgs+0x698>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <TxCanMsgs+0x6a0>)
 80016e6:	715a      	strb	r2, [r3, #5]
  CanTxData[6] = (nCanDigOut[3] << 3) + (nCanDigOut[2] << 2) + (nCanDigOut[1] << 1) + nCanDigOut[0];;
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <TxCanMsgs+0x6a8>)
 80016ea:	78db      	ldrb	r3, [r3, #3]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <TxCanMsgs+0x6a8>)
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	4413      	add	r3, r2
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <TxCanMsgs+0x6a8>)
 8001702:	785b      	ldrb	r3, [r3, #1]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	4413      	add	r3, r2
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <TxCanMsgs+0x6a8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	4413      	add	r3, r2
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <TxCanMsgs+0x6a0>)
 800171a:	719a      	strb	r2, [r3, #6]
 800171c:	e00e      	b.n	800173c <TxCanMsgs+0x6ac>
 800171e:	bf00      	nop
 8001720:	20000034 	.word	0x20000034
 8001724:	20000090 	.word	0x20000090
 8001728:	20000098 	.word	0x20000098
 800172c:	20000040 	.word	0x20000040
 8001730:	20000074 	.word	0x20000074
 8001734:	2000002c 	.word	0x2000002c
 8001738:	2000008c 	.word	0x2000008c
  CanTxData[7] = CanHeartbeat;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <TxCanMsgs+0x6e4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <TxCanMsgs+0x6e8>)
 8001744:	71da      	strb	r2, [r3, #7]

  //=======================================================
  //Send CAN msg
  //=======================================================
  if(HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, CanTxData, &CanTxMailbox) != HAL_OK){
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <TxCanMsgs+0x6ec>)
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <TxCanMsgs+0x6e8>)
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <TxCanMsgs+0x6f0>)
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <TxCanMsgs+0x6f4>)
 800174e:	f001 fd91 	bl	8003274 <HAL_CAN_AddTxMessage>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <TxCanMsgs+0x6cc>
    Error_Handler();
 8001758:	f000 f990 	bl	8001a7c <Error_Handler>
  }

  CanHeartbeat++;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <TxCanMsgs+0x6e4>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	b2db      	uxtb	r3, r3
 8001762:	3301      	adds	r3, #1
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b03      	ldr	r3, [pc, #12]	; (8001774 <TxCanMsgs+0x6e4>)
 8001768:	701a      	strb	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000088 	.word	0x20000088
 8001778:	20000074 	.word	0x20000074
 800177c:	20000084 	.word	0x20000084
 8001780:	20000040 	.word	0x20000040
 8001784:	20001a78 	.word	0x20001a78

08001788 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  nCanRotaryInvert[0] = 1;
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <StartDefaultTask+0xc8>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
  nCanRotaryInvert[1] = 0;
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <StartDefaultTask+0xc8>)
 8001798:	2200      	movs	r2, #0
 800179a:	705a      	strb	r2, [r3, #1]
  nCanRotaryInvert[2] = 0;
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <StartDefaultTask+0xc8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	709a      	strb	r2, [r3, #2]
  nCanRotaryInvert[3] = 0;
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <StartDefaultTask+0xc8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	70da      	strb	r2, [r3, #3]
  nCanRotaryInvert[4] = 0;
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <StartDefaultTask+0xc8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	711a      	strb	r2, [r3, #4]
  for(;;)
  {
    //=======================================================
    //Set digital outputs
    //=======================================================
    if(nCanDigOut[0] == 0)
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <StartDefaultTask+0xcc>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d108      	bne.n	80017ca <StartDefaultTask+0x42>
      DO1_GPIO_Port->ODR &= ~DO1_Pin;
 80017b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80017c6:	6153      	str	r3, [r2, #20]
 80017c8:	e007      	b.n	80017da <StartDefaultTask+0x52>
    else
      DO1_GPIO_Port->ODR |= DO1_Pin;
 80017ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80017d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d8:	6153      	str	r3, [r2, #20]

    if(nCanDigOut[1] == 0)
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <StartDefaultTask+0xcc>)
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d106      	bne.n	80017f2 <StartDefaultTask+0x6a>
      DO2_GPIO_Port->ODR &= ~DO2_Pin;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <StartDefaultTask+0xd0>)
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <StartDefaultTask+0xd0>)
 80017ea:	f023 0308 	bic.w	r3, r3, #8
 80017ee:	6153      	str	r3, [r2, #20]
 80017f0:	e005      	b.n	80017fe <StartDefaultTask+0x76>
    else
      DO2_GPIO_Port->ODR |= DO2_Pin;
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <StartDefaultTask+0xd0>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4a18      	ldr	r2, [pc, #96]	; (8001858 <StartDefaultTask+0xd0>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6153      	str	r3, [r2, #20]

    if(nCanDigOut[2] == 0)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <StartDefaultTask+0xcc>)
 8001800:	789b      	ldrb	r3, [r3, #2]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <StartDefaultTask+0x8e>
      DO3_GPIO_Port->ODR &= ~DO3_Pin;
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <StartDefaultTask+0xd0>)
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <StartDefaultTask+0xd0>)
 800180e:	f023 0310 	bic.w	r3, r3, #16
 8001812:	6153      	str	r3, [r2, #20]
 8001814:	e005      	b.n	8001822 <StartDefaultTask+0x9a>
    else
      DO3_GPIO_Port->ODR |= DO3_Pin;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <StartDefaultTask+0xd0>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	4a0f      	ldr	r2, [pc, #60]	; (8001858 <StartDefaultTask+0xd0>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6153      	str	r3, [r2, #20]

    if(nCanDigOut[3] == 0)
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <StartDefaultTask+0xcc>)
 8001824:	78db      	ldrb	r3, [r3, #3]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d106      	bne.n	800183a <StartDefaultTask+0xb2>
      DO4_GPIO_Port->ODR &= ~DO4_Pin;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <StartDefaultTask+0xd0>)
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	4a09      	ldr	r2, [pc, #36]	; (8001858 <StartDefaultTask+0xd0>)
 8001832:	f023 0320 	bic.w	r3, r3, #32
 8001836:	6153      	str	r3, [r2, #20]
 8001838:	e005      	b.n	8001846 <StartDefaultTask+0xbe>
    else
      DO4_GPIO_Port->ODR |= DO4_Pin;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <StartDefaultTask+0xd0>)
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <StartDefaultTask+0xd0>)
 8001840:	f043 0320 	orr.w	r3, r3, #32
 8001844:	6153      	str	r3, [r2, #20]

    osDelay(MAIN_TASK_DELAY);
 8001846:	200a      	movs	r0, #10
 8001848:	f004 fd9e 	bl	8006388 <osDelay>
    if(nCanDigOut[0] == 0)
 800184c:	e7af      	b.n	80017ae <StartDefaultTask+0x26>
 800184e:	bf00      	nop
 8001850:	200000a0 	.word	0x200000a0
 8001854:	2000008c 	.word	0x2000008c
 8001858:	48000400 	.word	0x48000400

0800185c <StartCanTxTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCanTxTask */
void StartCanTxTask(void *argument)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    //=======================================================
    //Read digital input pins
    //=======================================================
    digIn[0] = !HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8001864:	2120      	movs	r1, #32
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f002 fe15 	bl	8004498 <HAL_GPIO_ReadPin>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf0c      	ite	eq
 8001874:	2301      	moveq	r3, #1
 8001876:	2300      	movne	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	461a      	mov	r2, r3
 800187c:	4b6b      	ldr	r3, [pc, #428]	; (8001a2c <StartCanTxTask+0x1d0>)
 800187e:	701a      	strb	r2, [r3, #0]
    digIn[1] = !HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001886:	f002 fe07 	bl	8004498 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf0c      	ite	eq
 8001890:	2301      	moveq	r3, #1
 8001892:	2300      	movne	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	4b64      	ldr	r3, [pc, #400]	; (8001a2c <StartCanTxTask+0x1d0>)
 800189a:	705a      	strb	r2, [r3, #1]
    digIn[2] = !HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f002 fdf9 	bl	8004498 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <StartCanTxTask+0x1d0>)
 80018b6:	709a      	strb	r2, [r3, #2]
    digIn[3] = !HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 80018b8:	2101      	movs	r1, #1
 80018ba:	485d      	ldr	r0, [pc, #372]	; (8001a30 <StartCanTxTask+0x1d4>)
 80018bc:	f002 fdec 	bl	8004498 <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <StartCanTxTask+0x1d0>)
 80018d0:	70da      	strb	r2, [r3, #3]
    digIn[4] = !HAL_GPIO_ReadPin(DI5_GPIO_Port, DI5_Pin);
 80018d2:	2102      	movs	r1, #2
 80018d4:	4856      	ldr	r0, [pc, #344]	; (8001a30 <StartCanTxTask+0x1d4>)
 80018d6:	f002 fddf 	bl	8004498 <HAL_GPIO_ReadPin>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf0c      	ite	eq
 80018e0:	2301      	moveq	r3, #1
 80018e2:	2300      	movne	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b50      	ldr	r3, [pc, #320]	; (8001a2c <StartCanTxTask+0x1d0>)
 80018ea:	711a      	strb	r2, [r3, #4]
    digIn[5] = !HAL_GPIO_ReadPin(DI6_GPIO_Port, DI6_Pin);
 80018ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f4:	f002 fdd0 	bl	8004498 <HAL_GPIO_ReadPin>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf0c      	ite	eq
 80018fe:	2301      	moveq	r3, #1
 8001900:	2300      	movne	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4b49      	ldr	r3, [pc, #292]	; (8001a2c <StartCanTxTask+0x1d0>)
 8001908:	715a      	strb	r2, [r3, #5]
    digIn[6] = !HAL_GPIO_ReadPin(DI7_GPIO_Port, DI7_Pin);
 800190a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f002 fdc1 	bl	8004498 <HAL_GPIO_ReadPin>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <StartCanTxTask+0x1d0>)
 8001926:	719a      	strb	r2, [r3, #6]
    digIn[7] = !HAL_GPIO_ReadPin(DI8_GPIO_Port, DI8_Pin);
 8001928:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800192c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001930:	f002 fdb2 	bl	8004498 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf0c      	ite	eq
 800193a:	2301      	moveq	r3, #1
 800193c:	2300      	movne	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	461a      	mov	r2, r3
 8001942:	4b3a      	ldr	r3, [pc, #232]	; (8001a2c <StartCanTxTask+0x1d0>)
 8001944:	71da      	strb	r2, [r3, #7]
    */

    //=======================================================
    //Copy analog input DMA to local vars (single array)
    //=======================================================
    anIn[0] = anInAdc1[0];
 8001946:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <StartCanTxTask+0x1d8>)
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	b29a      	uxth	r2, r3
 800194c:	4b3a      	ldr	r3, [pc, #232]	; (8001a38 <StartCanTxTask+0x1dc>)
 800194e:	801a      	strh	r2, [r3, #0]
    anIn[1] = anInAdc1[1];
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <StartCanTxTask+0x1d8>)
 8001952:	885b      	ldrh	r3, [r3, #2]
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b38      	ldr	r3, [pc, #224]	; (8001a38 <StartCanTxTask+0x1dc>)
 8001958:	805a      	strh	r2, [r3, #2]
    anIn[2] = anInAdc1[2];
 800195a:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <StartCanTxTask+0x1d8>)
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <StartCanTxTask+0x1dc>)
 8001962:	809a      	strh	r2, [r3, #4]
    anIn[3] = anInAdc1[3];
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <StartCanTxTask+0x1d8>)
 8001966:	88db      	ldrh	r3, [r3, #6]
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <StartCanTxTask+0x1dc>)
 800196c:	80da      	strh	r2, [r3, #6]
    anIn[4] = anInAdc2[0];
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <StartCanTxTask+0x1e0>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	b29a      	uxth	r2, r3
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <StartCanTxTask+0x1dc>)
 8001976:	811a      	strh	r2, [r3, #8]

    //=======================================================
    //Scale temperature based on factory calibration
    //=======================================================
    temperature = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <StartCanTxTask+0x1e4>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <StartCanTxTask+0x1e8>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fd7e 	bl	8000498 <__aeabi_f2d>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	461a      	mov	r2, r3
 80019a2:	4623      	mov	r3, r4
 80019a4:	f04f 0000 	mov.w	r0, #0
 80019a8:	4927      	ldr	r1, [pc, #156]	; (8001a48 <StartCanTxTask+0x1ec>)
 80019aa:	f7fe fef7 	bl	800079c <__aeabi_ddiv>
 80019ae:	4603      	mov	r3, r0
 80019b0:	460c      	mov	r4, r1
 80019b2:	4625      	mov	r5, r4
 80019b4:	461c      	mov	r4, r3
                              (((float)anInAdc2[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <StartCanTxTask+0x1e0>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019c4:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <StartCanTxTask+0x1e8>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d4:	ee17 0a90 	vmov	r0, s15
 80019d8:	f7fe fd5e 	bl	8000498 <__aeabi_f2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
    temperature = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_dmul>
 80019e8:	4603      	mov	r3, r0
 80019ea:	460c      	mov	r4, r1
 80019ec:	4618      	mov	r0, r3
 80019ee:	4621      	mov	r1, r4
                              (((float)anInAdc2[0]) - (float)(*STM32_TEMP_3V3_30C)) + 30.0) * 10.0);
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <StartCanTxTask+0x1f0>)
 80019f6:	f7fe fbf1 	bl	80001dc <__adddf3>
 80019fa:	4603      	mov	r3, r0
 80019fc:	460c      	mov	r4, r1
 80019fe:	4618      	mov	r0, r3
 8001a00:	4621      	mov	r1, r4
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <StartCanTxTask+0x1f4>)
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_dmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
    temperature = (uint16_t)((80.0 / ((float)(*STM32_TEMP_3V3_110C) - (float)(*STM32_TEMP_3V3_30C)) *
 8001a10:	4618      	mov	r0, r3
 8001a12:	4621      	mov	r1, r4
 8001a14:	f7fe ffaa 	bl	800096c <__aeabi_d2uiz>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <StartCanTxTask+0x1f8>)
 8001a1e:	801a      	strh	r2, [r3, #0]

    //=======================================================
    //Tx CAN messages
    //=======================================================
    TxCanMsgs();
 8001a20:	f7ff fb36 	bl	8001090 <TxCanMsgs>
    osDelay(CAN_TX_DELAY);
 8001a24:	2032      	movs	r0, #50	; 0x32
 8001a26:	f004 fcaf 	bl	8006388 <osDelay>
    digIn[0] = !HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8001a2a:	e71b      	b.n	8001864 <StartCanTxTask+0x8>
 8001a2c:	2000002c 	.word	0x2000002c
 8001a30:	48000400 	.word	0x48000400
 8001a34:	20001af4 	.word	0x20001af4
 8001a38:	20000034 	.word	0x20000034
 8001a3c:	20001af0 	.word	0x20001af0
 8001a40:	1ffff7c2 	.word	0x1ffff7c2
 8001a44:	1ffff7b8 	.word	0x1ffff7b8
 8001a48:	40540000 	.word	0x40540000
 8001a4c:	403e0000 	.word	0x403e0000
 8001a50:	40240000 	.word	0x40240000
 8001a54:	2000003e 	.word	0x2000003e

08001a58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a6a:	f000 faa5 	bl	8001fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40001000 	.word	0x40001000

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_MspInit+0x44>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6193      	str	r3, [r2, #24]
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_MspInit+0x44>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_MspInit+0x44>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af4:	d156      	bne.n	8001ba4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001af6:	4b5b      	ldr	r3, [pc, #364]	; (8001c64 <HAL_ADC_MspInit+0x190>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a59      	ldr	r2, [pc, #356]	; (8001c64 <HAL_ADC_MspInit+0x190>)
 8001afe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b00:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_ADC_MspInit+0x190>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10b      	bne.n	8001b20 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4a56      	ldr	r2, [pc, #344]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6153      	str	r3, [r2, #20]
 8001b14:	4b54      	ldr	r3, [pc, #336]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b51      	ldr	r3, [pc, #324]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4a50      	ldr	r2, [pc, #320]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2a:	6153      	str	r3, [r2, #20]
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AI1_Pin|AI2_Pin|AI3_Pin|AI4_Pin;
 8001b38:	230f      	movs	r3, #15
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4e:	f002 fb31 	bl	80041b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b54:	4a46      	ldr	r2, [pc, #280]	; (8001c70 <HAL_ADC_MspInit+0x19c>)
 8001b56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b43      	ldr	r3, [pc, #268]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b66:	2280      	movs	r2, #128	; 0x80
 8001b68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b72:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b7a:	4b3c      	ldr	r3, [pc, #240]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b86:	4839      	ldr	r0, [pc, #228]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b88:	f002 f97c 	bl	8003e84 <HAL_DMA_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001b92:	f7ff ff73 	bl	8001a7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <HAL_ADC_MspInit+0x198>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ba2:	e05a      	b.n	8001c5a <HAL_ADC_MspInit+0x186>
  else if(hadc->Instance==ADC2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <HAL_ADC_MspInit+0x1a0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d155      	bne.n	8001c5a <HAL_ADC_MspInit+0x186>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_ADC_MspInit+0x190>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <HAL_ADC_MspInit+0x190>)
 8001bb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_ADC_MspInit+0x190>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001bc0:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a28      	ldr	r2, [pc, #160]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6153      	str	r3, [r2, #20]
 8001bcc:	4b26      	ldr	r3, [pc, #152]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be2:	6153      	str	r3, [r2, #20]
 8001be4:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_ADC_MspInit+0x194>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AI5_Pin;
 8001bf0:	2310      	movs	r3, #16
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AI5_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 031c 	add.w	r3, r7, #28
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c06:	f002 fad5 	bl	80041b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001c0a:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c0c:	4a1b      	ldr	r2, [pc, #108]	; (8001c7c <HAL_ADC_MspInit+0x1a8>)
 8001c0e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c28:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c30:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c34:	2220      	movs	r2, #32
 8001c36:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001c3e:	480e      	ldr	r0, [pc, #56]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c40:	f002 f920 	bl	8003e84 <HAL_DMA_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 8001c4a:	f7ff ff17 	bl	8001a7c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a09      	ldr	r2, [pc, #36]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c52:	639a      	str	r2, [r3, #56]	; 0x38
 8001c54:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_ADC_MspInit+0x1a4>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001c5a:	bf00      	nop
 8001c5c:	3730      	adds	r7, #48	; 0x30
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200000a8 	.word	0x200000a8
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	20001b00 	.word	0x20001b00
 8001c70:	40020008 	.word	0x40020008
 8001c74:	50000100 	.word	0x50000100
 8001c78:	20001b48 	.word	0x20001b48
 8001c7c:	4002001c 	.word	0x4002001c

08001c80 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <HAL_CAN_MspInit+0x90>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d131      	bne.n	8001d06 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_CAN_MspInit+0x94>)
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	; (8001d14 <HAL_CAN_MspInit+0x94>)
 8001ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cac:	61d3      	str	r3, [r2, #28]
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_CAN_MspInit+0x94>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <HAL_CAN_MspInit+0x94>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	; (8001d14 <HAL_CAN_MspInit+0x94>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc4:	6153      	str	r3, [r2, #20]
 8001cc6:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_CAN_MspInit+0x94>)
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cd2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf2:	f002 fa5f 	bl	80041b4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2014      	movs	r0, #20
 8001cfc:	f001 ffae 	bl	8003c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8001d00:	2014      	movs	r0, #20
 8001d02:	f001 ffc7 	bl	8003c94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001d06:	bf00      	nop
 8001d08:	3728      	adds	r7, #40	; 0x28
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40006400 	.word	0x40006400
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <HAL_CRC_MspInit+0x38>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10b      	bne.n	8001d42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_CRC_MspInit+0x3c>)
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_CRC_MspInit+0x3c>)
 8001d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d34:	6153      	str	r3, [r2, #20]
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <HAL_CRC_MspInit+0x3c>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023000 	.word	0x40023000
 8001d54:	40021000 	.word	0x40021000

08001d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <HAL_I2C_MspInit+0x7c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d127      	bne.n	8001dca <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_I2C_MspInit+0x80>)
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_I2C_MspInit+0x80>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	6153      	str	r3, [r2, #20]
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <HAL_I2C_MspInit+0x80>)
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d92:	23c0      	movs	r3, #192	; 0xc0
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d96:	2312      	movs	r3, #18
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da2:	2304      	movs	r3, #4
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_I2C_MspInit+0x84>)
 8001dae:	f002 fa01 	bl	80041b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_I2C_MspInit+0x80>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_I2C_MspInit+0x80>)
 8001db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dbc:	61d3      	str	r3, [r2, #28]
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_I2C_MspInit+0x80>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	3728      	adds	r7, #40	; 0x28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40005400 	.word	0x40005400
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000400 	.word	0x48000400

08001de0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority ,0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	2036      	movs	r0, #54	; 0x36
 8001df6:	f001 ff31 	bl	8003c5c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001dfa:	2036      	movs	r0, #54	; 0x36
 8001dfc:	f001 ff4a 	bl	8003c94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e00:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <HAL_InitTick+0xa0>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <HAL_InitTick+0xa0>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	61d3      	str	r3, [r2, #28]
 8001e0c:	4b1c      	ldr	r3, [pc, #112]	; (8001e80 <HAL_InitTick+0xa0>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e18:	f107 0210 	add.w	r2, r7, #16
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fdaa 	bl	800597c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001e28:	f003 fd86 	bl	8005938 <HAL_RCC_GetPCLK1Freq>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e34:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <HAL_InitTick+0xa4>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_InitTick+0xac>)
 8001e44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e4c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e52:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e60:	4809      	ldr	r0, [pc, #36]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e62:	f003 fee3 	bl	8005c2c <HAL_TIM_Base_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e6c:	4806      	ldr	r0, [pc, #24]	; (8001e88 <HAL_InitTick+0xa8>)
 8001e6e:	f003 ff3f 	bl	8005cf0 <HAL_TIM_Base_Start_IT>
 8001e72:	4603      	mov	r3, r0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3730      	adds	r7, #48	; 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000
 8001e84:	431bde83 	.word	0x431bde83
 8001e88:	20001b8c 	.word	0x20001b8c
 8001e8c:	40001000 	.word	0x40001000

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA1_Channel1_IRQHandler+0x10>)
 8001eca:	f002 f881 	bl	8003fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20001b00 	.word	0x20001b00

08001ed8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <DMA1_Channel2_IRQHandler+0x10>)
 8001ede:	f002 f877 	bl	8003fd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20001b48 	.word	0x20001b48

08001eec <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <CAN_RX0_IRQHandler+0x10>)
 8001ef2:	f001 fbd2 	bl	800369a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20001a78 	.word	0x20001a78

08001f00 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <TIM6_DAC1_IRQHandler+0x10>)
 8001f06:	f003 ff4f 	bl	8005da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20001b8c 	.word	0x20001b8c

08001f14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <SystemInit+0x20>)
 8001f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <SystemInit+0x20>)
 8001f20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480d      	ldr	r0, [pc, #52]	; (8001f74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3e:	490e      	ldr	r1, [pc, #56]	; (8001f78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <LoopForever+0xe>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f54:	4c0b      	ldr	r4, [pc, #44]	; (8001f84 <LoopForever+0x16>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f62:	f7ff ffd7 	bl	8001f14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f66:	f006 fe01 	bl	8008b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f6a:	f7fe fd1f 	bl	80009ac <main>

08001f6e <LoopForever>:

LoopForever:
    b LoopForever
 8001f6e:	e7fe      	b.n	8001f6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f70:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f7c:	08008cac 	.word	0x08008cac
  ldr r2, =_sbss
 8001f80:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f84:	20001c1c 	.word	0x20001c1c

08001f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC1_2_IRQHandler>
	...

08001f8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_Init+0x28>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_Init+0x28>)
 8001f96:	f043 0310 	orr.w	r3, r3, #16
 8001f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f9c:	2003      	movs	r0, #3
 8001f9e:	f001 fe52 	bl	8003c46 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7ff ff1c 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fa8:	f7ff fd70 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40022000 	.word	0x40022000

08001fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x20>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x24>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <HAL_IncTick+0x24>)
 8001fca:	6013      	str	r3, [r2, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	20001bd8 	.word	0x20001bd8

08001fe0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_GetTick+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20001bd8 	.word	0x20001bd8

08001ff8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09a      	sub	sp, #104	; 0x68
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e172      	b.n	800233a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d176      	bne.n	8002154 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d152      	bne.n	8002114 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fd23 	bl	8001ad4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d13b      	bne.n	8002114 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fe81 	bl	8002da4 <ADC_Disable>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12f      	bne.n	8002114 <HAL_ADC_Init+0xe0>
 80020b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d12b      	bne.n	8002114 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020c4:	f023 0302 	bic.w	r3, r3, #2
 80020c8:	f043 0202 	orr.w	r2, r3, #2
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020de:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020f0:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_ADC_Init+0x310>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a94      	ldr	r2, [pc, #592]	; (8002348 <HAL_ADC_Init+0x314>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	0c9a      	lsrs	r2, r3, #18
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002106:	e002      	b.n	800210e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3b01      	subs	r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f9      	bne.n	8002108 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800212c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002130:	d110      	bne.n	8002154 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f023 0312 	bic.w	r3, r3, #18
 800213a:	f043 0210 	orr.w	r2, r3, #16
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f043 0201 	orr.w	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 80df 	bne.w	8002320 <HAL_ADC_Init+0x2ec>
 8002162:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80da 	bne.w	8002320 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80d2 	bne.w	8002320 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002184:	f043 0202 	orr.w	r2, r3, #2
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800218c:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_ADC_Init+0x318>)
 800218e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002198:	d102      	bne.n	80021a0 <HAL_ADC_Init+0x16c>
 800219a:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_ADC_Init+0x31c>)
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	e002      	b.n	80021a6 <HAL_ADC_Init+0x172>
 80021a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d108      	bne.n	80021c6 <HAL_ADC_Init+0x192>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_Init+0x192>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_ADC_Init+0x194>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d11c      	bne.n	8002206 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d010      	beq.n	80021f4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d107      	bne.n	80021ee <HAL_ADC_Init+0x1ba>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x1ba>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_ADC_Init+0x1bc>
 80021ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d108      	bne.n	8002206 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80021f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	431a      	orrs	r2, r3
 8002202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002204:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7e5b      	ldrb	r3, [r3, #25]
 800220a:	035b      	lsls	r3, r3, #13
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002210:	2a01      	cmp	r2, #1
 8002212:	d002      	beq.n	800221a <HAL_ADC_Init+0x1e6>
 8002214:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002218:	e000      	b.n	800221c <HAL_ADC_Init+0x1e8>
 800221a:	2200      	movs	r2, #0
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4313      	orrs	r3, r2
 800222a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800222c:	4313      	orrs	r3, r2
 800222e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d11b      	bne.n	8002272 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7e5b      	ldrb	r3, [r3, #25]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	3b01      	subs	r3, #1
 8002248:	045a      	lsls	r2, r3, #17
 800224a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800224c:	4313      	orrs	r3, r2
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	663b      	str	r3, [r7, #96]	; 0x60
 8002254:	e00d      	b.n	8002272 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	2b01      	cmp	r3, #1
 8002278:	d007      	beq.n	800228a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	4313      	orrs	r3, r2
 8002284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002286:	4313      	orrs	r3, r2
 8002288:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b00      	cmp	r3, #0
 8002296:	d114      	bne.n	80022c2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022a6:	f023 0302 	bic.w	r3, r3, #2
 80022aa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e1b      	ldrb	r3, [r3, #24]
 80022b0:	039a      	lsls	r2, r3, #14
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4313      	orrs	r3, r2
 80022bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022be:	4313      	orrs	r3, r2
 80022c0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_ADC_Init+0x320>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80022d2:	430b      	orrs	r3, r1
 80022d4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10c      	bne.n	80022f8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	f023 010f 	bic.w	r1, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	1e5a      	subs	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	631a      	str	r2, [r3, #48]	; 0x30
 80022f6:	e007      	b.n	8002308 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 020f 	bic.w	r2, r2, #15
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	f043 0201 	orr.w	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
 800231e:	e00a      	b.n	8002336 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f023 0312 	bic.w	r3, r3, #18
 8002328:	f043 0210 	orr.w	r2, r3, #16
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002330:	2301      	movs	r3, #1
 8002332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002336:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800233a:	4618      	mov	r0, r3
 800233c:	3768      	adds	r7, #104	; 0x68
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000000 	.word	0x20000000
 8002348:	431bde83 	.word	0x431bde83
 800234c:	50000300 	.word	0x50000300
 8002350:	50000100 	.word	0x50000100
 8002354:	fff0c007 	.word	0xfff0c007

08002358 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 80b9 	bne.w	80024ea <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADC_Start_DMA+0x2e>
 8002382:	2302      	movs	r3, #2
 8002384:	e0b4      	b.n	80024f0 <HAL_ADC_Start_DMA+0x198>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800238e:	4b5a      	ldr	r3, [pc, #360]	; (80024f8 <HAL_ADC_Start_DMA+0x1a0>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 80a0 	bne.w	80024dc <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fca3 	bl	8002ce8 <ADC_Enable>
 80023a2:	4603      	mov	r3, r0
 80023a4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 8092 	bne.w	80024d2 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023b6:	f023 0301 	bic.w	r3, r3, #1
 80023ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023c2:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_ADC_Start_DMA+0x1a0>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d004      	beq.n	80023d8 <HAL_ADC_Start_DMA+0x80>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023d6:	d115      	bne.n	8002404 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d027      	beq.n	8002442 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002402:	e01e      	b.n	8002442 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002418:	d004      	beq.n	8002424 <HAL_ADC_Start_DMA+0xcc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a37      	ldr	r2, [pc, #220]	; (80024fc <HAL_ADC_Start_DMA+0x1a4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d10e      	bne.n	8002442 <HAL_ADC_Start_DMA+0xea>
 8002424:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d007      	beq.n	8002442 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800243a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800244e:	d106      	bne.n	800245e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	f023 0206 	bic.w	r2, r3, #6
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	645a      	str	r2, [r3, #68]	; 0x44
 800245c:	e002      	b.n	8002464 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <HAL_ADC_Start_DMA+0x1a8>)
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002478:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_ADC_Start_DMA+0x1ac>)
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002480:	4a21      	ldr	r2, [pc, #132]	; (8002508 <HAL_ADC_Start_DMA+0x1b0>)
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	221c      	movs	r2, #28
 800248a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0210 	orr.w	r2, r2, #16
 800249a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3340      	adds	r3, #64	; 0x40
 80024b6:	4619      	mov	r1, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f001 fd29 	bl	8003f12 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0204 	orr.w	r2, r2, #4
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e00d      	b.n	80024ee <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024da:	e008      	b.n	80024ee <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80024e8:	e001      	b.n	80024ee <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80024ea:	2302      	movs	r3, #2
 80024ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	50000300 	.word	0x50000300
 80024fc:	50000100 	.word	0x50000100
 8002500:	08002c1d 	.word	0x08002c1d
 8002504:	08002c97 	.word	0x08002c97
 8002508:	08002cb3 	.word	0x08002cb3

0800250c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b09b      	sub	sp, #108	; 0x6c
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_ADC_ConfigChannel+0x22>
 800252a:	2302      	movs	r3, #2
 800252c:	e2a5      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x56e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 8289 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d81c      	bhi.n	8002588 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	461a      	mov	r2, r3
 8002562:	231f      	movs	r3, #31
 8002564:	4093      	lsls	r3, r2
 8002566:	43db      	mvns	r3, r3
 8002568:	4019      	ands	r1, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fa00 f203 	lsl.w	r2, r0, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
 8002586:	e063      	b.n	8002650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d81e      	bhi.n	80025ce <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	3b1e      	subs	r3, #30
 80025a4:	221f      	movs	r2, #31
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4019      	ands	r1, r3
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	3b1e      	subs	r3, #30
 80025c0:	fa00 f203 	lsl.w	r2, r0, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34
 80025cc:	e040      	b.n	8002650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b0e      	cmp	r3, #14
 80025d4:	d81e      	bhi.n	8002614 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	3b3c      	subs	r3, #60	; 0x3c
 80025ea:	221f      	movs	r2, #31
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	4019      	ands	r1, r3
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	3b3c      	subs	r3, #60	; 0x3c
 8002606:	fa00 f203 	lsl.w	r2, r0, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	639a      	str	r2, [r3, #56]	; 0x38
 8002612:	e01d      	b.n	8002650 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	3b5a      	subs	r3, #90	; 0x5a
 8002628:	221f      	movs	r2, #31
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	4019      	ands	r1, r3
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6818      	ldr	r0, [r3, #0]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	3b5a      	subs	r3, #90	; 0x5a
 8002644:	fa00 f203 	lsl.w	r2, r0, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	f040 80e5 	bne.w	800282a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b09      	cmp	r3, #9
 8002666:	d91c      	bls.n	80026a2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6999      	ldr	r1, [r3, #24]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4413      	add	r3, r2
 8002678:	3b1e      	subs	r3, #30
 800267a:	2207      	movs	r2, #7
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	4019      	ands	r1, r3
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	6898      	ldr	r0, [r3, #8]
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	3b1e      	subs	r3, #30
 8002694:	fa00 f203 	lsl.w	r2, r0, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	619a      	str	r2, [r3, #24]
 80026a0:	e019      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6959      	ldr	r1, [r3, #20]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	2207      	movs	r2, #7
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	4019      	ands	r1, r3
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	6898      	ldr	r0, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	fa00 f203 	lsl.w	r2, r0, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d84f      	bhi.n	8002798 <HAL_ADC_ConfigChannel+0x28c>
 80026f8:	a201      	add	r2, pc, #4	; (adr r2, 8002700 <HAL_ADC_ConfigChannel+0x1f4>)
 80026fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fe:	bf00      	nop
 8002700:	08002711 	.word	0x08002711
 8002704:	08002733 	.word	0x08002733
 8002708:	08002755 	.word	0x08002755
 800270c:	08002777 	.word	0x08002777
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002716:	4b9e      	ldr	r3, [pc, #632]	; (8002990 <HAL_ADC_ConfigChannel+0x484>)
 8002718:	4013      	ands	r3, r2
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	0691      	lsls	r1, r2, #26
 8002720:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002722:	430a      	orrs	r2, r1
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800272e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002730:	e07e      	b.n	8002830 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002738:	4b95      	ldr	r3, [pc, #596]	; (8002990 <HAL_ADC_ConfigChannel+0x484>)
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	0691      	lsls	r1, r2, #26
 8002742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002744:	430a      	orrs	r2, r1
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002750:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002752:	e06d      	b.n	8002830 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800275a:	4b8d      	ldr	r3, [pc, #564]	; (8002990 <HAL_ADC_ConfigChannel+0x484>)
 800275c:	4013      	ands	r3, r2
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	0691      	lsls	r1, r2, #26
 8002764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002766:	430a      	orrs	r2, r1
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002772:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002774:	e05c      	b.n	8002830 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800277c:	4b84      	ldr	r3, [pc, #528]	; (8002990 <HAL_ADC_ConfigChannel+0x484>)
 800277e:	4013      	ands	r3, r2
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	0691      	lsls	r1, r2, #26
 8002786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002788:	430a      	orrs	r2, r1
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002794:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002796:	e04b      	b.n	8002830 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	069b      	lsls	r3, r3, #26
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d107      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027ba:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	069b      	lsls	r3, r3, #26
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027de:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	069b      	lsls	r3, r3, #26
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d107      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002802:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800280a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	069b      	lsls	r3, r3, #26
 8002814:	429a      	cmp	r2, r3
 8002816:	d10a      	bne.n	800282e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002826:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002828:	e001      	b.n	800282e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_ADC_ConfigChannel+0x324>
      break;
 800282e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	2b01      	cmp	r3, #1
 800283c:	d108      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x344>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x344>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_ADC_ConfigChannel+0x346>
 8002850:	2300      	movs	r3, #0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 810b 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d00f      	beq.n	8002880 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	400a      	ands	r2, r1
 800287a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800287e:	e049      	b.n	8002914 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2201      	movs	r2, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b09      	cmp	r3, #9
 80028a0:	d91c      	bls.n	80028dc <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6999      	ldr	r1, [r3, #24]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	3b1b      	subs	r3, #27
 80028b4:	2207      	movs	r2, #7
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43db      	mvns	r3, r3
 80028bc:	4019      	ands	r1, r3
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6898      	ldr	r0, [r3, #8]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	3b1b      	subs	r3, #27
 80028ce:	fa00 f203 	lsl.w	r2, r0, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	619a      	str	r2, [r3, #24]
 80028da:	e01b      	b.n	8002914 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6959      	ldr	r1, [r3, #20]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	2207      	movs	r2, #7
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	4019      	ands	r1, r3
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	6898      	ldr	r0, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_ADC_ConfigChannel+0x488>)
 8002916:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b10      	cmp	r3, #16
 800291e:	d105      	bne.n	800292c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002928:	2b00      	cmp	r3, #0
 800292a:	d015      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002930:	2b11      	cmp	r3, #17
 8002932:	d105      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002944:	2b12      	cmp	r3, #18
 8002946:	f040 8092 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800294a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002952:	2b00      	cmp	r3, #0
 8002954:	f040 808b 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002960:	d102      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x45c>
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <HAL_ADC_ConfigChannel+0x48c>)
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e002      	b.n	800296e <HAL_ADC_ConfigChannel+0x462>
 8002968:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800296c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d10f      	bne.n	800299c <HAL_ADC_ConfigChannel+0x490>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_ADC_ConfigChannel+0x490>
 800298a:	2301      	movs	r3, #1
 800298c:	e007      	b.n	800299e <HAL_ADC_ConfigChannel+0x492>
 800298e:	bf00      	nop
 8002990:	83fff000 	.word	0x83fff000
 8002994:	50000300 	.word	0x50000300
 8002998:	50000100 	.word	0x50000100
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d150      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029a2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x4b8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x4b8>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x4ba>
 80029c4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d13c      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d11d      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x502>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029da:	d118      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80029dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e8:	4b27      	ldr	r3, [pc, #156]	; (8002a88 <HAL_ADC_ConfigChannel+0x57c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_ADC_ConfigChannel+0x580>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9a      	lsrs	r2, r3, #18
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80029fe:	e002      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a0c:	e02e      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b11      	cmp	r3, #17
 8002a14:	d10b      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x522>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002a28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a2a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a2c:	e01e      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b12      	cmp	r3, #18
 8002a34:	d11a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a40:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a42:	e013      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a56:	e00a      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002a6a:	e000      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a6c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	376c      	adds	r7, #108	; 0x6c
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000000 	.word	0x20000000
 8002a8c:	431bde83 	.word	0x431bde83

08002a90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b099      	sub	sp, #100	; 0x64
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa8:	d102      	bne.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002aaa:	4b5a      	ldr	r3, [pc, #360]	; (8002c14 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	e002      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002ab0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ab4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0a2      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e09b      	b.n	8002c06 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d17f      	bne.n	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d179      	bne.n	8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002af0:	4b49      	ldr	r3, [pc, #292]	; (8002c18 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002af2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d040      	beq.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002afc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0e:	035b      	lsls	r3, r3, #13
 8002b10:	430b      	orrs	r3, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b16:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d15c      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d107      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002b5a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d14b      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b68:	f023 030f 	bic.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	6811      	ldr	r1, [r2, #0]
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	431a      	orrs	r2, r3
 8002b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b7c:	e03c      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b88:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d108      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002baa:	2300      	movs	r3, #0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d123      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002bcc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d112      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bda:	f023 030f 	bic.w	r3, r3, #15
 8002bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002be2:	e009      	b.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bf6:	e000      	b.n	8002bfa <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002c06:	4618      	mov	r0, r3
 8002c08:	3764      	adds	r7, #100	; 0x64
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	50000100 	.word	0x50000100
 8002c18:	50000300 	.word	0x50000300

08002c1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d126      	bne.n	8002c84 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d115      	bne.n	8002c7c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d111      	bne.n	8002c7c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff f9bb 	bl	8001ff8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff f9b1 	bl	800200c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff f9a1 	bl	8002020 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d108      	bne.n	8002d14 <ADC_Enable+0x2c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <ADC_Enable+0x2c>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <ADC_Enable+0x2e>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d13c      	bne.n	8002d94 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <ADC_Enable+0xb8>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00d      	beq.n	8002d44 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f043 0210 	orr.w	r2, r3, #16
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e028      	b.n	8002d96 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689a      	ldr	r2, [r3, #8]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002d54:	f7ff f944 	bl	8001fe0 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d5a:	e014      	b.n	8002d86 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d5c:	f7ff f940 	bl	8001fe0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d90d      	bls.n	8002d86 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f043 0210 	orr.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f043 0201 	orr.w	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e007      	b.n	8002d96 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d1e3      	bne.n	8002d5c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	8000003f 	.word	0x8000003f

08002da4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d108      	bne.n	8002dd0 <ADC_Disable+0x2c>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <ADC_Disable+0x2c>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <ADC_Disable+0x2e>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d040      	beq.n	8002e58 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030d 	and.w	r3, r3, #13
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10f      	bne.n	8002e04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0202 	orr.w	r2, r2, #2
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2203      	movs	r2, #3
 8002dfa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002dfc:	f7ff f8f0 	bl	8001fe0 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e02:	e022      	b.n	8002e4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0210 	orr.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e01c      	b.n	8002e5a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e20:	f7ff f8de 	bl	8001fe0 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d90d      	bls.n	8002e4a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e007      	b.n	8002e5a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d0e3      	beq.n	8002e20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0ed      	b.n	8003050 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fe fefd 	bl	8001c80 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0202 	bic.w	r2, r2, #2
 8002e94:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e96:	f7ff f8a3 	bl	8001fe0 <HAL_GetTick>
 8002e9a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e9c:	e012      	b.n	8002ec4 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e9e:	f7ff f89f 	bl	8001fe0 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	2b0a      	cmp	r3, #10
 8002eaa:	d90b      	bls.n	8002ec4 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2205      	movs	r2, #5
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0c5      	b.n	8003050 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e5      	bne.n	8002e9e <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ee2:	f7ff f87d 	bl	8001fe0 <HAL_GetTick>
 8002ee6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ee8:	e012      	b.n	8002f10 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eea:	f7ff f879 	bl	8001fe0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b0a      	cmp	r3, #10
 8002ef6:	d90b      	bls.n	8002f10 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2205      	movs	r2, #5
 8002f08:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e09f      	b.n	8003050 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0e5      	beq.n	8002eea <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	7e1b      	ldrb	r3, [r3, #24]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d108      	bne.n	8002f38 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e007      	b.n	8002f48 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7e5b      	ldrb	r3, [r3, #25]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d108      	bne.n	8002f62 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	e007      	b.n	8002f72 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	7e9b      	ldrb	r3, [r3, #26]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d108      	bne.n	8002f8c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0220 	orr.w	r2, r2, #32
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	e007      	b.n	8002f9c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0220 	bic.w	r2, r2, #32
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7edb      	ldrb	r3, [r3, #27]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d108      	bne.n	8002fb6 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0210 	bic.w	r2, r2, #16
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e007      	b.n	8002fc6 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0210 	orr.w	r2, r2, #16
 8002fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	7f1b      	ldrb	r3, [r3, #28]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d108      	bne.n	8002fe0 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f042 0208 	orr.w	r2, r2, #8
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	e007      	b.n	8002ff0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0208 	bic.w	r2, r2, #8
 8002fee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7f5b      	ldrb	r3, [r3, #29]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d108      	bne.n	800300a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0204 	orr.w	r2, r2, #4
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0204 	bic.w	r2, r2, #4
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	ea42 0103 	orr.w	r1, r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800306e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d003      	beq.n	800307e <HAL_CAN_ConfigFilter+0x26>
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b02      	cmp	r3, #2
 800307a:	f040 80aa 	bne.w	80031d2 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003084:	f043 0201 	orr.w	r2, r3, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2201      	movs	r2, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	401a      	ands	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d123      	bne.n	8003100 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3248      	adds	r2, #72	; 0x48
 80030e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030f6:	6979      	ldr	r1, [r7, #20]
 80030f8:	3348      	adds	r3, #72	; 0x48
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d122      	bne.n	800314e <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	431a      	orrs	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003128:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3248      	adds	r2, #72	; 0x48
 800312e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003142:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	43db      	mvns	r3, r3
 8003160:	401a      	ands	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003168:	e007      	b.n	800317a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	431a      	orrs	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	43db      	mvns	r3, r3
 800318c:	401a      	ands	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003194:	e007      	b.n	80031a6 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	431a      	orrs	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80031c4:	f023 0201 	bic.w	r2, r3, #1
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e006      	b.n	80031e0 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d12e      	bne.n	800325e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0201 	bic.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003218:	f7fe fee2 	bl	8001fe0 <HAL_GetTick>
 800321c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800321e:	e012      	b.n	8003246 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003220:	f7fe fede 	bl	8001fe0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b0a      	cmp	r3, #10
 800322c:	d90b      	bls.n	8003246 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2205      	movs	r2, #5
 800323e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e012      	b.n	800326c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1e5      	bne.n	8003220 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800325a:	2300      	movs	r3, #0
 800325c:	e006      	b.n	800326c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003288:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003292:	7ffb      	ldrb	r3, [r7, #31]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d003      	beq.n	80032a0 <HAL_CAN_AddTxMessage+0x2c>
 8003298:	7ffb      	ldrb	r3, [r7, #31]
 800329a:	2b02      	cmp	r3, #2
 800329c:	f040 80b8 	bne.w	8003410 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10a      	bne.n	80032c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d105      	bne.n	80032c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80a0 	beq.w	8003400 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	0e1b      	lsrs	r3, r3, #24
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d907      	bls.n	80032e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e09e      	b.n	800341e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80032e0:	2201      	movs	r2, #1
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	409a      	lsls	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10d      	bne.n	800330e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80032fc:	68f9      	ldr	r1, [r7, #12]
 80032fe:	6809      	ldr	r1, [r1, #0]
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3318      	adds	r3, #24
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	440b      	add	r3, r1
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e00f      	b.n	800332e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003318:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003322:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	3318      	adds	r3, #24
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	440b      	add	r3, r1
 800332c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6819      	ldr	r1, [r3, #0]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3318      	adds	r3, #24
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3304      	adds	r3, #4
 8003340:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	7d1b      	ldrb	r3, [r3, #20]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d111      	bne.n	800336e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3318      	adds	r3, #24
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	6811      	ldr	r1, [r2, #0]
 800335e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3318      	adds	r3, #24
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	440b      	add	r3, r1
 800336a:	3304      	adds	r3, #4
 800336c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3307      	adds	r3, #7
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	061a      	lsls	r2, r3, #24
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3306      	adds	r3, #6
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3305      	adds	r3, #5
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4313      	orrs	r3, r2
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	3204      	adds	r2, #4
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	4610      	mov	r0, r2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	6811      	ldr	r1, [r2, #0]
 8003396:	ea43 0200 	orr.w	r2, r3, r0
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	440b      	add	r3, r1
 80033a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80033a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3303      	adds	r3, #3
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	061a      	lsls	r2, r3, #24
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3302      	adds	r3, #2
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3301      	adds	r3, #1
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	4313      	orrs	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	7812      	ldrb	r2, [r2, #0]
 80033c6:	4610      	mov	r0, r2
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	6811      	ldr	r1, [r2, #0]
 80033cc:	ea43 0200 	orr.w	r2, r3, r0
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	440b      	add	r3, r1
 80033d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80033da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3318      	adds	r3, #24
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	4413      	add	r3, r2
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	6811      	ldr	r1, [r2, #0]
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3318      	adds	r3, #24
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	440b      	add	r3, r1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e00e      	b.n	800341e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e006      	b.n	800341e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800342a:	b480      	push	{r7}
 800342c:	b087      	sub	sp, #28
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800343e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d003      	beq.n	800344e <HAL_CAN_GetRxMessage+0x24>
 8003446:	7dfb      	ldrb	r3, [r7, #23]
 8003448:	2b02      	cmp	r3, #2
 800344a:	f040 80f3 	bne.w	8003634 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10e      	bne.n	8003472 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e0e7      	b.n	8003642 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0303 	and.w	r3, r3, #3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d107      	bne.n	8003490 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003484:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0d8      	b.n	8003642 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	331b      	adds	r3, #27
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	4413      	add	r3, r2
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0204 	and.w	r2, r3, #4
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	331b      	adds	r3, #27
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	4413      	add	r3, r2
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	331b      	adds	r3, #27
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	4413      	add	r3, r2
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	08db      	lsrs	r3, r3, #3
 80034d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	331b      	adds	r3, #27
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	4413      	add	r3, r2
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0202 	and.w	r2, r3, #2
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	331b      	adds	r3, #27
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	4413      	add	r3, r2
 8003502:	3304      	adds	r3, #4
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	331b      	adds	r3, #27
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	b2da      	uxtb	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	331b      	adds	r3, #27
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	0c1b      	lsrs	r3, r3, #16
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	011b      	lsls	r3, r3, #4
 8003546:	4413      	add	r3, r2
 8003548:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	0a1a      	lsrs	r2, r3, #8
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	b2d2      	uxtb	r2, r2
 800356c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	4413      	add	r3, r2
 8003578:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	0c1a      	lsrs	r2, r3, #16
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	3302      	adds	r3, #2
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	4413      	add	r3, r2
 8003592:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	0e1a      	lsrs	r2, r3, #24
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	3303      	adds	r3, #3
 800359e:	b2d2      	uxtb	r2, r2
 80035a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	3304      	adds	r3, #4
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	0a1a      	lsrs	r2, r3, #8
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	3305      	adds	r3, #5
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0c1a      	lsrs	r2, r3, #16
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	3306      	adds	r3, #6
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0e1a      	lsrs	r2, r3, #24
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	3307      	adds	r3, #7
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0220 	orr.w	r2, r2, #32
 800361c:	60da      	str	r2, [r3, #12]
 800361e:	e007      	b.n	8003630 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691a      	ldr	r2, [r3, #16]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0220 	orr.w	r2, r2, #32
 800362e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e006      	b.n	8003642 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800365e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d002      	beq.n	800366c <HAL_CAN_ActivateNotification+0x1e>
 8003666:	7bfb      	ldrb	r3, [r7, #15]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d109      	bne.n	8003680 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6959      	ldr	r1, [r3, #20]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e006      	b.n	800368e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b08a      	sub	sp, #40	; 0x28
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d07c      	beq.n	80037da <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d023      	beq.n	8003732 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f97d 	bl	80039fc <HAL_CAN_TxMailbox0CompleteCallback>
 8003702:	e016      	b.n	8003732 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
 8003716:	e00c      	b.n	8003732 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	e002      	b.n	8003732 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f983 	bl	8003a38 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003738:	2b00      	cmp	r3, #0
 800373a:	d024      	beq.n	8003786 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003744:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f95d 	bl	8003a10 <HAL_CAN_TxMailbox1CompleteCallback>
 8003756:	e016      	b.n	8003786 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
 800376a:	e00c      	b.n	8003786 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
 800377e:	e002      	b.n	8003786 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f963 	bl	8003a4c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d024      	beq.n	80037da <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003798:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f93d 	bl	8003a24 <HAL_CAN_TxMailbox2CompleteCallback>
 80037aa:	e016      	b.n	80037da <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d004      	beq.n	80037c0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e00c      	b.n	80037da <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	e002      	b.n	80037da <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f943 	bl	8003a60 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00c      	beq.n	80037fe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2210      	movs	r2, #16
 80037fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2208      	movs	r2, #8
 8003818:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f92a 	bl	8003a74 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd fbe5 	bl	8001008 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003858:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2210      	movs	r2, #16
 8003860:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00b      	beq.n	8003884 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d006      	beq.n	8003884 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2208      	movs	r2, #8
 800387c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f90c 	bl	8003a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0303 	and.w	r3, r3, #3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f8f3 	bl	8003a88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00b      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d006      	beq.n	80038c4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f8f6 	bl	8003ab0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d006      	beq.n	80038e6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f8ef 	bl	8003ac4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80038e6:	6a3b      	ldr	r3, [r7, #32]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d075      	beq.n	80039dc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d06c      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	f043 0302 	orr.w	r3, r3, #2
 8003930:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003954:	2b00      	cmp	r3, #0
 8003956:	d03d      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800395e:	2b00      	cmp	r3, #0
 8003960:	d038      	beq.n	80039d4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003968:	2b30      	cmp	r3, #48	; 0x30
 800396a:	d017      	beq.n	800399c <HAL_CAN_IRQHandler+0x302>
 800396c:	2b30      	cmp	r3, #48	; 0x30
 800396e:	d804      	bhi.n	800397a <HAL_CAN_IRQHandler+0x2e0>
 8003970:	2b10      	cmp	r3, #16
 8003972:	d009      	beq.n	8003988 <HAL_CAN_IRQHandler+0x2ee>
 8003974:	2b20      	cmp	r3, #32
 8003976:	d00c      	beq.n	8003992 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003978:	e024      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800397a:	2b50      	cmp	r3, #80	; 0x50
 800397c:	d018      	beq.n	80039b0 <HAL_CAN_IRQHandler+0x316>
 800397e:	2b60      	cmp	r3, #96	; 0x60
 8003980:	d01b      	beq.n	80039ba <HAL_CAN_IRQHandler+0x320>
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d00f      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x30c>
            break;
 8003986:	e01d      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	f043 0308 	orr.w	r3, r3, #8
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003990:	e018      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	f043 0310 	orr.w	r3, r3, #16
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800399a:	e013      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	f043 0320 	orr.w	r3, r3, #32
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039a4:	e00e      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039ae:	e009      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039b8:	e004      	b.n	80039c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80039c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80039d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2204      	movs	r2, #4
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d008      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f872 	bl	8003ad8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <__NVIC_SetPriorityGrouping+0x44>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b08:	4013      	ands	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b1e:	4a04      	ldr	r2, [pc, #16]	; (8003b30 <__NVIC_SetPriorityGrouping+0x44>)
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	60d3      	str	r3, [r2, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <__NVIC_GetPriorityGrouping+0x18>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	f003 0307 	and.w	r3, r3, #7
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	e000ed00 	.word	0xe000ed00

08003b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	db0b      	blt.n	8003b7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	f003 021f 	and.w	r2, r3, #31
 8003b68:	4907      	ldr	r1, [pc, #28]	; (8003b88 <__NVIC_EnableIRQ+0x38>)
 8003b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	2001      	movs	r0, #1
 8003b72:	fa00 f202 	lsl.w	r2, r0, r2
 8003b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	e000e100 	.word	0xe000e100

08003b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	6039      	str	r1, [r7, #0]
 8003b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	db0a      	blt.n	8003bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <__NVIC_SetPriority+0x4c>)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	440b      	add	r3, r1
 8003bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bb4:	e00a      	b.n	8003bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4908      	ldr	r1, [pc, #32]	; (8003bdc <__NVIC_SetPriority+0x50>)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	3b04      	subs	r3, #4
 8003bc4:	0112      	lsls	r2, r2, #4
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	440b      	add	r3, r1
 8003bca:	761a      	strb	r2, [r3, #24]
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000e100 	.word	0xe000e100
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f1c3 0307 	rsb	r3, r3, #7
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	bf28      	it	cs
 8003bfe:	2304      	movcs	r3, #4
 8003c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3304      	adds	r3, #4
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d902      	bls.n	8003c10 <NVIC_EncodePriority+0x30>
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3b03      	subs	r3, #3
 8003c0e:	e000      	b.n	8003c12 <NVIC_EncodePriority+0x32>
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	401a      	ands	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	43d9      	mvns	r1, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	4313      	orrs	r3, r2
         );
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3724      	adds	r7, #36	; 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff ff4c 	bl	8003aec <__NVIC_SetPriorityGrouping>
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c6e:	f7ff ff61 	bl	8003b34 <__NVIC_GetPriorityGrouping>
 8003c72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	f7ff ffb1 	bl	8003be0 <NVIC_EncodePriority>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c84:	4611      	mov	r1, r2
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ff80 	bl	8003b8c <__NVIC_SetPriority>
}
 8003c8c:	bf00      	nop
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7ff ff54 	bl	8003b50 <__NVIC_EnableIRQ>
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e054      	b.n	8003d6c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7f5b      	ldrb	r3, [r3, #29]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7fe f820 	bl	8001d18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	791b      	ldrb	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10c      	bne.n	8003d00 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_CRC_Init+0xc4>)
 8003cec:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0218 	bic.w	r2, r2, #24
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	e00c      	b.n	8003d1a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f834 	bl	8003d78 <HAL_CRCEx_Polynomial_Set>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e028      	b.n	8003d6c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	795b      	ldrb	r3, [r3, #5]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	e004      	b.n	8003d38 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6912      	ldr	r2, [r2, #16]
 8003d36:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	430a      	orrs	r2, r1
 8003d62:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	04c11db7 	.word	0x04c11db7

08003d78 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d88:	231f      	movs	r3, #31
 8003d8a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d8c:	bf00      	nop
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1e5a      	subs	r2, r3, #1
 8003d92:	613a      	str	r2, [r7, #16]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_CRCEx_Polynomial_Set+0x34>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f003 031f 	and.w	r3, r3, #31
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	fa22 f303 	lsr.w	r3, r2, r3
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b18      	cmp	r3, #24
 8003db0:	d846      	bhi.n	8003e40 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003db2:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db8:	08003e47 	.word	0x08003e47
 8003dbc:	08003e41 	.word	0x08003e41
 8003dc0:	08003e41 	.word	0x08003e41
 8003dc4:	08003e41 	.word	0x08003e41
 8003dc8:	08003e41 	.word	0x08003e41
 8003dcc:	08003e41 	.word	0x08003e41
 8003dd0:	08003e41 	.word	0x08003e41
 8003dd4:	08003e41 	.word	0x08003e41
 8003dd8:	08003e35 	.word	0x08003e35
 8003ddc:	08003e41 	.word	0x08003e41
 8003de0:	08003e41 	.word	0x08003e41
 8003de4:	08003e41 	.word	0x08003e41
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e41 	.word	0x08003e41
 8003df0:	08003e41 	.word	0x08003e41
 8003df4:	08003e41 	.word	0x08003e41
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e41 	.word	0x08003e41
 8003e00:	08003e41 	.word	0x08003e41
 8003e04:	08003e41 	.word	0x08003e41
 8003e08:	08003e41 	.word	0x08003e41
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003e41 	.word	0x08003e41
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e1d 	.word	0x08003e1d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d913      	bls.n	8003e4a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e26:	e010      	b.n	8003e4a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b07      	cmp	r3, #7
 8003e2c:	d90f      	bls.n	8003e4e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e32:	e00c      	b.n	8003e4e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2b0f      	cmp	r3, #15
 8003e38:	d90b      	bls.n	8003e52 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e3e:	e008      	b.n	8003e52 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	75fb      	strb	r3, [r7, #23]
      break;
 8003e44:	e006      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e46:	bf00      	nop
 8003e48:	e004      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e002      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e52:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f023 0118 	bic.w	r1, r3, #24
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	371c      	adds	r7, #28
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e037      	b.n	8003f0a <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2202      	movs	r2, #2
 8003e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003eb0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003eb4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f941 	bl	8004174 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}  
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
 8003f1e:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_DMA_Start_IT+0x20>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e04a      	b.n	8003fc8 <HAL_DMA_Start_IT+0xb6>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d13a      	bne.n	8003fba <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0201 	bic.w	r2, r2, #1
 8003f60:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8d4 	bl	8004116 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 020e 	orr.w	r2, r2, #14
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e00f      	b.n	8003fa8 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 020a 	orr.w	r2, r2, #10
 8003f96:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0204 	bic.w	r2, r2, #4
 8003fa6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e005      	b.n	8003fc6 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003fc6:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	2204      	movs	r2, #4
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d024      	beq.n	8004042 <HAL_DMA_IRQHandler+0x72>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01f      	beq.n	8004042 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d107      	bne.n	8004020 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0204 	bic.w	r2, r2, #4
 800401e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004028:	2104      	movs	r1, #4
 800402a:	fa01 f202 	lsl.w	r2, r1, r2
 800402e:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d06a      	beq.n	800410e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004040:	e065      	b.n	800410e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	2202      	movs	r2, #2
 8004048:	409a      	lsls	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_IRQHandler+0xdc>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d027      	beq.n	80040ac <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10b      	bne.n	8004082 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 020a 	bic.w	r2, r2, #10
 8004078:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	2102      	movs	r1, #2
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d035      	beq.n	800410e <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80040aa:	e030      	b.n	800410e <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	2208      	movs	r2, #8
 80040b2:	409a      	lsls	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d028      	beq.n	800410e <HAL_DMA_IRQHandler+0x13e>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d023      	beq.n	800410e <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 020e 	bic.w	r2, r2, #14
 80040d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	2101      	movs	r1, #1
 80040e0:	fa01 f202 	lsl.w	r2, r1, r2
 80040e4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	4798      	blx	r3
    }
  }
}  
 800410c:	e7ff      	b.n	800410e <HAL_DMA_IRQHandler+0x13e>
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004116:	b480      	push	{r7}
 8004118:	b085      	sub	sp, #20
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d108      	bne.n	8004156 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004154:	e007      	b.n	8004166 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	60da      	str	r2, [r3, #12]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <DMA_CalcBaseAndBitshift+0x34>)
 8004184:	4413      	add	r3, r2
 8004186:	4a09      	ldr	r2, [pc, #36]	; (80041ac <DMA_CalcBaseAndBitshift+0x38>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	009a      	lsls	r2, r3, #2
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a06      	ldr	r2, [pc, #24]	; (80041b0 <DMA_CalcBaseAndBitshift+0x3c>)
 8004198:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	bffdfff8 	.word	0xbffdfff8
 80041ac:	cccccccd 	.word	0xcccccccd
 80041b0:	40020000 	.word	0x40020000

080041b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b087      	sub	sp, #28
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041be:	2300      	movs	r3, #0
 80041c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041c2:	e14e      	b.n	8004462 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	2101      	movs	r1, #1
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	fa01 f303 	lsl.w	r3, r1, r3
 80041d0:	4013      	ands	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8140 	beq.w	800445c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d00b      	beq.n	80041fc <HAL_GPIO_Init+0x48>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d007      	beq.n	80041fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041f0:	2b11      	cmp	r3, #17
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b12      	cmp	r3, #18
 80041fa:	d130      	bne.n	800425e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	2203      	movs	r2, #3
 8004208:	fa02 f303 	lsl.w	r3, r2, r3
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004232:	2201      	movs	r2, #1
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	091b      	lsrs	r3, r3, #4
 8004248:	f003 0201 	and.w	r2, r3, #1
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	2203      	movs	r2, #3
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43db      	mvns	r3, r3
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4013      	ands	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d003      	beq.n	800429e <HAL_GPIO_Init+0xea>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b12      	cmp	r3, #18
 800429c:	d123      	bne.n	80042e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	08da      	lsrs	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	3208      	adds	r2, #8
 80042a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	220f      	movs	r2, #15
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	08da      	lsrs	r2, r3, #3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3208      	adds	r2, #8
 80042e0:	6939      	ldr	r1, [r7, #16]
 80042e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2203      	movs	r2, #3
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f003 0203 	and.w	r2, r3, #3
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	fa02 f303 	lsl.w	r3, r2, r3
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 809a 	beq.w	800445c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004328:	4b55      	ldr	r3, [pc, #340]	; (8004480 <HAL_GPIO_Init+0x2cc>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4a54      	ldr	r2, [pc, #336]	; (8004480 <HAL_GPIO_Init+0x2cc>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6193      	str	r3, [r2, #24]
 8004334:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_GPIO_Init+0x2cc>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004340:	4a50      	ldr	r2, [pc, #320]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	220f      	movs	r2, #15
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800436a:	d013      	beq.n	8004394 <HAL_GPIO_Init+0x1e0>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a46      	ldr	r2, [pc, #280]	; (8004488 <HAL_GPIO_Init+0x2d4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00d      	beq.n	8004390 <HAL_GPIO_Init+0x1dc>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a45      	ldr	r2, [pc, #276]	; (800448c <HAL_GPIO_Init+0x2d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d007      	beq.n	800438c <HAL_GPIO_Init+0x1d8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a44      	ldr	r2, [pc, #272]	; (8004490 <HAL_GPIO_Init+0x2dc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d101      	bne.n	8004388 <HAL_GPIO_Init+0x1d4>
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <HAL_GPIO_Init+0x1e2>
 8004388:	2305      	movs	r3, #5
 800438a:	e004      	b.n	8004396 <HAL_GPIO_Init+0x1e2>
 800438c:	2302      	movs	r3, #2
 800438e:	e002      	b.n	8004396 <HAL_GPIO_Init+0x1e2>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_GPIO_Init+0x1e2>
 8004394:	2300      	movs	r3, #0
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	f002 0203 	and.w	r2, r2, #3
 800439c:	0092      	lsls	r2, r2, #2
 800439e:	4093      	lsls	r3, r2
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80043a6:	4937      	ldr	r1, [pc, #220]	; (8004484 <HAL_GPIO_Init+0x2d0>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043b4:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	43db      	mvns	r3, r3
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4013      	ands	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80043d8:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043de:	4b2d      	ldr	r3, [pc, #180]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4013      	ands	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004402:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004408:	4b22      	ldr	r3, [pc, #136]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	43db      	mvns	r3, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4013      	ands	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800442c:	4a19      	ldr	r2, [pc, #100]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004432:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004456:	4a0f      	ldr	r2, [pc, #60]	; (8004494 <HAL_GPIO_Init+0x2e0>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	3301      	adds	r3, #1
 8004460:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f47f aea9 	bne.w	80041c4 <HAL_GPIO_Init+0x10>
  }
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	40010000 	.word	0x40010000
 8004488:	48000400 	.word	0x48000400
 800448c:	48000800 	.word	0x48000800
 8004490:	48000c00 	.word	0x48000c00
 8004494:	40010400 	.word	0x40010400

08004498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	887b      	ldrh	r3, [r7, #2]
 80044aa:	4013      	ands	r3, r2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e001      	b.n	80044ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	807b      	strh	r3, [r7, #2]
 80044d4:	4613      	mov	r3, r2
 80044d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044d8:	787b      	ldrb	r3, [r7, #1]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044de:	887a      	ldrh	r2, [r7, #2]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044e4:	e002      	b.n	80044ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044e6:	887a      	ldrh	r2, [r7, #2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e081      	b.n	800460e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fc1a 	bl	8001d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2224      	movs	r2, #36	; 0x24
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004548:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004558:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d107      	bne.n	8004572 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	e006      	b.n	8004580 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800457e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d104      	bne.n	8004592 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004590:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	ea42 0103 	orr.w	r1, r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	021a      	lsls	r2, r3, #8
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69d9      	ldr	r1, [r3, #28]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1a      	ldr	r2, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	d138      	bne.n	800469e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004632:	2b01      	cmp	r3, #1
 8004634:	d101      	bne.n	800463a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004636:	2302      	movs	r3, #2
 8004638:	e032      	b.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2224      	movs	r2, #36	; 0x24
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0201 	bic.w	r2, r2, #1
 8004658:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004668:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6819      	ldr	r1, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b20      	cmp	r3, #32
 80046c0:	d139      	bne.n	8004736 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e033      	b.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0201 	bic.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046fe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	021b      	lsls	r3, r3, #8
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0201 	orr.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e000      	b.n	8004738 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800474a:	af00      	add	r7, sp, #0
 800474c:	1d3b      	adds	r3, r7, #4
 800474e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004750:	1d3b      	adds	r3, r7, #4
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	f000 bef4 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800475e:	1d3b      	adds	r3, r7, #4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 816a 	beq.w	8004a42 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800476e:	4bb3      	ldr	r3, [pc, #716]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00c      	beq.n	8004794 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800477a:	4bb0      	ldr	r3, [pc, #704]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b08      	cmp	r3, #8
 8004784:	d159      	bne.n	800483a <HAL_RCC_OscConfig+0xf6>
 8004786:	4bad      	ldr	r3, [pc, #692]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004792:	d152      	bne.n	800483a <HAL_RCC_OscConfig+0xf6>
 8004794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004798:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80047a0:	fa93 f3a3 	rbit	r3, r3
 80047a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	fab3 f383 	clz	r3, r3
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	095b      	lsrs	r3, r3, #5
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	f043 0301 	orr.w	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d102      	bne.n	80047c6 <HAL_RCC_OscConfig+0x82>
 80047c0:	4b9e      	ldr	r3, [pc, #632]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	e015      	b.n	80047f2 <HAL_RCC_OscConfig+0xae>
 80047c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80047d2:	fa93 f3a3 	rbit	r3, r3
 80047d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80047da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80047e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80047e6:	fa93 f3a3 	rbit	r3, r3
 80047ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80047ee:	4b93      	ldr	r3, [pc, #588]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80047fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80047fe:	fa92 f2a2 	rbit	r2, r2
 8004802:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8004806:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800480a:	fab2 f282 	clz	r2, r2
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	f042 0220 	orr.w	r2, r2, #32
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	f002 021f 	and.w	r2, r2, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f202 	lsl.w	r2, r1, r2
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 810c 	beq.w	8004a40 <HAL_RCC_OscConfig+0x2fc>
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 8106 	bne.w	8004a40 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f000 be86 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004844:	d106      	bne.n	8004854 <HAL_RCC_OscConfig+0x110>
 8004846:	4b7d      	ldr	r3, [pc, #500]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7c      	ldr	r2, [pc, #496]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 800484c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	e030      	b.n	80048b6 <HAL_RCC_OscConfig+0x172>
 8004854:	1d3b      	adds	r3, r7, #4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x134>
 800485e:	4b77      	ldr	r3, [pc, #476]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a76      	ldr	r2, [pc, #472]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b74      	ldr	r3, [pc, #464]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a73      	ldr	r2, [pc, #460]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01e      	b.n	80048b6 <HAL_RCC_OscConfig+0x172>
 8004878:	1d3b      	adds	r3, r7, #4
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004882:	d10c      	bne.n	800489e <HAL_RCC_OscConfig+0x15a>
 8004884:	4b6d      	ldr	r3, [pc, #436]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a6c      	ldr	r2, [pc, #432]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 800488a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a69      	ldr	r2, [pc, #420]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e00b      	b.n	80048b6 <HAL_RCC_OscConfig+0x172>
 800489e:	4b67      	ldr	r3, [pc, #412]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a66      	ldr	r2, [pc, #408]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80048a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b64      	ldr	r3, [pc, #400]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a63      	ldr	r2, [pc, #396]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80048b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	f023 020f 	bic.w	r2, r3, #15
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	495d      	ldr	r1, [pc, #372]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ca:	1d3b      	adds	r3, r7, #4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d059      	beq.n	8004988 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7fd fb84 	bl	8001fe0 <HAL_GetTick>
 80048d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048dc:	e00a      	b.n	80048f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048de:	f7fd fb7f 	bl	8001fe0 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	; 0x64
 80048ec:	d902      	bls.n	80048f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	f000 be29 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>
 80048f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8004900:	fa93 f3a3 	rbit	r3, r3
 8004904:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004908:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490c:	fab3 f383 	clz	r3, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	095b      	lsrs	r3, r3, #5
 8004914:	b2db      	uxtb	r3, r3
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d102      	bne.n	8004926 <HAL_RCC_OscConfig+0x1e2>
 8004920:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	e015      	b.n	8004952 <HAL_RCC_OscConfig+0x20e>
 8004926:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800492a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8004932:	fa93 f3a3 	rbit	r3, r3
 8004936:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800493a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800493e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004942:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800494e:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004956:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800495a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800495e:	fa92 f2a2 	rbit	r2, r2
 8004962:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004966:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800496a:	fab2 f282 	clz	r2, r2
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	f042 0220 	orr.w	r2, r2, #32
 8004974:	b2d2      	uxtb	r2, r2
 8004976:	f002 021f 	and.w	r2, r2, #31
 800497a:	2101      	movs	r1, #1
 800497c:	fa01 f202 	lsl.w	r2, r1, r2
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0ab      	beq.n	80048de <HAL_RCC_OscConfig+0x19a>
 8004986:	e05c      	b.n	8004a42 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fd fb2a 	bl	8001fe0 <HAL_GetTick>
 800498c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004992:	f7fd fb25 	bl	8001fe0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d902      	bls.n	80049a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	f000 bdcf 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>
 80049a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80049bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d102      	bne.n	80049da <HAL_RCC_OscConfig+0x296>
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	e015      	b.n	8004a06 <HAL_RCC_OscConfig+0x2c2>
 80049da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80049e6:	fa93 f3a3 	rbit	r3, r3
 80049ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80049ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80049f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80049f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_RCC_OscConfig+0x2f8>)
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a0a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004a0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004a12:	fa92 f2a2 	rbit	r2, r2
 8004a16:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004a1a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004a1e:	fab2 f282 	clz	r2, r2
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	f042 0220 	orr.w	r2, r2, #32
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	f002 021f 	and.w	r2, r2, #31
 8004a2e:	2101      	movs	r1, #1
 8004a30:	fa01 f202 	lsl.w	r2, r1, r2
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1ab      	bne.n	8004992 <HAL_RCC_OscConfig+0x24e>
 8004a3a:	e002      	b.n	8004a42 <HAL_RCC_OscConfig+0x2fe>
 8004a3c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	1d3b      	adds	r3, r7, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 816f 	beq.w	8004d30 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a52:	4bd0      	ldr	r3, [pc, #832]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a5e:	4bcd      	ldr	r3, [pc, #820]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d16c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x400>
 8004a6a:	4bca      	ldr	r3, [pc, #808]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d166      	bne.n	8004b44 <HAL_RCC_OscConfig+0x400>
 8004a76:	2302      	movs	r3, #2
 8004a78:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004a80:	fa93 f3a3 	rbit	r3, r3
 8004a84:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8004a88:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8c:	fab3 f383 	clz	r3, r3
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x362>
 8004aa0:	4bbc      	ldr	r3, [pc, #752]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	e013      	b.n	8004ace <HAL_RCC_OscConfig+0x38a>
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004ab0:	fa93 f3a3 	rbit	r3, r3
 8004ab4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004ab8:	2302      	movs	r3, #2
 8004aba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004abe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004ac2:	fa93 f3a3 	rbit	r3, r3
 8004ac6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004aca:	4bb2      	ldr	r3, [pc, #712]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004ad4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8004ad8:	fa92 f2a2 	rbit	r2, r2
 8004adc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004ae0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004ae4:	fab2 f282 	clz	r2, r2
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	f042 0220 	orr.w	r2, r2, #32
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	f002 021f 	and.w	r2, r2, #31
 8004af4:	2101      	movs	r1, #1
 8004af6:	fa01 f202 	lsl.w	r2, r1, r2
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d007      	beq.n	8004b10 <HAL_RCC_OscConfig+0x3cc>
 8004b00:	1d3b      	adds	r3, r7, #4
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d002      	beq.n	8004b10 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f000 bd1b 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b10:	4ba0      	ldr	r3, [pc, #640]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b18:	1d3b      	adds	r3, r7, #4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	21f8      	movs	r1, #248	; 0xf8
 8004b20:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b24:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004b28:	fa91 f1a1 	rbit	r1, r1
 8004b2c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8004b30:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004b34:	fab1 f181 	clz	r1, r1
 8004b38:	b2c9      	uxtb	r1, r1
 8004b3a:	408b      	lsls	r3, r1
 8004b3c:	4995      	ldr	r1, [pc, #596]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b42:	e0f5      	b.n	8004d30 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 8085 	beq.w	8004c5a <HAL_RCC_OscConfig+0x516>
 8004b50:	2301      	movs	r3, #1
 8004b52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004b5a:	fa93 f3a3 	rbit	r3, r3
 8004b5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8004b62:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	461a      	mov	r2, r3
 8004b78:	2301      	movs	r3, #1
 8004b7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fd fa30 	bl	8001fe0 <HAL_GetTick>
 8004b80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b86:	f7fd fa2b 	bl	8001fe0 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	f000 bcd5 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004ba6:	fa93 f3a3 	rbit	r3, r3
 8004baa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8004bae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb2:	fab3 f383 	clz	r3, r3
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d102      	bne.n	8004bcc <HAL_RCC_OscConfig+0x488>
 8004bc6:	4b73      	ldr	r3, [pc, #460]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	e013      	b.n	8004bf4 <HAL_RCC_OscConfig+0x4b0>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004bde:	2302      	movs	r3, #2
 8004be0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004be4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8004be8:	fa93 f3a3 	rbit	r3, r3
 8004bec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004bf0:	4b68      	ldr	r3, [pc, #416]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8004bfa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004bfe:	fa92 f2a2 	rbit	r2, r2
 8004c02:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8004c06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8004c0a:	fab2 f282 	clz	r2, r2
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	f042 0220 	orr.w	r2, r2, #32
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	f002 021f 	and.w	r2, r2, #31
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d0af      	beq.n	8004b86 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c26:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	21f8      	movs	r1, #248	; 0xf8
 8004c36:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004c3e:	fa91 f1a1 	rbit	r1, r1
 8004c42:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004c46:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004c4a:	fab1 f181 	clz	r1, r1
 8004c4e:	b2c9      	uxtb	r1, r1
 8004c50:	408b      	lsls	r3, r1
 8004c52:	4950      	ldr	r1, [pc, #320]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	600b      	str	r3, [r1, #0]
 8004c58:	e06a      	b.n	8004d30 <HAL_RCC_OscConfig+0x5ec>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004c64:	fa93 f3a3 	rbit	r3, r3
 8004c68:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8004c6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004c7a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	461a      	mov	r2, r3
 8004c82:	2300      	movs	r3, #0
 8004c84:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c86:	f7fd f9ab 	bl	8001fe0 <HAL_GetTick>
 8004c8a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fd f9a6 	bl	8001fe0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d902      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	f000 bc50 	b.w	8005546 <HAL_RCC_OscConfig+0xe02>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004cb0:	fa93 f3a3 	rbit	r3, r3
 8004cb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	f043 0301 	orr.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x592>
 8004cd0:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	e013      	b.n	8004cfe <HAL_RCC_OscConfig+0x5ba>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ce0:	fa93 f3a3 	rbit	r3, r3
 8004ce4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004cee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004cf2:	fa93 f3a3 	rbit	r3, r3
 8004cf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cfa:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <HAL_RCC_OscConfig+0x650>)
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004d04:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004d08:	fa92 f2a2 	rbit	r2, r2
 8004d0c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8004d10:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004d14:	fab2 f282 	clz	r2, r2
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	f042 0220 	orr.w	r2, r2, #32
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	f002 021f 	and.w	r2, r2, #31
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f202 	lsl.w	r2, r1, r2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1af      	bne.n	8004c90 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d30:	1d3b      	adds	r3, r7, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80da 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d069      	beq.n	8004e1e <HAL_RCC_OscConfig+0x6da>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d60:	fab3 f383 	clz	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_OscConfig+0x654>)
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	461a      	mov	r2, r3
 8004d70:	2301      	movs	r3, #1
 8004d72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d74:	f7fd f934 	bl	8001fe0 <HAL_GetTick>
 8004d78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7c:	e00e      	b.n	8004d9c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fd f92f 	bl	8001fe0 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d906      	bls.n	8004d9c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e3d9      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	10908120 	.word	0x10908120
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004da6:	fa93 f3a3 	rbit	r3, r3
 8004daa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004dae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004db2:	2202      	movs	r2, #2
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	fa93 f2a3 	rbit	r2, r3
 8004dc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004dca:	2202      	movs	r2, #2
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	fa93 f2a3 	rbit	r2, r3
 8004dd8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8004ddc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dde:	4ba5      	ldr	r3, [pc, #660]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004de2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004de6:	2102      	movs	r1, #2
 8004de8:	6019      	str	r1, [r3, #0]
 8004dea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	fa93 f1a3 	rbit	r1, r3
 8004df4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004df8:	6019      	str	r1, [r3, #0]
  return result;
 8004dfa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	fab3 f383 	clz	r3, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2101      	movs	r1, #1
 8004e12:	fa01 f303 	lsl.w	r3, r1, r3
 8004e16:	4013      	ands	r3, r2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0b0      	beq.n	8004d7e <HAL_RCC_OscConfig+0x63a>
 8004e1c:	e06a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x7b0>
 8004e1e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e22:	2201      	movs	r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	fa93 f2a3 	rbit	r2, r3
 8004e30:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e34:	601a      	str	r2, [r3, #0]
  return result;
 8004e36:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004e3a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e3c:	fab3 f383 	clz	r3, r3
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	4b8c      	ldr	r3, [pc, #560]	; (8005078 <HAL_RCC_OscConfig+0x934>)
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e50:	f7fd f8c6 	bl	8001fe0 <HAL_GetTick>
 8004e54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	e009      	b.n	8004e6e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fd f8c1 	bl	8001fe0 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e36b      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 8004e6e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e72:	2202      	movs	r2, #2
 8004e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	fa93 f2a3 	rbit	r2, r3
 8004e80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	fa93 f2a3 	rbit	r2, r3
 8004e98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	fa93 f2a3 	rbit	r2, r3
 8004eb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004eb4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb6:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ebe:	2102      	movs	r1, #2
 8004ec0:	6019      	str	r1, [r3, #0]
 8004ec2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	fa93 f1a3 	rbit	r1, r3
 8004ecc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ed0:	6019      	str	r1, [r3, #0]
  return result;
 8004ed2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	fab3 f383 	clz	r3, r3
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1b2      	bne.n	8004e5a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef4:	1d3b      	adds	r3, r7, #4
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8158 	beq.w	80051b4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f0a:	4b5a      	ldr	r3, [pc, #360]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d112      	bne.n	8004f3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f16:	4b57      	ldr	r3, [pc, #348]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4a56      	ldr	r2, [pc, #344]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f20:	61d3      	str	r3, [r2, #28]
 8004f22:	4b54      	ldr	r3, [pc, #336]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	f107 0308 	add.w	r3, r7, #8
 8004f34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3c:	4b4f      	ldr	r3, [pc, #316]	; (800507c <HAL_RCC_OscConfig+0x938>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f48:	4b4c      	ldr	r3, [pc, #304]	; (800507c <HAL_RCC_OscConfig+0x938>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a4b      	ldr	r2, [pc, #300]	; (800507c <HAL_RCC_OscConfig+0x938>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f54:	f7fd f844 	bl	8001fe0 <HAL_GetTick>
 8004f58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e009      	b.n	8004f72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fd f83f 	bl	8001fe0 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b64      	cmp	r3, #100	; 0x64
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e2e9      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f72:	4b42      	ldr	r3, [pc, #264]	; (800507c <HAL_RCC_OscConfig+0x938>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d0ef      	beq.n	8004f5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7e:	1d3b      	adds	r3, r7, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <HAL_RCC_OscConfig+0x852>
 8004f88:	4b3a      	ldr	r3, [pc, #232]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	4a39      	ldr	r2, [pc, #228]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6213      	str	r3, [r2, #32]
 8004f94:	e02f      	b.n	8004ff6 <HAL_RCC_OscConfig+0x8b2>
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10c      	bne.n	8004fba <HAL_RCC_OscConfig+0x876>
 8004fa0:	4b34      	ldr	r3, [pc, #208]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	4a33      	ldr	r2, [pc, #204]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fa6:	f023 0301 	bic.w	r3, r3, #1
 8004faa:	6213      	str	r3, [r2, #32]
 8004fac:	4b31      	ldr	r3, [pc, #196]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4a30      	ldr	r2, [pc, #192]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fb2:	f023 0304 	bic.w	r3, r3, #4
 8004fb6:	6213      	str	r3, [r2, #32]
 8004fb8:	e01d      	b.n	8004ff6 <HAL_RCC_OscConfig+0x8b2>
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	d10c      	bne.n	8004fde <HAL_RCC_OscConfig+0x89a>
 8004fc4:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fca:	f043 0304 	orr.w	r3, r3, #4
 8004fce:	6213      	str	r3, [r2, #32]
 8004fd0:	4b28      	ldr	r3, [pc, #160]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	4a27      	ldr	r2, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6213      	str	r3, [r2, #32]
 8004fdc:	e00b      	b.n	8004ff6 <HAL_RCC_OscConfig+0x8b2>
 8004fde:	4b25      	ldr	r3, [pc, #148]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	4a24      	ldr	r2, [pc, #144]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	6213      	str	r3, [r2, #32]
 8004fea:	4b22      	ldr	r3, [pc, #136]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	4a21      	ldr	r2, [pc, #132]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 8004ff0:	f023 0304 	bic.w	r3, r3, #4
 8004ff4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d06b      	beq.n	80050d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005000:	f7fc ffee 	bl	8001fe0 <HAL_GetTick>
 8005004:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005008:	e00b      	b.n	8005022 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800500a:	f7fc ffe9 	bl	8001fe0 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e291      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 8005022:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005026:	2202      	movs	r2, #2
 8005028:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	fa93 f2a3 	rbit	r2, r3
 8005034:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800503e:	2202      	movs	r2, #2
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	fa93 f2a3 	rbit	r2, r3
 800504c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005050:	601a      	str	r2, [r3, #0]
  return result;
 8005052:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005056:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005058:	fab3 f383 	clz	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	095b      	lsrs	r3, r3, #5
 8005060:	b2db      	uxtb	r3, r3
 8005062:	f043 0302 	orr.w	r3, r3, #2
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d109      	bne.n	8005080 <HAL_RCC_OscConfig+0x93c>
 800506c:	4b01      	ldr	r3, [pc, #4]	; (8005074 <HAL_RCC_OscConfig+0x930>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	e014      	b.n	800509c <HAL_RCC_OscConfig+0x958>
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	10908120 	.word	0x10908120
 800507c:	40007000 	.word	0x40007000
 8005080:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005084:	2202      	movs	r2, #2
 8005086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	fa93 f2a3 	rbit	r2, r3
 8005092:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	4bbb      	ldr	r3, [pc, #748]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050a0:	2102      	movs	r1, #2
 80050a2:	6011      	str	r1, [r2, #0]
 80050a4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80050a8:	6812      	ldr	r2, [r2, #0]
 80050aa:	fa92 f1a2 	rbit	r1, r2
 80050ae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80050b2:	6011      	str	r1, [r2, #0]
  return result;
 80050b4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	fab2 f282 	clz	r2, r2
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	f002 021f 	and.w	r2, r2, #31
 80050ca:	2101      	movs	r1, #1
 80050cc:	fa01 f202 	lsl.w	r2, r1, r2
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d099      	beq.n	800500a <HAL_RCC_OscConfig+0x8c6>
 80050d6:	e063      	b.n	80051a0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d8:	f7fc ff82 	bl	8001fe0 <HAL_GetTick>
 80050dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e0:	e00b      	b.n	80050fa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e2:	f7fc ff7d 	bl	8001fe0 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e225      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 80050fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80050fe:	2202      	movs	r2, #2
 8005100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005102:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	fa93 f2a3 	rbit	r2, r3
 800510c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005116:	2202      	movs	r2, #2
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	fa93 f2a3 	rbit	r2, r3
 8005124:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005128:	601a      	str	r2, [r3, #0]
  return result;
 800512a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800512e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f043 0302 	orr.w	r3, r3, #2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d102      	bne.n	800514a <HAL_RCC_OscConfig+0xa06>
 8005144:	4b90      	ldr	r3, [pc, #576]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	e00d      	b.n	8005166 <HAL_RCC_OscConfig+0xa22>
 800514a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800514e:	2202      	movs	r2, #2
 8005150:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	fa93 f2a3 	rbit	r2, r3
 800515c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	4b89      	ldr	r3, [pc, #548]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800516a:	2102      	movs	r1, #2
 800516c:	6011      	str	r1, [r2, #0]
 800516e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8005172:	6812      	ldr	r2, [r2, #0]
 8005174:	fa92 f1a2 	rbit	r1, r2
 8005178:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800517c:	6011      	str	r1, [r2, #0]
  return result;
 800517e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	fab2 f282 	clz	r2, r2
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	f002 021f 	and.w	r2, r2, #31
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f202 	lsl.w	r2, r1, r2
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1a0      	bne.n	80050e2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b77      	ldr	r3, [pc, #476]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	4a76      	ldr	r2, [pc, #472]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b4:	1d3b      	adds	r3, r7, #4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 81c2 	beq.w	8005544 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c0:	4b71      	ldr	r3, [pc, #452]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	f000 819c 	beq.w	8005506 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ce:	1d3b      	adds	r3, r7, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	f040 8114 	bne.w	8005402 <HAL_RCC_OscConfig+0xcbe>
 80051da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051e4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	fa93 f2a3 	rbit	r2, r3
 80051ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80051f2:	601a      	str	r2, [r3, #0]
  return result;
 80051f4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80051f8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	fab3 f383 	clz	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005204:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	461a      	mov	r2, r3
 800520c:	2300      	movs	r3, #0
 800520e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005210:	f7fc fee6 	bl	8001fe0 <HAL_GetTick>
 8005214:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005218:	e009      	b.n	800522e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800521a:	f7fc fee1 	bl	8001fe0 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e18b      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 800522e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005232:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	fa93 f2a3 	rbit	r2, r3
 8005242:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005246:	601a      	str	r2, [r3, #0]
  return result;
 8005248:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800524c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b01      	cmp	r3, #1
 8005260:	d102      	bne.n	8005268 <HAL_RCC_OscConfig+0xb24>
 8005262:	4b49      	ldr	r3, [pc, #292]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	e01b      	b.n	80052a0 <HAL_RCC_OscConfig+0xb5c>
 8005268:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800526c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005270:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005272:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	fa93 f2a3 	rbit	r2, r3
 800527c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005286:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	fa93 f2a3 	rbit	r2, r3
 8005296:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80052a8:	6011      	str	r1, [r2, #0]
 80052aa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052ae:	6812      	ldr	r2, [r2, #0]
 80052b0:	fa92 f1a2 	rbit	r1, r2
 80052b4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80052b8:	6011      	str	r1, [r2, #0]
  return result;
 80052ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80052be:	6812      	ldr	r2, [r2, #0]
 80052c0:	fab2 f282 	clz	r2, r2
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	f042 0220 	orr.w	r2, r2, #32
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	f002 021f 	and.w	r2, r2, #31
 80052d0:	2101      	movs	r1, #1
 80052d2:	fa01 f202 	lsl.w	r2, r1, r2
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d19e      	bne.n	800521a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052dc:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80052ea:	1d3b      	adds	r3, r7, #4
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	4925      	ldr	r1, [pc, #148]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	604b      	str	r3, [r1, #4]
 80052f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005302:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	fa93 f2a3 	rbit	r2, r3
 800530c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005310:	601a      	str	r2, [r3, #0]
  return result;
 8005312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005316:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005318:	fab3 f383 	clz	r3, r3
 800531c:	b2db      	uxtb	r3, r3
 800531e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005322:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	461a      	mov	r2, r3
 800532a:	2301      	movs	r3, #1
 800532c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532e:	f7fc fe57 	bl	8001fe0 <HAL_GetTick>
 8005332:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005336:	e009      	b.n	800534c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005338:	f7fc fe52 	bl	8001fe0 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e0fc      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 800534c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	fa93 f2a3 	rbit	r2, r3
 8005360:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005364:	601a      	str	r2, [r3, #0]
  return result;
 8005366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800536a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d105      	bne.n	800538c <HAL_RCC_OscConfig+0xc48>
 8005380:	4b01      	ldr	r3, [pc, #4]	; (8005388 <HAL_RCC_OscConfig+0xc44>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	e01e      	b.n	80053c4 <HAL_RCC_OscConfig+0xc80>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005390:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005394:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	fa93 f2a3 	rbit	r2, r3
 80053a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80053a4:	601a      	str	r2, [r3, #0]
 80053a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	fa93 f2a3 	rbit	r2, r3
 80053ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_OscConfig+0xe0c>)
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053c8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80053cc:	6011      	str	r1, [r2, #0]
 80053ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	fa92 f1a2 	rbit	r1, r2
 80053d8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053dc:	6011      	str	r1, [r2, #0]
  return result;
 80053de:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	fab2 f282 	clz	r2, r2
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	f042 0220 	orr.w	r2, r2, #32
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	f002 021f 	and.w	r2, r2, #31
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f202 	lsl.w	r2, r1, r2
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d09b      	beq.n	8005338 <HAL_RCC_OscConfig+0xbf4>
 8005400:	e0a0      	b.n	8005544 <HAL_RCC_OscConfig+0xe00>
 8005402:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005406:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800540a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	fa93 f2a3 	rbit	r2, r3
 8005416:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800541a:	601a      	str	r2, [r3, #0]
  return result;
 800541c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005420:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005422:	fab3 f383 	clz	r3, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800542c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fc fdd2 	bl	8001fe0 <HAL_GetTick>
 800543c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005440:	e009      	b.n	8005456 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005442:	f7fc fdcd 	bl	8001fe0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e077      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
 8005456:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800545a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800545e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	fa93 f2a3 	rbit	r2, r3
 800546a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800546e:	601a      	str	r2, [r3, #0]
  return result;
 8005470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005474:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	095b      	lsrs	r3, r3, #5
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	d102      	bne.n	8005490 <HAL_RCC_OscConfig+0xd4c>
 800548a:	4b31      	ldr	r3, [pc, #196]	; (8005550 <HAL_RCC_OscConfig+0xe0c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	e01b      	b.n	80054c8 <HAL_RCC_OscConfig+0xd84>
 8005490:	f107 0320 	add.w	r3, r7, #32
 8005494:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005498:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	f107 0320 	add.w	r3, r7, #32
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	fa93 f2a3 	rbit	r2, r3
 80054a4:	f107 031c 	add.w	r3, r7, #28
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f107 0318 	add.w	r3, r7, #24
 80054ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f107 0318 	add.w	r3, r7, #24
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	fa93 f2a3 	rbit	r2, r3
 80054be:	f107 0314 	add.w	r3, r7, #20
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_OscConfig+0xe0c>)
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	f107 0210 	add.w	r2, r7, #16
 80054cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	f107 0210 	add.w	r2, r7, #16
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	fa92 f1a2 	rbit	r1, r2
 80054dc:	f107 020c 	add.w	r2, r7, #12
 80054e0:	6011      	str	r1, [r2, #0]
  return result;
 80054e2:	f107 020c 	add.w	r2, r7, #12
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	fab2 f282 	clz	r2, r2
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	f042 0220 	orr.w	r2, r2, #32
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	f002 021f 	and.w	r2, r2, #31
 80054f8:	2101      	movs	r1, #1
 80054fa:	fa01 f202 	lsl.w	r2, r1, r2
 80054fe:	4013      	ands	r3, r2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d19e      	bne.n	8005442 <HAL_RCC_OscConfig+0xcfe>
 8005504:	e01e      	b.n	8005544 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e018      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <HAL_RCC_OscConfig+0xe0c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800551c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005520:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005524:	1d3b      	adds	r3, r7, #4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	429a      	cmp	r2, r3
 800552c:	d108      	bne.n	8005540 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800552e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005536:	1d3b      	adds	r3, r7, #4
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800553c:	429a      	cmp	r2, r3
 800553e:	d001      	beq.n	8005544 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40021000 	.word	0x40021000

08005554 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b09e      	sub	sp, #120	; 0x78
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e162      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800556c:	4b90      	ldr	r3, [pc, #576]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d910      	bls.n	800559c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b8d      	ldr	r3, [pc, #564]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f023 0207 	bic.w	r2, r3, #7
 8005582:	498b      	ldr	r1, [pc, #556]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	4313      	orrs	r3, r2
 8005588:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800558a:	4b89      	ldr	r3, [pc, #548]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	683a      	ldr	r2, [r7, #0]
 8005594:	429a      	cmp	r2, r3
 8005596:	d001      	beq.n	800559c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e14a      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d008      	beq.n	80055ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a8:	4b82      	ldr	r3, [pc, #520]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	497f      	ldr	r1, [pc, #508]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 80dc 	beq.w	8005780 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d13c      	bne.n	800564a <HAL_RCC_ClockConfig+0xf6>
 80055d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055d8:	fa93 f3a3 	rbit	r3, r3
 80055dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80055de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	095b      	lsrs	r3, r3, #5
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_ClockConfig+0xa6>
 80055f4:	4b6f      	ldr	r3, [pc, #444]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	e00f      	b.n	800561a <HAL_RCC_ClockConfig+0xc6>
 80055fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005600:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005602:	fa93 f3a3 	rbit	r3, r3
 8005606:	667b      	str	r3, [r7, #100]	; 0x64
 8005608:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800560c:	663b      	str	r3, [r7, #96]	; 0x60
 800560e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005610:	fa93 f3a3 	rbit	r3, r3
 8005614:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005616:	4b67      	ldr	r3, [pc, #412]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800561e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005622:	fa92 f2a2 	rbit	r2, r2
 8005626:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800562a:	fab2 f282 	clz	r2, r2
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	f042 0220 	orr.w	r2, r2, #32
 8005634:	b2d2      	uxtb	r2, r2
 8005636:	f002 021f 	and.w	r2, r2, #31
 800563a:	2101      	movs	r1, #1
 800563c:	fa01 f202 	lsl.w	r2, r1, r2
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d17b      	bne.n	800573e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0f3      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d13c      	bne.n	80056cc <HAL_RCC_ClockConfig+0x178>
 8005652:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	d102      	bne.n	800567c <HAL_RCC_ClockConfig+0x128>
 8005676:	4b4f      	ldr	r3, [pc, #316]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	e00f      	b.n	800569c <HAL_RCC_ClockConfig+0x148>
 800567c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005680:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
 800568a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
 8005690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005692:	fa93 f3a3 	rbit	r3, r3
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005698:	4b46      	ldr	r3, [pc, #280]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80056a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80056a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a4:	fa92 f2a2 	rbit	r2, r2
 80056a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80056aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ac:	fab2 f282 	clz	r2, r2
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	f042 0220 	orr.w	r2, r2, #32
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	f002 021f 	and.w	r2, r2, #31
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f202 	lsl.w	r2, r1, r2
 80056c2:	4013      	ands	r3, r2
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d13a      	bne.n	800573e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0b2      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
 80056cc:	2302      	movs	r3, #2
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	fa93 f3a3 	rbit	r3, r3
 80056d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056da:	fab3 f383 	clz	r3, r3
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	f043 0301 	orr.w	r3, r3, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d102      	bne.n	80056f4 <HAL_RCC_ClockConfig+0x1a0>
 80056ee:	4b31      	ldr	r3, [pc, #196]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	e00d      	b.n	8005710 <HAL_RCC_ClockConfig+0x1bc>
 80056f4:	2302      	movs	r3, #2
 80056f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	fa93 f3a3 	rbit	r3, r3
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	2302      	movs	r3, #2
 8005702:	623b      	str	r3, [r7, #32]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	fa93 f3a3 	rbit	r3, r3
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	4b29      	ldr	r3, [pc, #164]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2202      	movs	r2, #2
 8005712:	61ba      	str	r2, [r7, #24]
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	fa92 f2a2 	rbit	r2, r2
 800571a:	617a      	str	r2, [r7, #20]
  return result;
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	fab2 f282 	clz	r2, r2
 8005722:	b2d2      	uxtb	r2, r2
 8005724:	f042 0220 	orr.w	r2, r2, #32
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	f002 021f 	and.w	r2, r2, #31
 800572e:	2101      	movs	r1, #1
 8005730:	fa01 f202 	lsl.w	r2, r1, r2
 8005734:	4013      	ands	r3, r2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e079      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b1d      	ldr	r3, [pc, #116]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	491a      	ldr	r1, [pc, #104]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 800574c:	4313      	orrs	r3, r2
 800574e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005750:	f7fc fc46 	bl	8001fe0 <HAL_GetTick>
 8005754:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	e00a      	b.n	800576e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fc fc42 	bl	8001fe0 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e061      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <HAL_RCC_ClockConfig+0x260>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f003 020c 	and.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	429a      	cmp	r2, r3
 800577e:	d1eb      	bne.n	8005758 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d214      	bcs.n	80057b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f023 0207 	bic.w	r2, r3, #7
 8005796:	4906      	ldr	r1, [pc, #24]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_RCC_ClockConfig+0x25c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e040      	b.n	8005832 <HAL_RCC_ClockConfig+0x2de>
 80057b0:	40022000 	.word	0x40022000
 80057b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c4:	4b1d      	ldr	r3, [pc, #116]	; (800583c <HAL_RCC_ClockConfig+0x2e8>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	491a      	ldr	r1, [pc, #104]	; (800583c <HAL_RCC_ClockConfig+0x2e8>)
 80057d2:	4313      	orrs	r3, r2
 80057d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0308 	and.w	r3, r3, #8
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e2:	4b16      	ldr	r3, [pc, #88]	; (800583c <HAL_RCC_ClockConfig+0x2e8>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4912      	ldr	r1, [pc, #72]	; (800583c <HAL_RCC_ClockConfig+0x2e8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057f6:	f000 f829 	bl	800584c <HAL_RCC_GetSysClockFreq>
 80057fa:	4601      	mov	r1, r0
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <HAL_RCC_ClockConfig+0x2e8>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005804:	22f0      	movs	r2, #240	; 0xf0
 8005806:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	fa92 f2a2 	rbit	r2, r2
 800580e:	60fa      	str	r2, [r7, #12]
  return result;
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	fab2 f282 	clz	r2, r2
 8005816:	b2d2      	uxtb	r2, r2
 8005818:	40d3      	lsrs	r3, r2
 800581a:	4a09      	ldr	r2, [pc, #36]	; (8005840 <HAL_RCC_ClockConfig+0x2ec>)
 800581c:	5cd3      	ldrb	r3, [r2, r3]
 800581e:	fa21 f303 	lsr.w	r3, r1, r3
 8005822:	4a08      	ldr	r2, [pc, #32]	; (8005844 <HAL_RCC_ClockConfig+0x2f0>)
 8005824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <HAL_RCC_ClockConfig+0x2f4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4618      	mov	r0, r3
 800582c:	f7fc fad8 	bl	8001de0 <HAL_InitTick>
  
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3778      	adds	r7, #120	; 0x78
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000
 8005840:	08008c6c 	.word	0x08008c6c
 8005844:	20000000 	.word	0x20000000
 8005848:	20000004 	.word	0x20000004

0800584c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800584c:	b480      	push	{r7}
 800584e:	b08b      	sub	sp, #44	; 0x2c
 8005850:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	2300      	movs	r3, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	2300      	movs	r3, #0
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005862:	2300      	movs	r3, #0
 8005864:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8005866:	4b29      	ldr	r3, [pc, #164]	; (800590c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	f003 030c 	and.w	r3, r3, #12
 8005872:	2b04      	cmp	r3, #4
 8005874:	d002      	beq.n	800587c <HAL_RCC_GetSysClockFreq+0x30>
 8005876:	2b08      	cmp	r3, #8
 8005878:	d003      	beq.n	8005882 <HAL_RCC_GetSysClockFreq+0x36>
 800587a:	e03c      	b.n	80058f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800587c:	4b24      	ldr	r3, [pc, #144]	; (8005910 <HAL_RCC_GetSysClockFreq+0xc4>)
 800587e:	623b      	str	r3, [r7, #32]
      break;
 8005880:	e03c      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005888:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800588c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	fa92 f2a2 	rbit	r2, r2
 8005894:	607a      	str	r2, [r7, #4]
  return result;
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	fab2 f282 	clz	r2, r2
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	40d3      	lsrs	r3, r2
 80058a0:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_RCC_GetSysClockFreq+0xc8>)
 80058a2:	5cd3      	ldrb	r3, [r2, r3]
 80058a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	220f      	movs	r2, #15
 80058b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	fa92 f2a2 	rbit	r2, r2
 80058b8:	60fa      	str	r2, [r7, #12]
  return result;
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	fab2 f282 	clz	r2, r2
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	40d3      	lsrs	r3, r2
 80058c4:	4a14      	ldr	r2, [pc, #80]	; (8005918 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058c6:	5cd3      	ldrb	r3, [r2, r3]
 80058c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d008      	beq.n	80058e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058d4:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	fb02 f303 	mul.w	r3, r2, r3
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
 80058e4:	e004      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	4a0c      	ldr	r2, [pc, #48]	; (800591c <HAL_RCC_GetSysClockFreq+0xd0>)
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	623b      	str	r3, [r7, #32]
      break;
 80058f4:	e002      	b.n	80058fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80058f6:	4b06      	ldr	r3, [pc, #24]	; (8005910 <HAL_RCC_GetSysClockFreq+0xc4>)
 80058f8:	623b      	str	r3, [r7, #32]
      break;
 80058fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058fc:	6a3b      	ldr	r3, [r7, #32]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	372c      	adds	r7, #44	; 0x2c
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40021000 	.word	0x40021000
 8005910:	007a1200 	.word	0x007a1200
 8005914:	08008c84 	.word	0x08008c84
 8005918:	08008c94 	.word	0x08008c94
 800591c:	003d0900 	.word	0x003d0900

08005920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005924:	4b03      	ldr	r3, [pc, #12]	; (8005934 <HAL_RCC_GetHCLKFreq+0x14>)
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000000 	.word	0x20000000

08005938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800593e:	f7ff ffef 	bl	8005920 <HAL_RCC_GetHCLKFreq>
 8005942:	4601      	mov	r1, r0
 8005944:	4b0b      	ldr	r3, [pc, #44]	; (8005974 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800594c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005950:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	fa92 f2a2 	rbit	r2, r2
 8005958:	603a      	str	r2, [r7, #0]
  return result;
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	fab2 f282 	clz	r2, r2
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	40d3      	lsrs	r3, r2
 8005964:	4a04      	ldr	r2, [pc, #16]	; (8005978 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005966:	5cd3      	ldrb	r3, [r2, r3]
 8005968:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40021000 	.word	0x40021000
 8005978:	08008c7c 	.word	0x08008c7c

0800597c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	220f      	movs	r2, #15
 800598a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800598c:	4b12      	ldr	r3, [pc, #72]	; (80059d8 <HAL_RCC_GetClockConfig+0x5c>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0203 	and.w	r2, r3, #3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <HAL_RCC_GetClockConfig+0x5c>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80059a4:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <HAL_RCC_GetClockConfig+0x5c>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_RCC_GetClockConfig+0x5c>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	08db      	lsrs	r3, r3, #3
 80059b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <HAL_RCC_GetClockConfig+0x60>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0207 	and.w	r2, r3, #7
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	601a      	str	r2, [r3, #0]
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40022000 	.word	0x40022000

080059e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b092      	sub	sp, #72	; 0x48
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80cd 	beq.w	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a04:	4b86      	ldr	r3, [pc, #536]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10e      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a10:	4b83      	ldr	r3, [pc, #524]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	4a82      	ldr	r2, [pc, #520]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	61d3      	str	r3, [r2, #28]
 8005a1c:	4b80      	ldr	r3, [pc, #512]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2e:	4b7d      	ldr	r3, [pc, #500]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d118      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a3a:	4b7a      	ldr	r3, [pc, #488]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a79      	ldr	r2, [pc, #484]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a46:	f7fc facb 	bl	8001fe0 <HAL_GetTick>
 8005a4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a4c:	e008      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a4e:	f7fc fac7 	bl	8001fe0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b64      	cmp	r3, #100	; 0x64
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0db      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a60:	4b70      	ldr	r3, [pc, #448]	; (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a6c:	4b6c      	ldr	r3, [pc, #432]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d07d      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d076      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a8a:	4b65      	ldr	r3, [pc, #404]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	fa93 f3a3 	rbit	r3, r3
 8005aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aa4:	fab3 f383 	clz	r3, r3
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4b5e      	ldr	r3, [pc, #376]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac0:	fa93 f3a3 	rbit	r3, r3
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ac8:	fab3 f383 	clz	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ad2:	4413      	add	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005adc:	4a50      	ldr	r2, [pc, #320]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d045      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aec:	f7fc fa78 	bl	8001fe0 <HAL_GetTick>
 8005af0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af2:	e00a      	b.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af4:	f7fc fa74 	bl	8001fe0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e086      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b10:	fa93 f3a3 	rbit	r3, r3
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	2302      	movs	r3, #2
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	fa93 f3a3 	rbit	r3, r3
 8005b20:	61fb      	str	r3, [r7, #28]
  return result;
 8005b22:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b24:	fab3 f383 	clz	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f043 0302 	orr.w	r3, r3, #2
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d102      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b38:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	e007      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	fa93 f3a3 	rbit	r3, r3
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	2202      	movs	r2, #2
 8005b50:	613a      	str	r2, [r7, #16]
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	fa92 f2a2 	rbit	r2, r2
 8005b58:	60fa      	str	r2, [r7, #12]
  return result;
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	fab2 f282 	clz	r2, r2
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	f002 021f 	and.w	r2, r2, #31
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0bd      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005b78:	4b29      	ldr	r3, [pc, #164]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4926      	ldr	r1, [pc, #152]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d105      	bne.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b92:	4b23      	ldr	r3, [pc, #140]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d008      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	f023 0203 	bic.w	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	491a      	ldr	r1, [pc, #104]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bc8:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4912      	ldr	r1, [pc, #72]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d008      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005be6:	4b0e      	ldr	r3, [pc, #56]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	490b      	ldr	r1, [pc, #44]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d008      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	4903      	ldr	r1, [pc, #12]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3748      	adds	r7, #72	; 0x48
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40007000 	.word	0x40007000
 8005c28:	10908100 	.word	0x10908100

08005c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e049      	b.n	8005cd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f841 	bl	8005cda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	f000 f9e4 	bl	8006038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
	...

08005cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d001      	beq.n	8005d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e040      	b.n	8005d8a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_TIM_Base_Start_IT+0xa8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0x58>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d32:	d009      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0x58>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a18      	ldr	r2, [pc, #96]	; (8005d9c <HAL_TIM_Base_Start_IT+0xac>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0x58>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a17      	ldr	r2, [pc, #92]	; (8005da0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d115      	bne.n	8005d74 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d015      	beq.n	8005d86 <HAL_TIM_Base_Start_IT+0x96>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d60:	d011      	beq.n	8005d86 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f042 0201 	orr.w	r2, r2, #1
 8005d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d72:	e008      	b.n	8005d86 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e000      	b.n	8005d88 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40012c00 	.word	0x40012c00
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40014000 	.word	0x40014000
 8005da4:	00010007 	.word	0x00010007

08005da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d122      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d11b      	bne.n	8005e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0202 	mvn.w	r2, #2
 8005dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	f003 0303 	and.w	r3, r3, #3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d003      	beq.n	8005df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f905 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005df0:	e005      	b.n	8005dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f8f7 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f908 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d122      	bne.n	8005e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d11b      	bne.n	8005e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f06f 0204 	mvn.w	r2, #4
 8005e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f8db 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005e44:	e005      	b.n	8005e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f8cd 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8de 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d122      	bne.n	8005eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d11b      	bne.n	8005eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0208 	mvn.w	r2, #8
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2204      	movs	r2, #4
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f8b1 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f8a3 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f8b4 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d122      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b10      	cmp	r3, #16
 8005ec6:	d11b      	bne.n	8005f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0210 	mvn.w	r2, #16
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f887 	bl	8005ffa <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f879 	bl	8005fe6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f88a 	bl	800600e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d10e      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d107      	bne.n	8005f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f06f 0201 	mvn.w	r2, #1
 8005f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fd96 	bl	8001a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b80      	cmp	r3, #128	; 0x80
 8005f38:	d10e      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d107      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8f2 	bl	800613c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f66:	d10e      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d107      	bne.n	8005f86 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 f8e5 	bl	8006150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d10e      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b40      	cmp	r3, #64	; 0x40
 8005fa0:	d107      	bne.n	8005fb2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f838 	bl	8006022 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d10e      	bne.n	8005fde <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d107      	bne.n	8005fde <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f06f 0220 	mvn.w	r2, #32
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8a5 	bl	8006128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a32      	ldr	r2, [pc, #200]	; (8006114 <TIM_Base_SetConfig+0xdc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0x28>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0x28>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a2f      	ldr	r2, [pc, #188]	; (8006118 <TIM_Base_SetConfig+0xe0>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d108      	bne.n	8006072 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4313      	orrs	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a27      	ldr	r2, [pc, #156]	; (8006114 <TIM_Base_SetConfig+0xdc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0x6a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0x6a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a24      	ldr	r2, [pc, #144]	; (8006118 <TIM_Base_SetConfig+0xe0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0x6a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <TIM_Base_SetConfig+0xe4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0x6a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a22      	ldr	r2, [pc, #136]	; (8006120 <TIM_Base_SetConfig+0xe8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0x6a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a21      	ldr	r2, [pc, #132]	; (8006124 <TIM_Base_SetConfig+0xec>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0e      	ldr	r2, [pc, #56]	; (8006114 <TIM_Base_SetConfig+0xdc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00b      	beq.n	80060f8 <TIM_Base_SetConfig+0xc0>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a0e      	ldr	r2, [pc, #56]	; (800611c <TIM_Base_SetConfig+0xe4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d007      	beq.n	80060f8 <TIM_Base_SetConfig+0xc0>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a0d      	ldr	r2, [pc, #52]	; (8006120 <TIM_Base_SetConfig+0xe8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d003      	beq.n	80060f8 <TIM_Base_SetConfig+0xc0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <TIM_Base_SetConfig+0xec>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	615a      	str	r2, [r3, #20]
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40000400 	.word	0x40000400
 800611c:	40014000 	.word	0x40014000
 8006120:	40014400 	.word	0x40014400
 8006124:	40014800 	.word	0x40014800

08006128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800616a:	f3ef 8305 	mrs	r3, IPSR
 800616e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006170:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10f      	bne.n	8006196 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006176:	f3ef 8310 	mrs	r3, PRIMASK
 800617a:	607b      	str	r3, [r7, #4]
  return(result);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <osKernelInitialize+0x32>
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <osKernelInitialize+0x64>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d109      	bne.n	800619e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800618a:	f3ef 8311 	mrs	r3, BASEPRI
 800618e:	603b      	str	r3, [r7, #0]
  return(result);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006196:	f06f 0305 	mvn.w	r3, #5
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	e00c      	b.n	80061b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800619e:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <osKernelInitialize+0x64>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80061a6:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <osKernelInitialize+0x64>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e002      	b.n	80061b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295
 80061b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061b8:	68fb      	ldr	r3, [r7, #12]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	200000ac 	.word	0x200000ac

080061cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061d2:	f3ef 8305 	mrs	r3, IPSR
 80061d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80061d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061de:	f3ef 8310 	mrs	r3, PRIMASK
 80061e2:	607b      	str	r3, [r7, #4]
  return(result);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <osKernelStart+0x32>
 80061ea:	4b11      	ldr	r3, [pc, #68]	; (8006230 <osKernelStart+0x64>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d109      	bne.n	8006206 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061f2:	f3ef 8311 	mrs	r3, BASEPRI
 80061f6:	603b      	str	r3, [r7, #0]
  return(result);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <osKernelStart+0x3a>
    stat = osErrorISR;
 80061fe:	f06f 0305 	mvn.w	r3, #5
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e00e      	b.n	8006224 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <osKernelStart+0x64>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d107      	bne.n	800621e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800620e:	4b08      	ldr	r3, [pc, #32]	; (8006230 <osKernelStart+0x64>)
 8006210:	2202      	movs	r2, #2
 8006212:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8006214:	f001 f86a 	bl	80072ec <vTaskStartScheduler>
      stat = osOK;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	e002      	b.n	8006224 <osKernelStart+0x58>
    } else {
      stat = osError;
 800621e:	f04f 33ff 	mov.w	r3, #4294967295
 8006222:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006224:	68fb      	ldr	r3, [r7, #12]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200000ac 	.word	0x200000ac

08006234 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b092      	sub	sp, #72	; 0x48
 8006238:	af04      	add	r7, sp, #16
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006244:	f3ef 8305 	mrs	r3, IPSR
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800624c:	2b00      	cmp	r3, #0
 800624e:	f040 8094 	bne.w	800637a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006252:	f3ef 8310 	mrs	r3, PRIMASK
 8006256:	623b      	str	r3, [r7, #32]
  return(result);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	2b00      	cmp	r3, #0
 800625c:	f040 808d 	bne.w	800637a <osThreadNew+0x146>
 8006260:	4b48      	ldr	r3, [pc, #288]	; (8006384 <osThreadNew+0x150>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d106      	bne.n	8006276 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006268:	f3ef 8311 	mrs	r3, BASEPRI
 800626c:	61fb      	str	r3, [r7, #28]
  return(result);
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f040 8082 	bne.w	800637a <osThreadNew+0x146>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d07e      	beq.n	800637a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006280:	2318      	movs	r3, #24
 8006282:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8006284:	2300      	movs	r3, #0
 8006286:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006288:	f107 031b 	add.w	r3, r7, #27
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d045      	beq.n	8006326 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <osThreadNew+0x74>
        name = attr->name;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <osThreadNew+0x9a>
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	2b38      	cmp	r3, #56	; 0x38
 80062c0:	d805      	bhi.n	80062ce <osThreadNew+0x9a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <osThreadNew+0x9e>
        return (NULL);
 80062ce:	2300      	movs	r3, #0
 80062d0:	e054      	b.n	800637c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	089b      	lsrs	r3, r3, #2
 80062e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00e      	beq.n	8006308 <osThreadNew+0xd4>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	2b5b      	cmp	r3, #91	; 0x5b
 80062f0:	d90a      	bls.n	8006308 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d006      	beq.n	8006308 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <osThreadNew+0xd4>
        mem = 1;
 8006302:	2301      	movs	r3, #1
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
 8006306:	e010      	b.n	800632a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10c      	bne.n	800632a <osThreadNew+0xf6>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d108      	bne.n	800632a <osThreadNew+0xf6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <osThreadNew+0xf6>
          mem = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
 8006324:	e001      	b.n	800632a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	2b01      	cmp	r3, #1
 800632e:	d110      	bne.n	8006352 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006338:	9202      	str	r2, [sp, #8]
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006344:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 fe08 	bl	8006f5c <xTaskCreateStatic>
 800634c:	4603      	mov	r3, r0
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	e013      	b.n	800637a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b00      	cmp	r3, #0
 8006356:	d110      	bne.n	800637a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	b29a      	uxth	r2, r3
 800635c:	f107 0314 	add.w	r3, r7, #20
 8006360:	9301      	str	r3, [sp, #4]
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	9300      	str	r3, [sp, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fe4f 	bl	800700e <xTaskCreate>
 8006370:	4603      	mov	r3, r0
 8006372:	2b01      	cmp	r3, #1
 8006374:	d001      	beq.n	800637a <osThreadNew+0x146>
          hTask = NULL;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3738      	adds	r7, #56	; 0x38
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	200000ac 	.word	0x200000ac

08006388 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006390:	f3ef 8305 	mrs	r3, IPSR
 8006394:	613b      	str	r3, [r7, #16]
  return(result);
 8006396:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006398:	2b00      	cmp	r3, #0
 800639a:	d10f      	bne.n	80063bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800639c:	f3ef 8310 	mrs	r3, PRIMASK
 80063a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <osDelay+0x34>
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <osDelay+0x58>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d109      	bne.n	80063c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063b0:	f3ef 8311 	mrs	r3, BASEPRI
 80063b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <osDelay+0x3c>
    stat = osErrorISR;
 80063bc:	f06f 0305 	mvn.w	r3, #5
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	e007      	b.n	80063d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 ff58 	bl	8007284 <vTaskDelay>
    }
  }

  return (stat);
 80063d4:	697b      	ldr	r3, [r7, #20]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	200000ac 	.word	0x200000ac

080063e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4a07      	ldr	r2, [pc, #28]	; (8006410 <vApplicationGetIdleTaskMemory+0x2c>)
 80063f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4a06      	ldr	r2, [pc, #24]	; (8006414 <vApplicationGetIdleTaskMemory+0x30>)
 80063fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2280      	movs	r2, #128	; 0x80
 8006400:	601a      	str	r2, [r3, #0]
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	200000b0 	.word	0x200000b0
 8006414:	2000010c 	.word	0x2000010c

08006418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4a07      	ldr	r2, [pc, #28]	; (8006444 <vApplicationGetTimerTaskMemory+0x2c>)
 8006428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	4a06      	ldr	r2, [pc, #24]	; (8006448 <vApplicationGetTimerTaskMemory+0x30>)
 800642e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006436:	601a      	str	r2, [r3, #0]
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	2000030c 	.word	0x2000030c
 8006448:	20000368 	.word	0x20000368

0800644c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f103 0208 	add.w	r2, r3, #8
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f04f 32ff 	mov.w	r2, #4294967295
 8006464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f103 0208 	add.w	r2, r3, #8
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f103 0208 	add.w	r2, r3, #8
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	601a      	str	r2, [r3, #0]
}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006504:	d103      	bne.n	800650e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	e00c      	b.n	8006528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3308      	adds	r3, #8
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e002      	b.n	800651c <vListInsert+0x2e>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	429a      	cmp	r2, r3
 8006526:	d2f6      	bcs.n	8006516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]
}
 8006554:	bf00      	nop
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6892      	ldr	r2, [r2, #8]
 8006576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6852      	ldr	r2, [r2, #4]
 8006580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	d103      	bne.n	8006594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	1e5a      	subs	r2, r3, #1
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60bb      	str	r3, [r7, #8]
 80065da:	e7fe      	b.n	80065da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80065dc:	f001 ffd6 	bl	800858c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e8:	68f9      	ldr	r1, [r7, #12]
 80065ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065ec:	fb01 f303 	mul.w	r3, r1, r3
 80065f0:	441a      	add	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660c:	3b01      	subs	r3, #1
 800660e:	68f9      	ldr	r1, [r7, #12]
 8006610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	441a      	add	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	22ff      	movs	r2, #255	; 0xff
 8006620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	22ff      	movs	r2, #255	; 0xff
 8006628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d114      	bne.n	800665c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d01a      	beq.n	8006670 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3310      	adds	r3, #16
 800663e:	4618      	mov	r0, r3
 8006640:	f001 f8da 	bl	80077f8 <xTaskRemoveFromEventList>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d012      	beq.n	8006670 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <xQueueGenericReset+0xcc>)
 800664c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	e009      	b.n	8006670 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	3310      	adds	r3, #16
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fef3 	bl	800644c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3324      	adds	r3, #36	; 0x24
 800666a:	4618      	mov	r0, r3
 800666c:	f7ff feee 	bl	800644c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006670:	f001 ffba 	bl	80085e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006674:	2301      	movs	r3, #1
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	e000ed04 	.word	0xe000ed04

08006684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08e      	sub	sp, #56	; 0x38
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	607a      	str	r2, [r7, #4]
 8006690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <xQueueGenericCreateStatic+0x28>
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066aa:	e7fe      	b.n	80066aa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d109      	bne.n	80066c6 <xQueueGenericCreateStatic+0x42>
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
 80066c4:	e7fe      	b.n	80066c4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <xQueueGenericCreateStatic+0x4e>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <xQueueGenericCreateStatic+0x52>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <xQueueGenericCreateStatic+0x54>
 80066d6:	2300      	movs	r3, #0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d109      	bne.n	80066f0 <xQueueGenericCreateStatic+0x6c>
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	e7fe      	b.n	80066ee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <xQueueGenericCreateStatic+0x78>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <xQueueGenericCreateStatic+0x7c>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <xQueueGenericCreateStatic+0x7e>
 8006700:	2300      	movs	r3, #0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d109      	bne.n	800671a <xQueueGenericCreateStatic+0x96>
 8006706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670a:	f383 8811 	msr	BASEPRI, r3
 800670e:	f3bf 8f6f 	isb	sy
 8006712:	f3bf 8f4f 	dsb	sy
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	e7fe      	b.n	8006718 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800671a:	2350      	movs	r3, #80	; 0x50
 800671c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2b50      	cmp	r3, #80	; 0x50
 8006722:	d009      	beq.n	8006738 <xQueueGenericCreateStatic+0xb4>
 8006724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	61bb      	str	r3, [r7, #24]
 8006736:	e7fe      	b.n	8006736 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800673c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00d      	beq.n	800675e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800674a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	4613      	mov	r3, r2
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f805 	bl	8006768 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006760:	4618      	mov	r0, r3
 8006762:	3730      	adds	r7, #48	; 0x30
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
 8006774:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d103      	bne.n	8006784 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	e002      	b.n	800678a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	68ba      	ldr	r2, [r7, #8]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006796:	2101      	movs	r1, #1
 8006798:	69b8      	ldr	r0, [r7, #24]
 800679a:	f7ff ff0b 	bl	80065b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	; 0x38
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80067be:	2300      	movs	r3, #0
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <xQueueGenericSend+0x30>
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80067de:	e7fe      	b.n	80067de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <xQueueGenericSend+0x3e>
 80067e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <xQueueGenericSend+0x42>
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <xQueueGenericSend+0x44>
 80067f2:	2300      	movs	r3, #0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <xQueueGenericSend+0x5c>
 80067f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
 800680a:	e7fe      	b.n	800680a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d103      	bne.n	800681a <xQueueGenericSend+0x6a>
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	2b01      	cmp	r3, #1
 8006818:	d101      	bne.n	800681e <xQueueGenericSend+0x6e>
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <xQueueGenericSend+0x70>
 800681e:	2300      	movs	r3, #0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d109      	bne.n	8006838 <xQueueGenericSend+0x88>
 8006824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	623b      	str	r3, [r7, #32]
 8006836:	e7fe      	b.n	8006836 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006838:	f001 f99a 	bl	8007b70 <xTaskGetSchedulerState>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <xQueueGenericSend+0x98>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <xQueueGenericSend+0x9c>
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <xQueueGenericSend+0x9e>
 800684c:	2300      	movs	r3, #0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <xQueueGenericSend+0xb6>
 8006852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006856:	f383 8811 	msr	BASEPRI, r3
 800685a:	f3bf 8f6f 	isb	sy
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	61fb      	str	r3, [r7, #28]
 8006864:	e7fe      	b.n	8006864 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006866:	f001 fe91 	bl	800858c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800686a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	429a      	cmp	r2, r3
 8006874:	d302      	bcc.n	800687c <xQueueGenericSend+0xcc>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d129      	bne.n	80068d0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006882:	f000 f9ff 	bl	8006c84 <prvCopyDataToQueue>
 8006886:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	2b00      	cmp	r3, #0
 800688e:	d010      	beq.n	80068b2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	3324      	adds	r3, #36	; 0x24
 8006894:	4618      	mov	r0, r3
 8006896:	f000 ffaf 	bl	80077f8 <xTaskRemoveFromEventList>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d013      	beq.n	80068c8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80068a0:	4b3f      	ldr	r3, [pc, #252]	; (80069a0 <xQueueGenericSend+0x1f0>)
 80068a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a6:	601a      	str	r2, [r3, #0]
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	e00a      	b.n	80068c8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80068b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d007      	beq.n	80068c8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80068b8:	4b39      	ldr	r3, [pc, #228]	; (80069a0 <xQueueGenericSend+0x1f0>)
 80068ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80068c8:	f001 fe8e 	bl	80085e8 <vPortExitCritical>
				return pdPASS;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e063      	b.n	8006998 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068d6:	f001 fe87 	bl	80085e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	e05c      	b.n	8006998 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d106      	bne.n	80068f2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068e4:	f107 0314 	add.w	r3, r7, #20
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 ffe7 	bl	80078bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068f2:	f001 fe79 	bl	80085e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068f6:	f000 fd5d 	bl	80073b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068fa:	f001 fe47 	bl	800858c <vPortEnterCritical>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006904:	b25b      	sxtb	r3, r3
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	d103      	bne.n	8006914 <xQueueGenericSend+0x164>
 800690c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d103      	bne.n	800692a <xQueueGenericSend+0x17a>
 8006922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800692a:	f001 fe5d 	bl	80085e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800692e:	1d3a      	adds	r2, r7, #4
 8006930:	f107 0314 	add.w	r3, r7, #20
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ffd6 	bl	80078e8 <xTaskCheckForTimeOut>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d124      	bne.n	800698c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006944:	f000 fa96 	bl	8006e74 <prvIsQueueFull>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	3310      	adds	r3, #16
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f000 ff00 	bl	800775c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800695c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695e:	f000 fa21 	bl	8006da4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006962:	f000 fd35 	bl	80073d0 <xTaskResumeAll>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	f47f af7c 	bne.w	8006866 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <xQueueGenericSend+0x1f0>)
 8006970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	e772      	b.n	8006866 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006982:	f000 fa0f 	bl	8006da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006986:	f000 fd23 	bl	80073d0 <xTaskResumeAll>
 800698a:	e76c      	b.n	8006866 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800698c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800698e:	f000 fa09 	bl	8006da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006992:	f000 fd1d 	bl	80073d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006996:	2300      	movs	r3, #0
		}
	}
}
 8006998:	4618      	mov	r0, r3
 800699a:	3738      	adds	r7, #56	; 0x38
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	e000ed04 	.word	0xe000ed04

080069a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08e      	sub	sp, #56	; 0x38
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <xQueueGenericSendFromISR+0x2c>
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
 80069ce:	e7fe      	b.n	80069ce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <xQueueGenericSendFromISR+0x3a>
 80069d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <xQueueGenericSendFromISR+0x3e>
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <xQueueGenericSendFromISR+0x40>
 80069e2:	2300      	movs	r3, #0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d109      	bne.n	80069fc <xQueueGenericSendFromISR+0x58>
 80069e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ec:	f383 8811 	msr	BASEPRI, r3
 80069f0:	f3bf 8f6f 	isb	sy
 80069f4:	f3bf 8f4f 	dsb	sy
 80069f8:	623b      	str	r3, [r7, #32]
 80069fa:	e7fe      	b.n	80069fa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d103      	bne.n	8006a0a <xQueueGenericSendFromISR+0x66>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <xQueueGenericSendFromISR+0x6a>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <xQueueGenericSendFromISR+0x6c>
 8006a0e:	2300      	movs	r3, #0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <xQueueGenericSendFromISR+0x84>
 8006a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a18:	f383 8811 	msr	BASEPRI, r3
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	61fb      	str	r3, [r7, #28]
 8006a26:	e7fe      	b.n	8006a26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a28:	f001 fe8c 	bl	8008744 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a2c:	f3ef 8211 	mrs	r2, BASEPRI
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61ba      	str	r2, [r7, #24]
 8006a42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d302      	bcc.n	8006a5a <xQueueGenericSendFromISR+0xb6>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d12c      	bne.n	8006ab4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a6a:	f000 f90b 	bl	8006c84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d112      	bne.n	8006a9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d016      	beq.n	8006aae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	3324      	adds	r3, #36	; 0x24
 8006a84:	4618      	mov	r0, r3
 8006a86:	f000 feb7 	bl	80077f8 <xTaskRemoveFromEventList>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00b      	beq.n	8006aae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	e007      	b.n	8006aae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	b25a      	sxtb	r2, r3
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006ab2:	e001      	b.n	8006ab8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3738      	adds	r7, #56	; 0x38
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08c      	sub	sp, #48	; 0x30
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <xQueueReceive+0x2e>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	623b      	str	r3, [r7, #32]
 8006af8:	e7fe      	b.n	8006af8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <xQueueReceive+0x3c>
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <xQueueReceive+0x40>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <xQueueReceive+0x42>
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <xQueueReceive+0x5a>
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e7fe      	b.n	8006b24 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b26:	f001 f823 	bl	8007b70 <xTaskGetSchedulerState>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <xQueueReceive+0x6a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <xQueueReceive+0x6e>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <xQueueReceive+0x70>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d109      	bne.n	8006b54 <xQueueReceive+0x88>
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	e7fe      	b.n	8006b52 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b54:	f001 fd1a 	bl	800858c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01f      	beq.n	8006ba4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b64:	68b9      	ldr	r1, [r7, #8]
 8006b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b68:	f000 f8f6 	bl	8006d58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00f      	beq.n	8006b9c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	3310      	adds	r3, #16
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fe39 	bl	80077f8 <xTaskRemoveFromEventList>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d007      	beq.n	8006b9c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b8c:	4b3c      	ldr	r3, [pc, #240]	; (8006c80 <xQueueReceive+0x1b4>)
 8006b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b9c:	f001 fd24 	bl	80085e8 <vPortExitCritical>
				return pdPASS;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e069      	b.n	8006c78 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d103      	bne.n	8006bb2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006baa:	f001 fd1d 	bl	80085e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e062      	b.n	8006c78 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d106      	bne.n	8006bc6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006bb8:	f107 0310 	add.w	r3, r7, #16
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f000 fe7d 	bl	80078bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bc6:	f001 fd0f 	bl	80085e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bca:	f000 fbf3 	bl	80073b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bce:	f001 fcdd 	bl	800858c <vPortEnterCritical>
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bd8:	b25b      	sxtb	r3, r3
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d103      	bne.n	8006be8 <xQueueReceive+0x11c>
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bee:	b25b      	sxtb	r3, r3
 8006bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf4:	d103      	bne.n	8006bfe <xQueueReceive+0x132>
 8006bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bfe:	f001 fcf3 	bl	80085e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c02:	1d3a      	adds	r2, r7, #4
 8006c04:	f107 0310 	add.w	r3, r7, #16
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fe6c 	bl	80078e8 <xTaskCheckForTimeOut>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d123      	bne.n	8006c5e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c18:	f000 f916 	bl	8006e48 <prvIsQueueEmpty>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d017      	beq.n	8006c52 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	3324      	adds	r3, #36	; 0x24
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 fd96 	bl	800775c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c32:	f000 f8b7 	bl	8006da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c36:	f000 fbcb 	bl	80073d0 <xTaskResumeAll>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d189      	bne.n	8006b54 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006c40:	4b0f      	ldr	r3, [pc, #60]	; (8006c80 <xQueueReceive+0x1b4>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	e780      	b.n	8006b54 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c54:	f000 f8a6 	bl	8006da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c58:	f000 fbba 	bl	80073d0 <xTaskResumeAll>
 8006c5c:	e77a      	b.n	8006b54 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c60:	f000 f8a0 	bl	8006da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c64:	f000 fbb4 	bl	80073d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6a:	f000 f8ed 	bl	8006e48 <prvIsQueueEmpty>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f43f af6f 	beq.w	8006b54 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3730      	adds	r7, #48	; 0x30
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	e000ed04 	.word	0xe000ed04

08006c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b086      	sub	sp, #24
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006c90:	2300      	movs	r3, #0
 8006c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d14d      	bne.n	8006d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 ff7c 	bl	8007bac <xTaskPriorityDisinherit>
 8006cb4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	e043      	b.n	8006d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d119      	bne.n	8006cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6898      	ldr	r0, [r3, #8]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ccc:	461a      	mov	r2, r3
 8006cce:	68b9      	ldr	r1, [r7, #8]
 8006cd0:	f001 ff70 	bl	8008bb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	441a      	add	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	689a      	ldr	r2, [r3, #8]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d32b      	bcc.n	8006d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	609a      	str	r2, [r3, #8]
 8006cf6:	e026      	b.n	8006d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	68d8      	ldr	r0, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	461a      	mov	r2, r3
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	f001 ff56 	bl	8008bb4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	425b      	negs	r3, r3
 8006d12:	441a      	add	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d207      	bcs.n	8006d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	425b      	negs	r3, r3
 8006d2e:	441a      	add	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d105      	bne.n	8006d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1c5a      	adds	r2, r3, #1
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d4e:	697b      	ldr	r3, [r7, #20]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d018      	beq.n	8006d9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	441a      	add	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d303      	bcc.n	8006d8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68d9      	ldr	r1, [r3, #12]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d94:	461a      	mov	r2, r3
 8006d96:	6838      	ldr	r0, [r7, #0]
 8006d98:	f001 ff0c 	bl	8008bb4 <memcpy>
	}
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dac:	f001 fbee 	bl	800858c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006db6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006db8:	e011      	b.n	8006dde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d012      	beq.n	8006de8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	3324      	adds	r3, #36	; 0x24
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fd16 	bl	80077f8 <xTaskRemoveFromEventList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dd2:	f000 fde9 	bl	80079a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	dce9      	bgt.n	8006dba <prvUnlockQueue+0x16>
 8006de6:	e000      	b.n	8006dea <prvUnlockQueue+0x46>
					break;
 8006de8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	22ff      	movs	r2, #255	; 0xff
 8006dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 fbf9 	bl	80085e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006df6:	f001 fbc9 	bl	800858c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e02:	e011      	b.n	8006e28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d012      	beq.n	8006e32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	3310      	adds	r3, #16
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fcf1 	bl	80077f8 <xTaskRemoveFromEventList>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e1c:	f000 fdc4 	bl	80079a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e20:	7bbb      	ldrb	r3, [r7, #14]
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dce9      	bgt.n	8006e04 <prvUnlockQueue+0x60>
 8006e30:	e000      	b.n	8006e34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	22ff      	movs	r2, #255	; 0xff
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e3c:	f001 fbd4 	bl	80085e8 <vPortExitCritical>
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e50:	f001 fb9c 	bl	800858c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e001      	b.n	8006e66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e66:	f001 fbbf 	bl	80085e8 <vPortExitCritical>

	return xReturn;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e7c:	f001 fb86 	bl	800858c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d102      	bne.n	8006e92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	e001      	b.n	8006e96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e96:	f001 fba7 	bl	80085e8 <vPortExitCritical>

	return xReturn;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
 8006eb2:	e014      	b.n	8006ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006eb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <vQueueAddToRegistry+0x4c>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006ec0:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <vQueueAddToRegistry+0x4c>)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006eca:	4a09      	ldr	r2, [pc, #36]	; (8006ef0 <vQueueAddToRegistry+0x4c>)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006ed6:	e005      	b.n	8006ee4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b07      	cmp	r3, #7
 8006ee2:	d9e7      	bls.n	8006eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20001bdc 	.word	0x20001bdc

08006ef4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f04:	f001 fb42 	bl	800858c <vPortEnterCritical>
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f0e:	b25b      	sxtb	r3, r3
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d103      	bne.n	8006f1e <vQueueWaitForMessageRestricted+0x2a>
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f24:	b25b      	sxtb	r3, r3
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d103      	bne.n	8006f34 <vQueueWaitForMessageRestricted+0x40>
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f34:	f001 fb58 	bl	80085e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d106      	bne.n	8006f4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	3324      	adds	r3, #36	; 0x24
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68b9      	ldr	r1, [r7, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fc2b 	bl	80077a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006f4e:	6978      	ldr	r0, [r7, #20]
 8006f50:	f7ff ff28 	bl	8006da4 <prvUnlockQueue>
	}
 8006f54:	bf00      	nop
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08e      	sub	sp, #56	; 0x38
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <xTaskCreateStatic+0x28>
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	623b      	str	r3, [r7, #32]
 8006f82:	e7fe      	b.n	8006f82 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <xTaskCreateStatic+0x42>
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e7fe      	b.n	8006f9c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f9e:	235c      	movs	r3, #92	; 0x5c
 8006fa0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	2b5c      	cmp	r3, #92	; 0x5c
 8006fa6:	d009      	beq.n	8006fbc <xTaskCreateStatic+0x60>
 8006fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fac:	f383 8811 	msr	BASEPRI, r3
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	f3bf 8f4f 	dsb	sy
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	e7fe      	b.n	8006fba <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01e      	beq.n	8007000 <xTaskCreateStatic+0xa4>
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01b      	beq.n	8007000 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	2202      	movs	r2, #2
 8006fd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006fda:	2300      	movs	r3, #0
 8006fdc:	9303      	str	r3, [sp, #12]
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	9302      	str	r3, [sp, #8]
 8006fe2:	f107 0314 	add.w	r3, r7, #20
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f850 	bl	8007098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ffa:	f000 f8d3 	bl	80071a4 <prvAddNewTaskToReadyList>
 8006ffe:	e001      	b.n	8007004 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007004:	697b      	ldr	r3, [r7, #20]
	}
 8007006:	4618      	mov	r0, r3
 8007008:	3728      	adds	r7, #40	; 0x28
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800700e:	b580      	push	{r7, lr}
 8007010:	b08c      	sub	sp, #48	; 0x30
 8007012:	af04      	add	r7, sp, #16
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	603b      	str	r3, [r7, #0]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800701e:	88fb      	ldrh	r3, [r7, #6]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fbcc 	bl	80087c0 <pvPortMalloc>
 8007028:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00e      	beq.n	800704e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007030:	205c      	movs	r0, #92	; 0x5c
 8007032:	f001 fbc5 	bl	80087c0 <pvPortMalloc>
 8007036:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
 8007044:	e005      	b.n	8007052 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007046:	6978      	ldr	r0, [r7, #20]
 8007048:	f001 fc7c 	bl	8008944 <vPortFree>
 800704c:	e001      	b.n	8007052 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d017      	beq.n	8007088 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007060:	88fa      	ldrh	r2, [r7, #6]
 8007062:	2300      	movs	r3, #0
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	9302      	str	r3, [sp, #8]
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 f80e 	bl	8007098 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800707c:	69f8      	ldr	r0, [r7, #28]
 800707e:	f000 f891 	bl	80071a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007082:	2301      	movs	r3, #1
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	e002      	b.n	800708e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007088:	f04f 33ff 	mov.w	r3, #4294967295
 800708c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800708e:	69bb      	ldr	r3, [r7, #24]
	}
 8007090:	4618      	mov	r0, r3
 8007092:	3720      	adds	r7, #32
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	461a      	mov	r2, r3
 80070b0:	21a5      	movs	r1, #165	; 0xa5
 80070b2:	f001 fd8a 	bl	8008bca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80070c0:	3b01      	subs	r3, #1
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	f023 0307 	bic.w	r3, r3, #7
 80070ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <prvInitialiseNewTask+0x56>
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e7fe      	b.n	80070ec <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e012      	b.n	800711a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	4413      	add	r3, r2
 80070fa:	7819      	ldrb	r1, [r3, #0]
 80070fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	3334      	adds	r3, #52	; 0x34
 8007104:	460a      	mov	r2, r1
 8007106:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d006      	beq.n	8007122 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	3301      	adds	r3, #1
 8007118:	61fb      	str	r3, [r7, #28]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2b0f      	cmp	r3, #15
 800711e:	d9e9      	bls.n	80070f4 <prvInitialiseNewTask+0x5c>
 8007120:	e000      	b.n	8007124 <prvInitialiseNewTask+0x8c>
		{
			break;
 8007122:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	2b37      	cmp	r3, #55	; 0x37
 8007130:	d901      	bls.n	8007136 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007132:	2337      	movs	r3, #55	; 0x37
 8007134:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800713a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007140:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	2200      	movs	r2, #0
 8007146:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	3304      	adds	r3, #4
 800714c:	4618      	mov	r0, r3
 800714e:	f7ff f99d 	bl	800648c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	3318      	adds	r3, #24
 8007156:	4618      	mov	r0, r3
 8007158:	f7ff f998 	bl	800648c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800715c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007160:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007170:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007174:	2200      	movs	r2, #0
 8007176:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007180:	683a      	ldr	r2, [r7, #0]
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	69b8      	ldr	r0, [r7, #24]
 8007186:	f001 f8db 	bl	8008340 <pxPortInitialiseStack>
 800718a:	4602      	mov	r2, r0
 800718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800719c:	bf00      	nop
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80071ac:	f001 f9ee 	bl	800858c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80071b0:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <prvAddNewTaskToReadyList+0xc4>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <prvAddNewTaskToReadyList+0xc4>)
 80071b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80071ba:	4b2c      	ldr	r3, [pc, #176]	; (800726c <prvAddNewTaskToReadyList+0xc8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d109      	bne.n	80071d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80071c2:	4a2a      	ldr	r2, [pc, #168]	; (800726c <prvAddNewTaskToReadyList+0xc8>)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071c8:	4b27      	ldr	r3, [pc, #156]	; (8007268 <prvAddNewTaskToReadyList+0xc4>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d110      	bne.n	80071f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80071d0:	f000 fc0e 	bl	80079f0 <prvInitialiseTaskLists>
 80071d4:	e00d      	b.n	80071f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80071d6:	4b26      	ldr	r3, [pc, #152]	; (8007270 <prvAddNewTaskToReadyList+0xcc>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d109      	bne.n	80071f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80071de:	4b23      	ldr	r3, [pc, #140]	; (800726c <prvAddNewTaskToReadyList+0xc8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d802      	bhi.n	80071f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80071ec:	4a1f      	ldr	r2, [pc, #124]	; (800726c <prvAddNewTaskToReadyList+0xc8>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80071f2:	4b20      	ldr	r3, [pc, #128]	; (8007274 <prvAddNewTaskToReadyList+0xd0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3301      	adds	r3, #1
 80071f8:	4a1e      	ldr	r2, [pc, #120]	; (8007274 <prvAddNewTaskToReadyList+0xd0>)
 80071fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80071fc:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <prvAddNewTaskToReadyList+0xd0>)
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <prvAddNewTaskToReadyList+0xd4>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	429a      	cmp	r2, r3
 800720e:	d903      	bls.n	8007218 <prvAddNewTaskToReadyList+0x74>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	4a18      	ldr	r2, [pc, #96]	; (8007278 <prvAddNewTaskToReadyList+0xd4>)
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721c:	4613      	mov	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4a15      	ldr	r2, [pc, #84]	; (800727c <prvAddNewTaskToReadyList+0xd8>)
 8007226:	441a      	add	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3304      	adds	r3, #4
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f7ff f939 	bl	80064a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007234:	f001 f9d8 	bl	80085e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007238:	4b0d      	ldr	r3, [pc, #52]	; (8007270 <prvAddNewTaskToReadyList+0xcc>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00e      	beq.n	800725e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <prvAddNewTaskToReadyList+0xc8>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724a:	429a      	cmp	r2, r3
 800724c:	d207      	bcs.n	800725e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800724e:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <prvAddNewTaskToReadyList+0xdc>)
 8007250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007254:	601a      	str	r2, [r3, #0]
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000c3c 	.word	0x20000c3c
 800726c:	20000768 	.word	0x20000768
 8007270:	20000c48 	.word	0x20000c48
 8007274:	20000c58 	.word	0x20000c58
 8007278:	20000c44 	.word	0x20000c44
 800727c:	2000076c 	.word	0x2000076c
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007296:	4b13      	ldr	r3, [pc, #76]	; (80072e4 <vTaskDelay+0x60>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <vTaskDelay+0x2e>
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	60bb      	str	r3, [r7, #8]
 80072b0:	e7fe      	b.n	80072b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80072b2:	f000 f87f 	bl	80073b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80072b6:	2100      	movs	r1, #0
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fce3 	bl	8007c84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80072be:	f000 f887 	bl	80073d0 <xTaskResumeAll>
 80072c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d107      	bne.n	80072da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <vTaskDelay+0x64>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000c64 	.word	0x20000c64
 80072e8:	e000ed04 	.word	0xe000ed04

080072ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80072fa:	463a      	mov	r2, r7
 80072fc:	1d39      	adds	r1, r7, #4
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff f86e 	bl	80063e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007308:	6839      	ldr	r1, [r7, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	9202      	str	r2, [sp, #8]
 8007310:	9301      	str	r3, [sp, #4]
 8007312:	2300      	movs	r3, #0
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	460a      	mov	r2, r1
 800731a:	4920      	ldr	r1, [pc, #128]	; (800739c <vTaskStartScheduler+0xb0>)
 800731c:	4820      	ldr	r0, [pc, #128]	; (80073a0 <vTaskStartScheduler+0xb4>)
 800731e:	f7ff fe1d 	bl	8006f5c <xTaskCreateStatic>
 8007322:	4602      	mov	r2, r0
 8007324:	4b1f      	ldr	r3, [pc, #124]	; (80073a4 <vTaskStartScheduler+0xb8>)
 8007326:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007328:	4b1e      	ldr	r3, [pc, #120]	; (80073a4 <vTaskStartScheduler+0xb8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007330:	2301      	movs	r3, #1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	e001      	b.n	800733a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007336:	2300      	movs	r3, #0
 8007338:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d102      	bne.n	8007346 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007340:	f000 fcf4 	bl	8007d2c <xTimerCreateTimerTask>
 8007344:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d115      	bne.n	8007378 <vTaskStartScheduler+0x8c>
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800735e:	4b12      	ldr	r3, [pc, #72]	; (80073a8 <vTaskStartScheduler+0xbc>)
 8007360:	f04f 32ff 	mov.w	r2, #4294967295
 8007364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007366:	4b11      	ldr	r3, [pc, #68]	; (80073ac <vTaskStartScheduler+0xc0>)
 8007368:	2201      	movs	r2, #1
 800736a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800736c:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <vTaskStartScheduler+0xc4>)
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007372:	f001 f86d 	bl	8008450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007376:	e00d      	b.n	8007394 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737e:	d109      	bne.n	8007394 <vTaskStartScheduler+0xa8>
 8007380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007384:	f383 8811 	msr	BASEPRI, r3
 8007388:	f3bf 8f6f 	isb	sy
 800738c:	f3bf 8f4f 	dsb	sy
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e7fe      	b.n	8007392 <vTaskStartScheduler+0xa6>
}
 8007394:	bf00      	nop
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	08008c0c 	.word	0x08008c0c
 80073a0:	080079c1 	.word	0x080079c1
 80073a4:	20000c60 	.word	0x20000c60
 80073a8:	20000c5c 	.word	0x20000c5c
 80073ac:	20000c48 	.word	0x20000c48
 80073b0:	20000c40 	.word	0x20000c40

080073b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80073b8:	4b04      	ldr	r3, [pc, #16]	; (80073cc <vTaskSuspendAll+0x18>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	4a03      	ldr	r2, [pc, #12]	; (80073cc <vTaskSuspendAll+0x18>)
 80073c0:	6013      	str	r3, [r2, #0]
}
 80073c2:	bf00      	nop
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	20000c64 	.word	0x20000c64

080073d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80073da:	2300      	movs	r3, #0
 80073dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80073de:	4b41      	ldr	r3, [pc, #260]	; (80074e4 <xTaskResumeAll+0x114>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <xTaskResumeAll+0x2a>
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	603b      	str	r3, [r7, #0]
 80073f8:	e7fe      	b.n	80073f8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073fa:	f001 f8c7 	bl	800858c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073fe:	4b39      	ldr	r3, [pc, #228]	; (80074e4 <xTaskResumeAll+0x114>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3b01      	subs	r3, #1
 8007404:	4a37      	ldr	r2, [pc, #220]	; (80074e4 <xTaskResumeAll+0x114>)
 8007406:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007408:	4b36      	ldr	r3, [pc, #216]	; (80074e4 <xTaskResumeAll+0x114>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d162      	bne.n	80074d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007410:	4b35      	ldr	r3, [pc, #212]	; (80074e8 <xTaskResumeAll+0x118>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05e      	beq.n	80074d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007418:	e02f      	b.n	800747a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800741a:	4b34      	ldr	r3, [pc, #208]	; (80074ec <xTaskResumeAll+0x11c>)
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3318      	adds	r3, #24
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff f89a 	bl	8006560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff f895 	bl	8006560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	4b2d      	ldr	r3, [pc, #180]	; (80074f0 <xTaskResumeAll+0x120>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d903      	bls.n	800744a <xTaskResumeAll+0x7a>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4a2a      	ldr	r2, [pc, #168]	; (80074f0 <xTaskResumeAll+0x120>)
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4a27      	ldr	r2, [pc, #156]	; (80074f4 <xTaskResumeAll+0x124>)
 8007458:	441a      	add	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7ff f820 	bl	80064a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746a:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <xTaskResumeAll+0x128>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007470:	429a      	cmp	r2, r3
 8007472:	d302      	bcc.n	800747a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007474:	4b21      	ldr	r3, [pc, #132]	; (80074fc <xTaskResumeAll+0x12c>)
 8007476:	2201      	movs	r2, #1
 8007478:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800747a:	4b1c      	ldr	r3, [pc, #112]	; (80074ec <xTaskResumeAll+0x11c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1cb      	bne.n	800741a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007488:	f000 fb4c 	bl	8007b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800748c:	4b1c      	ldr	r3, [pc, #112]	; (8007500 <xTaskResumeAll+0x130>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007498:	f000 f846 	bl	8007528 <xTaskIncrementTick>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80074a2:	4b16      	ldr	r3, [pc, #88]	; (80074fc <xTaskResumeAll+0x12c>)
 80074a4:	2201      	movs	r2, #1
 80074a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	3b01      	subs	r3, #1
 80074ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1f1      	bne.n	8007498 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80074b4:	4b12      	ldr	r3, [pc, #72]	; (8007500 <xTaskResumeAll+0x130>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80074ba:	4b10      	ldr	r3, [pc, #64]	; (80074fc <xTaskResumeAll+0x12c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d009      	beq.n	80074d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80074c2:	2301      	movs	r3, #1
 80074c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <xTaskResumeAll+0x134>)
 80074c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074cc:	601a      	str	r2, [r3, #0]
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80074d6:	f001 f887 	bl	80085e8 <vPortExitCritical>

	return xAlreadyYielded;
 80074da:	68bb      	ldr	r3, [r7, #8]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20000c64 	.word	0x20000c64
 80074e8:	20000c3c 	.word	0x20000c3c
 80074ec:	20000bfc 	.word	0x20000bfc
 80074f0:	20000c44 	.word	0x20000c44
 80074f4:	2000076c 	.word	0x2000076c
 80074f8:	20000768 	.word	0x20000768
 80074fc:	20000c50 	.word	0x20000c50
 8007500:	20000c4c 	.word	0x20000c4c
 8007504:	e000ed04 	.word	0xe000ed04

08007508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800750e:	4b05      	ldr	r3, [pc, #20]	; (8007524 <xTaskGetTickCount+0x1c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007514:	687b      	ldr	r3, [r7, #4]
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000c40 	.word	0x20000c40

08007528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b086      	sub	sp, #24
 800752c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007532:	4b51      	ldr	r3, [pc, #324]	; (8007678 <xTaskIncrementTick+0x150>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	f040 808d 	bne.w	8007656 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800753c:	4b4f      	ldr	r3, [pc, #316]	; (800767c <xTaskIncrementTick+0x154>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3301      	adds	r3, #1
 8007542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007544:	4a4d      	ldr	r2, [pc, #308]	; (800767c <xTaskIncrementTick+0x154>)
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11f      	bne.n	8007590 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007550:	4b4b      	ldr	r3, [pc, #300]	; (8007680 <xTaskIncrementTick+0x158>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <xTaskIncrementTick+0x46>
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	603b      	str	r3, [r7, #0]
 800756c:	e7fe      	b.n	800756c <xTaskIncrementTick+0x44>
 800756e:	4b44      	ldr	r3, [pc, #272]	; (8007680 <xTaskIncrementTick+0x158>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	4b43      	ldr	r3, [pc, #268]	; (8007684 <xTaskIncrementTick+0x15c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a41      	ldr	r2, [pc, #260]	; (8007680 <xTaskIncrementTick+0x158>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	4a41      	ldr	r2, [pc, #260]	; (8007684 <xTaskIncrementTick+0x15c>)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6013      	str	r3, [r2, #0]
 8007582:	4b41      	ldr	r3, [pc, #260]	; (8007688 <xTaskIncrementTick+0x160>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3301      	adds	r3, #1
 8007588:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <xTaskIncrementTick+0x160>)
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	f000 faca 	bl	8007b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007590:	4b3e      	ldr	r3, [pc, #248]	; (800768c <xTaskIncrementTick+0x164>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	d34e      	bcc.n	8007638 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800759a:	4b39      	ldr	r3, [pc, #228]	; (8007680 <xTaskIncrementTick+0x158>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <xTaskIncrementTick+0x80>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <xTaskIncrementTick+0x82>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ae:	4b37      	ldr	r3, [pc, #220]	; (800768c <xTaskIncrementTick+0x164>)
 80075b0:	f04f 32ff 	mov.w	r2, #4294967295
 80075b4:	601a      	str	r2, [r3, #0]
					break;
 80075b6:	e03f      	b.n	8007638 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80075b8:	4b31      	ldr	r3, [pc, #196]	; (8007680 <xTaskIncrementTick+0x158>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d203      	bcs.n	80075d8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075d0:	4a2e      	ldr	r2, [pc, #184]	; (800768c <xTaskIncrementTick+0x164>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6013      	str	r3, [r2, #0]
						break;
 80075d6:	e02f      	b.n	8007638 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3304      	adds	r3, #4
 80075dc:	4618      	mov	r0, r3
 80075de:	f7fe ffbf 	bl	8006560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d004      	beq.n	80075f4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	3318      	adds	r3, #24
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fe ffb6 	bl	8006560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f8:	4b25      	ldr	r3, [pc, #148]	; (8007690 <xTaskIncrementTick+0x168>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d903      	bls.n	8007608 <xTaskIncrementTick+0xe0>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	4a22      	ldr	r2, [pc, #136]	; (8007690 <xTaskIncrementTick+0x168>)
 8007606:	6013      	str	r3, [r2, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <xTaskIncrementTick+0x16c>)
 8007616:	441a      	add	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fe ff41 	bl	80064a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007628:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <xTaskIncrementTick+0x170>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	429a      	cmp	r2, r3
 8007630:	d3b3      	bcc.n	800759a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007632:	2301      	movs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007636:	e7b0      	b.n	800759a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007638:	4b17      	ldr	r3, [pc, #92]	; (8007698 <xTaskIncrementTick+0x170>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4915      	ldr	r1, [pc, #84]	; (8007694 <xTaskIncrementTick+0x16c>)
 8007640:	4613      	mov	r3, r2
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d907      	bls.n	8007660 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e004      	b.n	8007660 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007656:	4b11      	ldr	r3, [pc, #68]	; (800769c <xTaskIncrementTick+0x174>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3301      	adds	r3, #1
 800765c:	4a0f      	ldr	r2, [pc, #60]	; (800769c <xTaskIncrementTick+0x174>)
 800765e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007660:	4b0f      	ldr	r3, [pc, #60]	; (80076a0 <xTaskIncrementTick+0x178>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800766c:	697b      	ldr	r3, [r7, #20]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3718      	adds	r7, #24
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000c64 	.word	0x20000c64
 800767c:	20000c40 	.word	0x20000c40
 8007680:	20000bf4 	.word	0x20000bf4
 8007684:	20000bf8 	.word	0x20000bf8
 8007688:	20000c54 	.word	0x20000c54
 800768c:	20000c5c 	.word	0x20000c5c
 8007690:	20000c44 	.word	0x20000c44
 8007694:	2000076c 	.word	0x2000076c
 8007698:	20000768 	.word	0x20000768
 800769c:	20000c4c 	.word	0x20000c4c
 80076a0:	20000c50 	.word	0x20000c50

080076a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076aa:	4b27      	ldr	r3, [pc, #156]	; (8007748 <vTaskSwitchContext+0xa4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d003      	beq.n	80076ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076b2:	4b26      	ldr	r3, [pc, #152]	; (800774c <vTaskSwitchContext+0xa8>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076b8:	e040      	b.n	800773c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80076ba:	4b24      	ldr	r3, [pc, #144]	; (800774c <vTaskSwitchContext+0xa8>)
 80076bc:	2200      	movs	r2, #0
 80076be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80076c0:	4b23      	ldr	r3, [pc, #140]	; (8007750 <vTaskSwitchContext+0xac>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	e00f      	b.n	80076e8 <vTaskSwitchContext+0x44>
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d109      	bne.n	80076e2 <vTaskSwitchContext+0x3e>
 80076ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	607b      	str	r3, [r7, #4]
 80076e0:	e7fe      	b.n	80076e0 <vTaskSwitchContext+0x3c>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	491a      	ldr	r1, [pc, #104]	; (8007754 <vTaskSwitchContext+0xb0>)
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	440b      	add	r3, r1
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0e5      	beq.n	80076c8 <vTaskSwitchContext+0x24>
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	4613      	mov	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4a13      	ldr	r2, [pc, #76]	; (8007754 <vTaskSwitchContext+0xb0>)
 8007708:	4413      	add	r3, r2
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	3308      	adds	r3, #8
 800771e:	429a      	cmp	r2, r3
 8007720:	d104      	bne.n	800772c <vTaskSwitchContext+0x88>
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	605a      	str	r2, [r3, #4]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	4a09      	ldr	r2, [pc, #36]	; (8007758 <vTaskSwitchContext+0xb4>)
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	4a06      	ldr	r2, [pc, #24]	; (8007750 <vTaskSwitchContext+0xac>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000c64 	.word	0x20000c64
 800774c:	20000c50 	.word	0x20000c50
 8007750:	20000c44 	.word	0x20000c44
 8007754:	2000076c 	.word	0x2000076c
 8007758:	20000768 	.word	0x20000768

0800775c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <vTaskPlaceOnEventList+0x24>
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e7fe      	b.n	800777e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <vTaskPlaceOnEventList+0x44>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	3318      	adds	r3, #24
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7fe feb0 	bl	80064ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800778e:	2101      	movs	r1, #1
 8007790:	6838      	ldr	r0, [r7, #0]
 8007792:	f000 fa77 	bl	8007c84 <prvAddCurrentTaskToDelayedList>
}
 8007796:	bf00      	nop
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000768 	.word	0x20000768

080077a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <vTaskPlaceOnEventListRestricted+0x26>
 80077b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ba:	f383 8811 	msr	BASEPRI, r3
 80077be:	f3bf 8f6f 	isb	sy
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	617b      	str	r3, [r7, #20]
 80077c8:	e7fe      	b.n	80077c8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077ca:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <vTaskPlaceOnEventListRestricted+0x50>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3318      	adds	r3, #24
 80077d0:	4619      	mov	r1, r3
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7fe fe67 	bl	80064a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80077de:	f04f 33ff 	mov.w	r3, #4294967295
 80077e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	68b8      	ldr	r0, [r7, #8]
 80077e8:	f000 fa4c 	bl	8007c84 <prvAddCurrentTaskToDelayedList>
	}
 80077ec:	bf00      	nop
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	20000768 	.word	0x20000768

080077f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <xTaskRemoveFromEventList+0x2a>
 800780e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007812:	f383 8811 	msr	BASEPRI, r3
 8007816:	f3bf 8f6f 	isb	sy
 800781a:	f3bf 8f4f 	dsb	sy
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	e7fe      	b.n	8007820 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	3318      	adds	r3, #24
 8007826:	4618      	mov	r0, r3
 8007828:	f7fe fe9a 	bl	8006560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800782c:	4b1d      	ldr	r3, [pc, #116]	; (80078a4 <xTaskRemoveFromEventList+0xac>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d11d      	bne.n	8007870 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	3304      	adds	r3, #4
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fe91 	bl	8006560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007842:	4b19      	ldr	r3, [pc, #100]	; (80078a8 <xTaskRemoveFromEventList+0xb0>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	429a      	cmp	r2, r3
 8007848:	d903      	bls.n	8007852 <xTaskRemoveFromEventList+0x5a>
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	4a16      	ldr	r2, [pc, #88]	; (80078a8 <xTaskRemoveFromEventList+0xb0>)
 8007850:	6013      	str	r3, [r2, #0]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4a13      	ldr	r2, [pc, #76]	; (80078ac <xTaskRemoveFromEventList+0xb4>)
 8007860:	441a      	add	r2, r3
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3304      	adds	r3, #4
 8007866:	4619      	mov	r1, r3
 8007868:	4610      	mov	r0, r2
 800786a:	f7fe fe1c 	bl	80064a6 <vListInsertEnd>
 800786e:	e005      	b.n	800787c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3318      	adds	r3, #24
 8007874:	4619      	mov	r1, r3
 8007876:	480e      	ldr	r0, [pc, #56]	; (80078b0 <xTaskRemoveFromEventList+0xb8>)
 8007878:	f7fe fe15 	bl	80064a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007880:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <xTaskRemoveFromEventList+0xbc>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	d905      	bls.n	8007896 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800788e:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <xTaskRemoveFromEventList+0xc0>)
 8007890:	2201      	movs	r2, #1
 8007892:	601a      	str	r2, [r3, #0]
 8007894:	e001      	b.n	800789a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007896:	2300      	movs	r3, #0
 8007898:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800789a:	697b      	ldr	r3, [r7, #20]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000c64 	.word	0x20000c64
 80078a8:	20000c44 	.word	0x20000c44
 80078ac:	2000076c 	.word	0x2000076c
 80078b0:	20000bfc 	.word	0x20000bfc
 80078b4:	20000768 	.word	0x20000768
 80078b8:	20000c50 	.word	0x20000c50

080078bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80078c4:	4b06      	ldr	r3, [pc, #24]	; (80078e0 <vTaskInternalSetTimeOutState+0x24>)
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <vTaskInternalSetTimeOutState+0x28>)
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	605a      	str	r2, [r3, #4]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	20000c54 	.word	0x20000c54
 80078e4:	20000c40 	.word	0x20000c40

080078e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d109      	bne.n	800790c <xTaskCheckForTimeOut+0x24>
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	e7fe      	b.n	800790a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <xTaskCheckForTimeOut+0x3e>
 8007912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	e7fe      	b.n	8007924 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007926:	f000 fe31 	bl	800858c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800792a:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <xTaskCheckForTimeOut+0xb8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007942:	d102      	bne.n	800794a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	e023      	b.n	8007992 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	4b15      	ldr	r3, [pc, #84]	; (80079a4 <xTaskCheckForTimeOut+0xbc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	429a      	cmp	r2, r3
 8007954:	d007      	beq.n	8007966 <xTaskCheckForTimeOut+0x7e>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	429a      	cmp	r2, r3
 800795e:	d302      	bcc.n	8007966 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007960:	2301      	movs	r3, #1
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	e015      	b.n	8007992 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	429a      	cmp	r2, r3
 800796e:	d20b      	bcs.n	8007988 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	1ad2      	subs	r2, r2, r3
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ff9d 	bl	80078bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	e004      	b.n	8007992 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800798e:	2301      	movs	r3, #1
 8007990:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007992:	f000 fe29 	bl	80085e8 <vPortExitCritical>

	return xReturn;
 8007996:	69fb      	ldr	r3, [r7, #28]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3720      	adds	r7, #32
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20000c40 	.word	0x20000c40
 80079a4:	20000c54 	.word	0x20000c54

080079a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079a8:	b480      	push	{r7}
 80079aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80079ac:	4b03      	ldr	r3, [pc, #12]	; (80079bc <vTaskMissedYield+0x14>)
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
}
 80079b2:	bf00      	nop
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	20000c50 	.word	0x20000c50

080079c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079c8:	f000 f852 	bl	8007a70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <prvIdleTask+0x28>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d9f9      	bls.n	80079c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079d4:	4b05      	ldr	r3, [pc, #20]	; (80079ec <prvIdleTask+0x2c>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80079e4:	e7f0      	b.n	80079c8 <prvIdleTask+0x8>
 80079e6:	bf00      	nop
 80079e8:	2000076c 	.word	0x2000076c
 80079ec:	e000ed04 	.word	0xe000ed04

080079f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	e00c      	b.n	8007a16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a12      	ldr	r2, [pc, #72]	; (8007a50 <prvInitialiseTaskLists+0x60>)
 8007a08:	4413      	add	r3, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe fd1e 	bl	800644c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3301      	adds	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b37      	cmp	r3, #55	; 0x37
 8007a1a:	d9ef      	bls.n	80079fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a1c:	480d      	ldr	r0, [pc, #52]	; (8007a54 <prvInitialiseTaskLists+0x64>)
 8007a1e:	f7fe fd15 	bl	800644c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a22:	480d      	ldr	r0, [pc, #52]	; (8007a58 <prvInitialiseTaskLists+0x68>)
 8007a24:	f7fe fd12 	bl	800644c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a28:	480c      	ldr	r0, [pc, #48]	; (8007a5c <prvInitialiseTaskLists+0x6c>)
 8007a2a:	f7fe fd0f 	bl	800644c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a2e:	480c      	ldr	r0, [pc, #48]	; (8007a60 <prvInitialiseTaskLists+0x70>)
 8007a30:	f7fe fd0c 	bl	800644c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a34:	480b      	ldr	r0, [pc, #44]	; (8007a64 <prvInitialiseTaskLists+0x74>)
 8007a36:	f7fe fd09 	bl	800644c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a3a:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <prvInitialiseTaskLists+0x78>)
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <prvInitialiseTaskLists+0x64>)
 8007a3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <prvInitialiseTaskLists+0x7c>)
 8007a42:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <prvInitialiseTaskLists+0x68>)
 8007a44:	601a      	str	r2, [r3, #0]
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	2000076c 	.word	0x2000076c
 8007a54:	20000bcc 	.word	0x20000bcc
 8007a58:	20000be0 	.word	0x20000be0
 8007a5c:	20000bfc 	.word	0x20000bfc
 8007a60:	20000c10 	.word	0x20000c10
 8007a64:	20000c28 	.word	0x20000c28
 8007a68:	20000bf4 	.word	0x20000bf4
 8007a6c:	20000bf8 	.word	0x20000bf8

08007a70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a76:	e019      	b.n	8007aac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007a78:	f000 fd88 	bl	800858c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007a7c:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <prvCheckTasksWaitingTermination+0x4c>)
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fe fd69 	bl	8006560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ac0 <prvCheckTasksWaitingTermination+0x50>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	4a0a      	ldr	r2, [pc, #40]	; (8007ac0 <prvCheckTasksWaitingTermination+0x50>)
 8007a96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <prvCheckTasksWaitingTermination+0x54>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <prvCheckTasksWaitingTermination+0x54>)
 8007aa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007aa2:	f000 fda1 	bl	80085e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f80e 	bl	8007ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aac:	4b05      	ldr	r3, [pc, #20]	; (8007ac4 <prvCheckTasksWaitingTermination+0x54>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e1      	bne.n	8007a78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000c10 	.word	0x20000c10
 8007ac0:	20000c3c 	.word	0x20000c3c
 8007ac4:	20000c24 	.word	0x20000c24

08007ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d108      	bne.n	8007aec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 ff30 	bl	8008944 <vPortFree>
				vPortFree( pxTCB );
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 ff2d 	bl	8008944 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aea:	e017      	b.n	8007b1c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d103      	bne.n	8007afe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 ff24 	bl	8008944 <vPortFree>
	}
 8007afc:	e00e      	b.n	8007b1c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d009      	beq.n	8007b1c <prvDeleteTCB+0x54>
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	60fb      	str	r3, [r7, #12]
 8007b1a:	e7fe      	b.n	8007b1a <prvDeleteTCB+0x52>
	}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b2a:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <prvResetNextTaskUnblockTime+0x44>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <prvResetNextTaskUnblockTime+0x14>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e000      	b.n	8007b3a <prvResetNextTaskUnblockTime+0x16>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b3e:	4b0b      	ldr	r3, [pc, #44]	; (8007b6c <prvResetNextTaskUnblockTime+0x48>)
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295
 8007b44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b46:	e008      	b.n	8007b5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b48:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <prvResetNextTaskUnblockTime+0x44>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	4a05      	ldr	r2, [pc, #20]	; (8007b6c <prvResetNextTaskUnblockTime+0x48>)
 8007b58:	6013      	str	r3, [r2, #0]
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000bf4 	.word	0x20000bf4
 8007b6c:	20000c5c 	.word	0x20000c5c

08007b70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b76:	4b0b      	ldr	r3, [pc, #44]	; (8007ba4 <xTaskGetSchedulerState+0x34>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d102      	bne.n	8007b84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	607b      	str	r3, [r7, #4]
 8007b82:	e008      	b.n	8007b96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b84:	4b08      	ldr	r3, [pc, #32]	; (8007ba8 <xTaskGetSchedulerState+0x38>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d102      	bne.n	8007b92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b8c:	2302      	movs	r3, #2
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	e001      	b.n	8007b96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b92:	2300      	movs	r3, #0
 8007b94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b96:	687b      	ldr	r3, [r7, #4]
	}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr
 8007ba4:	20000c48 	.word	0x20000c48
 8007ba8:	20000c64 	.word	0x20000c64

08007bac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d054      	beq.n	8007c6c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bc2:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <xTaskPriorityDisinherit+0xcc>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d009      	beq.n	8007be0 <xTaskPriorityDisinherit+0x34>
 8007bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	e7fe      	b.n	8007bde <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d109      	bne.n	8007bfc <xTaskPriorityDisinherit+0x50>
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	60bb      	str	r3, [r7, #8]
 8007bfa:	e7fe      	b.n	8007bfa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c00:	1e5a      	subs	r2, r3, #1
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d02c      	beq.n	8007c6c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d128      	bne.n	8007c6c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fc9e 	bl	8006560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	4b0f      	ldr	r3, [pc, #60]	; (8007c7c <xTaskPriorityDisinherit+0xd0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d903      	bls.n	8007c4c <xTaskPriorityDisinherit+0xa0>
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	4a0c      	ldr	r2, [pc, #48]	; (8007c7c <xTaskPriorityDisinherit+0xd0>)
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4a09      	ldr	r2, [pc, #36]	; (8007c80 <xTaskPriorityDisinherit+0xd4>)
 8007c5a:	441a      	add	r2, r3
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7fe fc1f 	bl	80064a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c6c:	697b      	ldr	r3, [r7, #20]
	}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3718      	adds	r7, #24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20000768 	.word	0x20000768
 8007c7c:	20000c44 	.word	0x20000c44
 8007c80:	2000076c 	.word	0x2000076c

08007c84 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c8e:	4b21      	ldr	r3, [pc, #132]	; (8007d14 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c94:	4b20      	ldr	r3, [pc, #128]	; (8007d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fc60 	bl	8006560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca6:	d10a      	bne.n	8007cbe <prvAddCurrentTaskToDelayedList+0x3a>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d007      	beq.n	8007cbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cae:	4b1a      	ldr	r3, [pc, #104]	; (8007d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4819      	ldr	r0, [pc, #100]	; (8007d1c <prvAddCurrentTaskToDelayedList+0x98>)
 8007cb8:	f7fe fbf5 	bl	80064a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cbc:	e026      	b.n	8007d0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cc6:	4b14      	ldr	r3, [pc, #80]	; (8007d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d209      	bcs.n	8007cea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cd6:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b0f      	ldr	r3, [pc, #60]	; (8007d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7fe fc03 	bl	80064ee <vListInsert>
}
 8007ce8:	e010      	b.n	8007d0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cea:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b0a      	ldr	r3, [pc, #40]	; (8007d18 <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fe fbf9 	bl	80064ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d202      	bcs.n	8007d0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d06:	4a08      	ldr	r2, [pc, #32]	; (8007d28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6013      	str	r3, [r2, #0]
}
 8007d0c:	bf00      	nop
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000c40 	.word	0x20000c40
 8007d18:	20000768 	.word	0x20000768
 8007d1c:	20000c28 	.word	0x20000c28
 8007d20:	20000bf8 	.word	0x20000bf8
 8007d24:	20000bf4 	.word	0x20000bf4
 8007d28:	20000c5c 	.word	0x20000c5c

08007d2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d36:	f000 fac3 	bl	80082c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d3a:	4b1c      	ldr	r3, [pc, #112]	; (8007dac <xTimerCreateTimerTask+0x80>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d021      	beq.n	8007d86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d4a:	1d3a      	adds	r2, r7, #4
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	f107 030c 	add.w	r3, r7, #12
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fe fb5f 	bl	8006418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d5a:	6879      	ldr	r1, [r7, #4]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	9202      	str	r2, [sp, #8]
 8007d62:	9301      	str	r3, [sp, #4]
 8007d64:	2302      	movs	r3, #2
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	4910      	ldr	r1, [pc, #64]	; (8007db0 <xTimerCreateTimerTask+0x84>)
 8007d6e:	4811      	ldr	r0, [pc, #68]	; (8007db4 <xTimerCreateTimerTask+0x88>)
 8007d70:	f7ff f8f4 	bl	8006f5c <xTaskCreateStatic>
 8007d74:	4602      	mov	r2, r0
 8007d76:	4b10      	ldr	r3, [pc, #64]	; (8007db8 <xTimerCreateTimerTask+0x8c>)
 8007d78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <xTimerCreateTimerTask+0x8c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d82:	2301      	movs	r3, #1
 8007d84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d109      	bne.n	8007da0 <xTimerCreateTimerTask+0x74>
 8007d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	e7fe      	b.n	8007d9e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007da0:	697b      	ldr	r3, [r7, #20]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	20000c98 	.word	0x20000c98
 8007db0:	08008c14 	.word	0x08008c14
 8007db4:	08007ed5 	.word	0x08007ed5
 8007db8:	20000c9c 	.word	0x20000c9c

08007dbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b08a      	sub	sp, #40	; 0x28
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <xTimerGenericCommand+0x2c>
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	623b      	str	r3, [r7, #32]
 8007de6:	e7fe      	b.n	8007de6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007de8:	4b19      	ldr	r3, [pc, #100]	; (8007e50 <xTimerGenericCommand+0x94>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d02a      	beq.n	8007e46 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b05      	cmp	r3, #5
 8007e00:	dc18      	bgt.n	8007e34 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e02:	f7ff feb5 	bl	8007b70 <xTaskGetSchedulerState>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d109      	bne.n	8007e20 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e0c:	4b10      	ldr	r3, [pc, #64]	; (8007e50 <xTimerGenericCommand+0x94>)
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	f107 0110 	add.w	r1, r7, #16
 8007e14:	2300      	movs	r3, #0
 8007e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e18:	f7fe fcca 	bl	80067b0 <xQueueGenericSend>
 8007e1c:	6278      	str	r0, [r7, #36]	; 0x24
 8007e1e:	e012      	b.n	8007e46 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <xTimerGenericCommand+0x94>)
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	f107 0110 	add.w	r1, r7, #16
 8007e28:	2300      	movs	r3, #0
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f7fe fcc0 	bl	80067b0 <xQueueGenericSend>
 8007e30:	6278      	str	r0, [r7, #36]	; 0x24
 8007e32:	e008      	b.n	8007e46 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e34:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <xTimerGenericCommand+0x94>)
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	f107 0110 	add.w	r1, r7, #16
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	f7fe fdb0 	bl	80069a4 <xQueueGenericSendFromISR>
 8007e44:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3728      	adds	r7, #40	; 0x28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}
 8007e50:	20000c98 	.word	0x20000c98

08007e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e5e:	4b1c      	ldr	r3, [pc, #112]	; (8007ed0 <prvProcessExpiredTimer+0x7c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fb77 	bl	8006560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	69db      	ldr	r3, [r3, #28]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d121      	bne.n	8007ebe <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	18d1      	adds	r1, r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f000 f8c8 	bl	800801c <prvInsertTimerInActiveList>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d015      	beq.n	8007ebe <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e92:	2300      	movs	r3, #0
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	2300      	movs	r3, #0
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	6978      	ldr	r0, [r7, #20]
 8007e9e:	f7ff ff8d 	bl	8007dbc <xTimerGenericCommand>
 8007ea2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d109      	bne.n	8007ebe <prvProcessExpiredTimer+0x6a>
 8007eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eae:	f383 8811 	msr	BASEPRI, r3
 8007eb2:	f3bf 8f6f 	isb	sy
 8007eb6:	f3bf 8f4f 	dsb	sy
 8007eba:	60fb      	str	r3, [r7, #12]
 8007ebc:	e7fe      	b.n	8007ebc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec2:	6978      	ldr	r0, [r7, #20]
 8007ec4:	4798      	blx	r3
}
 8007ec6:	bf00      	nop
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000c90 	.word	0x20000c90

08007ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007edc:	f107 0308 	add.w	r3, r7, #8
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f000 f857 	bl	8007f94 <prvGetNextExpireTime>
 8007ee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4619      	mov	r1, r3
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 f803 	bl	8007ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ef2:	f000 f8d5 	bl	80080a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ef6:	e7f1      	b.n	8007edc <prvTimerTask+0x8>

08007ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f02:	f7ff fa57 	bl	80073b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f06:	f107 0308 	add.w	r3, r7, #8
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f866 	bl	8007fdc <prvSampleTimeNow>
 8007f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d130      	bne.n	8007f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10a      	bne.n	8007f34 <prvProcessTimerOrBlockTask+0x3c>
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d806      	bhi.n	8007f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f26:	f7ff fa53 	bl	80073d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff91 	bl	8007e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f32:	e024      	b.n	8007f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <prvProcessTimerOrBlockTask+0x90>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf0c      	ite	eq
 8007f44:	2301      	moveq	r3, #1
 8007f46:	2300      	movne	r3, #0
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f4c:	4b0f      	ldr	r3, [pc, #60]	; (8007f8c <prvProcessTimerOrBlockTask+0x94>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4619      	mov	r1, r3
 8007f5a:	f7fe ffcb 	bl	8006ef4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f5e:	f7ff fa37 	bl	80073d0 <xTaskResumeAll>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f68:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <prvProcessTimerOrBlockTask+0x98>)
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	f3bf 8f6f 	isb	sy
}
 8007f78:	e001      	b.n	8007f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f7a:	f7ff fa29 	bl	80073d0 <xTaskResumeAll>
}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20000c94 	.word	0x20000c94
 8007f8c:	20000c98 	.word	0x20000c98
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f9c:	4b0e      	ldr	r3, [pc, #56]	; (8007fd8 <prvGetNextExpireTime+0x44>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	bf0c      	ite	eq
 8007fa6:	2301      	moveq	r3, #1
 8007fa8:	2300      	movne	r3, #0
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fba:	4b07      	ldr	r3, [pc, #28]	; (8007fd8 <prvGetNextExpireTime+0x44>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	e001      	b.n	8007fca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fca:	68fb      	ldr	r3, [r7, #12]
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	20000c90 	.word	0x20000c90

08007fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fe4:	f7ff fa90 	bl	8007508 <xTaskGetTickCount>
 8007fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fea:	4b0b      	ldr	r3, [pc, #44]	; (8008018 <prvSampleTimeNow+0x3c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d205      	bcs.n	8008000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ff4:	f000 f904 	bl	8008200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	e002      	b.n	8008006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008006:	4a04      	ldr	r2, [pc, #16]	; (8008018 <prvSampleTimeNow+0x3c>)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800800c:	68fb      	ldr	r3, [r7, #12]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000ca0 	.word	0x20000ca0

0800801c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	429a      	cmp	r2, r3
 8008040:	d812      	bhi.n	8008068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	1ad2      	subs	r2, r2, r3
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	429a      	cmp	r2, r3
 800804e:	d302      	bcc.n	8008056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008050:	2301      	movs	r3, #1
 8008052:	617b      	str	r3, [r7, #20]
 8008054:	e01b      	b.n	800808e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008056:	4b10      	ldr	r3, [pc, #64]	; (8008098 <prvInsertTimerInActiveList+0x7c>)
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3304      	adds	r3, #4
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f7fe fa44 	bl	80064ee <vListInsert>
 8008066:	e012      	b.n	800808e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d206      	bcs.n	800807e <prvInsertTimerInActiveList+0x62>
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d302      	bcc.n	800807e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	617b      	str	r3, [r7, #20]
 800807c:	e007      	b.n	800808e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800807e:	4b07      	ldr	r3, [pc, #28]	; (800809c <prvInsertTimerInActiveList+0x80>)
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3304      	adds	r3, #4
 8008086:	4619      	mov	r1, r3
 8008088:	4610      	mov	r0, r2
 800808a:	f7fe fa30 	bl	80064ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800808e:	697b      	ldr	r3, [r7, #20]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3718      	adds	r7, #24
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000c94 	.word	0x20000c94
 800809c:	20000c90 	.word	0x20000c90

080080a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08e      	sub	sp, #56	; 0x38
 80080a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080a6:	e099      	b.n	80081dc <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da17      	bge.n	80080de <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080ae:	1d3b      	adds	r3, r7, #4
 80080b0:	3304      	adds	r3, #4
 80080b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <prvProcessReceivedCommands+0x2e>
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	61fb      	str	r3, [r7, #28]
 80080cc:	e7fe      	b.n	80080cc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d4:	6850      	ldr	r0, [r2, #4]
 80080d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080d8:	6892      	ldr	r2, [r2, #8]
 80080da:	4611      	mov	r1, r2
 80080dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	db7a      	blt.n	80081da <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	695b      	ldr	r3, [r3, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d004      	beq.n	80080fa <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	3304      	adds	r3, #4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe fa33 	bl	8006560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080fa:	463b      	mov	r3, r7
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ff6d 	bl	8007fdc <prvSampleTimeNow>
 8008102:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b09      	cmp	r3, #9
 8008108:	d868      	bhi.n	80081dc <prvProcessReceivedCommands+0x13c>
 800810a:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <prvProcessReceivedCommands+0x70>)
 800810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008110:	08008139 	.word	0x08008139
 8008114:	08008139 	.word	0x08008139
 8008118:	08008139 	.word	0x08008139
 800811c:	080081dd 	.word	0x080081dd
 8008120:	08008193 	.word	0x08008193
 8008124:	080081c9 	.word	0x080081c9
 8008128:	08008139 	.word	0x08008139
 800812c:	08008139 	.word	0x08008139
 8008130:	080081dd 	.word	0x080081dd
 8008134:	08008193 	.word	0x08008193
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	18d1      	adds	r1, r2, r3
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008146:	f7ff ff69 	bl	800801c <prvInsertTimerInActiveList>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d045      	beq.n	80081dc <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008156:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d13d      	bne.n	80081dc <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	441a      	add	r2, r3
 8008168:	2300      	movs	r3, #0
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	2300      	movs	r3, #0
 800816e:	2100      	movs	r1, #0
 8008170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008172:	f7ff fe23 	bl	8007dbc <xTimerGenericCommand>
 8008176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008178:	6a3b      	ldr	r3, [r7, #32]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d12e      	bne.n	80081dc <prvProcessReceivedCommands+0x13c>
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	e7fe      	b.n	8008190 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <prvProcessReceivedCommands+0x114>
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	617b      	str	r3, [r7, #20]
 80081b2:	e7fe      	b.n	80081b2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	699a      	ldr	r2, [r3, #24]
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	18d1      	adds	r1, r2, r3
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081c2:	f7ff ff2b 	bl	800801c <prvInsertTimerInActiveList>
					break;
 80081c6:	e009      	b.n	80081dc <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 80081d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d4:	f000 fbb6 	bl	8008944 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80081d8:	e000      	b.n	80081dc <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80081da:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081dc:	4b07      	ldr	r3, [pc, #28]	; (80081fc <prvProcessReceivedCommands+0x15c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	1d39      	adds	r1, r7, #4
 80081e2:	2200      	movs	r2, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe fc71 	bl	8006acc <xQueueReceive>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f af5b 	bne.w	80080a8 <prvProcessReceivedCommands+0x8>
	}
}
 80081f2:	bf00      	nop
 80081f4:	3730      	adds	r7, #48	; 0x30
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000c98 	.word	0x20000c98

08008200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b088      	sub	sp, #32
 8008204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008206:	e044      	b.n	8008292 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008208:	4b2b      	ldr	r3, [pc, #172]	; (80082b8 <prvSwitchTimerLists+0xb8>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008212:	4b29      	ldr	r3, [pc, #164]	; (80082b8 <prvSwitchTimerLists+0xb8>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3304      	adds	r3, #4
 8008220:	4618      	mov	r0, r3
 8008222:	f7fe f99d 	bl	8006560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d12d      	bne.n	8008292 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4413      	add	r3, r2
 800823e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	429a      	cmp	r2, r3
 8008246:	d90e      	bls.n	8008266 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008254:	4b18      	ldr	r3, [pc, #96]	; (80082b8 <prvSwitchTimerLists+0xb8>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3304      	adds	r3, #4
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f7fe f945 	bl	80064ee <vListInsert>
 8008264:	e015      	b.n	8008292 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008266:	2300      	movs	r3, #0
 8008268:	9300      	str	r3, [sp, #0]
 800826a:	2300      	movs	r3, #0
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	2100      	movs	r1, #0
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fda3 	bl	8007dbc <xTimerGenericCommand>
 8008276:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d109      	bne.n	8008292 <prvSwitchTimerLists+0x92>
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	e7fe      	b.n	8008290 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <prvSwitchTimerLists+0xb8>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1b5      	bne.n	8008208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <prvSwitchTimerLists+0xb8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <prvSwitchTimerLists+0xbc>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a04      	ldr	r2, [pc, #16]	; (80082b8 <prvSwitchTimerLists+0xb8>)
 80082a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80082aa:	4a04      	ldr	r2, [pc, #16]	; (80082bc <prvSwitchTimerLists+0xbc>)
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	6013      	str	r3, [r2, #0]
}
 80082b0:	bf00      	nop
 80082b2:	3718      	adds	r7, #24
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	20000c90 	.word	0x20000c90
 80082bc:	20000c94 	.word	0x20000c94

080082c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80082c6:	f000 f961 	bl	800858c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d120      	bne.n	8008314 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80082d2:	4814      	ldr	r0, [pc, #80]	; (8008324 <prvCheckForValidListAndQueue+0x64>)
 80082d4:	f7fe f8ba 	bl	800644c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80082d8:	4813      	ldr	r0, [pc, #76]	; (8008328 <prvCheckForValidListAndQueue+0x68>)
 80082da:	f7fe f8b7 	bl	800644c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <prvCheckForValidListAndQueue+0x6c>)
 80082e0:	4a10      	ldr	r2, [pc, #64]	; (8008324 <prvCheckForValidListAndQueue+0x64>)
 80082e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80082e4:	4b12      	ldr	r3, [pc, #72]	; (8008330 <prvCheckForValidListAndQueue+0x70>)
 80082e6:	4a10      	ldr	r2, [pc, #64]	; (8008328 <prvCheckForValidListAndQueue+0x68>)
 80082e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80082ea:	2300      	movs	r3, #0
 80082ec:	9300      	str	r3, [sp, #0]
 80082ee:	4b11      	ldr	r3, [pc, #68]	; (8008334 <prvCheckForValidListAndQueue+0x74>)
 80082f0:	4a11      	ldr	r2, [pc, #68]	; (8008338 <prvCheckForValidListAndQueue+0x78>)
 80082f2:	2110      	movs	r1, #16
 80082f4:	200a      	movs	r0, #10
 80082f6:	f7fe f9c5 	bl	8006684 <xQueueGenericCreateStatic>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4b08      	ldr	r3, [pc, #32]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 80082fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008300:	4b07      	ldr	r3, [pc, #28]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <prvCheckForValidListAndQueue+0x60>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	490b      	ldr	r1, [pc, #44]	; (800833c <prvCheckForValidListAndQueue+0x7c>)
 800830e:	4618      	mov	r0, r3
 8008310:	f7fe fdc8 	bl	8006ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008314:	f000 f968 	bl	80085e8 <vPortExitCritical>
}
 8008318:	bf00      	nop
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000c98 	.word	0x20000c98
 8008324:	20000c68 	.word	0x20000c68
 8008328:	20000c7c 	.word	0x20000c7c
 800832c:	20000c90 	.word	0x20000c90
 8008330:	20000c94 	.word	0x20000c94
 8008334:	20000d44 	.word	0x20000d44
 8008338:	20000ca4 	.word	0x20000ca4
 800833c:	08008c1c 	.word	0x08008c1c

08008340 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3b04      	subs	r3, #4
 8008350:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008358:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3b04      	subs	r3, #4
 800835e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f023 0201 	bic.w	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	3b04      	subs	r3, #4
 800836e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008370:	4a0c      	ldr	r2, [pc, #48]	; (80083a4 <pxPortInitialiseStack+0x64>)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	3b14      	subs	r3, #20
 800837a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3b04      	subs	r3, #4
 8008386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f06f 0202 	mvn.w	r2, #2
 800838e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3b20      	subs	r3, #32
 8008394:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008396:	68fb      	ldr	r3, [r7, #12]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	080083a9 	.word	0x080083a9

080083a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <prvTaskExitError+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ba:	d009      	beq.n	80083d0 <prvTaskExitError+0x28>
 80083bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e7fe      	b.n	80083ce <prvTaskExitError+0x26>
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083e2:	bf00      	nop
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0fc      	beq.n	80083e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000000c 	.word	0x2000000c
 80083fc:	00000000 	.word	0x00000000

08008400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <pxCurrentTCBConst2>)
 8008402:	6819      	ldr	r1, [r3, #0]
 8008404:	6808      	ldr	r0, [r1, #0]
 8008406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800840a:	f380 8809 	msr	PSP, r0
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f04f 0000 	mov.w	r0, #0
 8008416:	f380 8811 	msr	BASEPRI, r0
 800841a:	4770      	bx	lr
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst2>:
 8008420:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008428:	4808      	ldr	r0, [pc, #32]	; (800844c <prvPortStartFirstTask+0x24>)
 800842a:	6800      	ldr	r0, [r0, #0]
 800842c:	6800      	ldr	r0, [r0, #0]
 800842e:	f380 8808 	msr	MSP, r0
 8008432:	f04f 0000 	mov.w	r0, #0
 8008436:	f380 8814 	msr	CONTROL, r0
 800843a:	b662      	cpsie	i
 800843c:	b661      	cpsie	f
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	df00      	svc	0
 8008448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800844a:	bf00      	nop
 800844c:	e000ed08 	.word	0xe000ed08

08008450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008456:	4b44      	ldr	r3, [pc, #272]	; (8008568 <xPortStartScheduler+0x118>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a44      	ldr	r2, [pc, #272]	; (800856c <xPortStartScheduler+0x11c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d109      	bne.n	8008474 <xPortStartScheduler+0x24>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	e7fe      	b.n	8008472 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008474:	4b3c      	ldr	r3, [pc, #240]	; (8008568 <xPortStartScheduler+0x118>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a3d      	ldr	r2, [pc, #244]	; (8008570 <xPortStartScheduler+0x120>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d109      	bne.n	8008492 <xPortStartScheduler+0x42>
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	e7fe      	b.n	8008490 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008492:	4b38      	ldr	r3, [pc, #224]	; (8008574 <xPortStartScheduler+0x124>)
 8008494:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	b2db      	uxtb	r3, r3
 800849c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	22ff      	movs	r2, #255	; 0xff
 80084a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	4b30      	ldr	r3, [pc, #192]	; (8008578 <xPortStartScheduler+0x128>)
 80084b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ba:	4b30      	ldr	r3, [pc, #192]	; (800857c <xPortStartScheduler+0x12c>)
 80084bc:	2207      	movs	r2, #7
 80084be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084c0:	e009      	b.n	80084d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80084c2:	4b2e      	ldr	r3, [pc, #184]	; (800857c <xPortStartScheduler+0x12c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	4a2c      	ldr	r2, [pc, #176]	; (800857c <xPortStartScheduler+0x12c>)
 80084ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084de:	2b80      	cmp	r3, #128	; 0x80
 80084e0:	d0ef      	beq.n	80084c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084e2:	4b26      	ldr	r3, [pc, #152]	; (800857c <xPortStartScheduler+0x12c>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f1c3 0307 	rsb	r3, r3, #7
 80084ea:	2b04      	cmp	r3, #4
 80084ec:	d009      	beq.n	8008502 <xPortStartScheduler+0xb2>
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	e7fe      	b.n	8008500 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008502:	4b1e      	ldr	r3, [pc, #120]	; (800857c <xPortStartScheduler+0x12c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	4a1c      	ldr	r2, [pc, #112]	; (800857c <xPortStartScheduler+0x12c>)
 800850a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <xPortStartScheduler+0x12c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008514:	4a19      	ldr	r2, [pc, #100]	; (800857c <xPortStartScheduler+0x12c>)
 8008516:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	b2da      	uxtb	r2, r3
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008520:	4b17      	ldr	r3, [pc, #92]	; (8008580 <xPortStartScheduler+0x130>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a16      	ldr	r2, [pc, #88]	; (8008580 <xPortStartScheduler+0x130>)
 8008526:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800852a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800852c:	4b14      	ldr	r3, [pc, #80]	; (8008580 <xPortStartScheduler+0x130>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a13      	ldr	r2, [pc, #76]	; (8008580 <xPortStartScheduler+0x130>)
 8008532:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008536:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008538:	f000 f8d6 	bl	80086e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800853c:	4b11      	ldr	r3, [pc, #68]	; (8008584 <xPortStartScheduler+0x134>)
 800853e:	2200      	movs	r2, #0
 8008540:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008542:	f000 f8f5 	bl	8008730 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <xPortStartScheduler+0x138>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a0f      	ldr	r2, [pc, #60]	; (8008588 <xPortStartScheduler+0x138>)
 800854c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008550:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008552:	f7ff ff69 	bl	8008428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008556:	f7ff f8a5 	bl	80076a4 <vTaskSwitchContext>
	prvTaskExitError();
 800855a:	f7ff ff25 	bl	80083a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3718      	adds	r7, #24
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	e000ed00 	.word	0xe000ed00
 800856c:	410fc271 	.word	0x410fc271
 8008570:	410fc270 	.word	0x410fc270
 8008574:	e000e400 	.word	0xe000e400
 8008578:	20000d94 	.word	0x20000d94
 800857c:	20000d98 	.word	0x20000d98
 8008580:	e000ed20 	.word	0xe000ed20
 8008584:	2000000c 	.word	0x2000000c
 8008588:	e000ef34 	.word	0xe000ef34

0800858c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085a4:	4b0e      	ldr	r3, [pc, #56]	; (80085e0 <vPortEnterCritical+0x54>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	3301      	adds	r3, #1
 80085aa:	4a0d      	ldr	r2, [pc, #52]	; (80085e0 <vPortEnterCritical+0x54>)
 80085ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085ae:	4b0c      	ldr	r3, [pc, #48]	; (80085e0 <vPortEnterCritical+0x54>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d10e      	bne.n	80085d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085b6:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <vPortEnterCritical+0x58>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d009      	beq.n	80085d4 <vPortEnterCritical+0x48>
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	e7fe      	b.n	80085d2 <vPortEnterCritical+0x46>
	}
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	2000000c 	.word	0x2000000c
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ee:	4b11      	ldr	r3, [pc, #68]	; (8008634 <vPortExitCritical+0x4c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d109      	bne.n	800860a <vPortExitCritical+0x22>
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	f383 8811 	msr	BASEPRI, r3
 80085fe:	f3bf 8f6f 	isb	sy
 8008602:	f3bf 8f4f 	dsb	sy
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	e7fe      	b.n	8008608 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800860a:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <vPortExitCritical+0x4c>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3b01      	subs	r3, #1
 8008610:	4a08      	ldr	r2, [pc, #32]	; (8008634 <vPortExitCritical+0x4c>)
 8008612:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008614:	4b07      	ldr	r3, [pc, #28]	; (8008634 <vPortExitCritical+0x4c>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <vPortExitCritical+0x3e>
 800861c:	2300      	movs	r3, #0
 800861e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	2000000c 	.word	0x2000000c
	...

08008640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008640:	f3ef 8009 	mrs	r0, PSP
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4b15      	ldr	r3, [pc, #84]	; (80086a0 <pxCurrentTCBConst>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	f01e 0f10 	tst.w	lr, #16
 8008650:	bf08      	it	eq
 8008652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800865a:	6010      	str	r0, [r2, #0]
 800865c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008664:	f380 8811 	msr	BASEPRI, r0
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f7ff f818 	bl	80076a4 <vTaskSwitchContext>
 8008674:	f04f 0000 	mov.w	r0, #0
 8008678:	f380 8811 	msr	BASEPRI, r0
 800867c:	bc09      	pop	{r0, r3}
 800867e:	6819      	ldr	r1, [r3, #0]
 8008680:	6808      	ldr	r0, [r1, #0]
 8008682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008686:	f01e 0f10 	tst.w	lr, #16
 800868a:	bf08      	it	eq
 800868c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008690:	f380 8809 	msr	PSP, r0
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	f3af 8000 	nop.w

080086a0 <pxCurrentTCBConst>:
 80086a0:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop

080086a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
	__asm volatile
 80086ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b2:	f383 8811 	msr	BASEPRI, r3
 80086b6:	f3bf 8f6f 	isb	sy
 80086ba:	f3bf 8f4f 	dsb	sy
 80086be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80086c0:	f7fe ff32 	bl	8007528 <xTaskIncrementTick>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80086ca:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <SysTick_Handler+0x3c>)
 80086cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	2300      	movs	r3, #0
 80086d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80086dc:	bf00      	nop
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	e000ed04 	.word	0xe000ed04

080086e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <vPortSetupTimerInterrupt+0x34>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086f2:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <vPortSetupTimerInterrupt+0x38>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <vPortSetupTimerInterrupt+0x3c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <vPortSetupTimerInterrupt+0x40>)
 80086fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008702:	099b      	lsrs	r3, r3, #6
 8008704:	4a09      	ldr	r2, [pc, #36]	; (800872c <vPortSetupTimerInterrupt+0x44>)
 8008706:	3b01      	subs	r3, #1
 8008708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800870a:	4b04      	ldr	r3, [pc, #16]	; (800871c <vPortSetupTimerInterrupt+0x34>)
 800870c:	2207      	movs	r2, #7
 800870e:	601a      	str	r2, [r3, #0]
}
 8008710:	bf00      	nop
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	e000e010 	.word	0xe000e010
 8008720:	e000e018 	.word	0xe000e018
 8008724:	20000000 	.word	0x20000000
 8008728:	10624dd3 	.word	0x10624dd3
 800872c:	e000e014 	.word	0xe000e014

08008730 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008730:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008740 <vPortEnableVFP+0x10>
 8008734:	6801      	ldr	r1, [r0, #0]
 8008736:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800873a:	6001      	str	r1, [r0, #0]
 800873c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800873e:	bf00      	nop
 8008740:	e000ed88 	.word	0xe000ed88

08008744 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800874a:	f3ef 8305 	mrs	r3, IPSR
 800874e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2b0f      	cmp	r3, #15
 8008754:	d913      	bls.n	800877e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008756:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <vPortValidateInterruptPriority+0x6c>)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	4413      	add	r3, r2
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008760:	4b14      	ldr	r3, [pc, #80]	; (80087b4 <vPortValidateInterruptPriority+0x70>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	7afa      	ldrb	r2, [r7, #11]
 8008766:	429a      	cmp	r2, r3
 8008768:	d209      	bcs.n	800877e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	607b      	str	r3, [r7, #4]
 800877c:	e7fe      	b.n	800877c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800877e:	4b0e      	ldr	r3, [pc, #56]	; (80087b8 <vPortValidateInterruptPriority+0x74>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008786:	4b0d      	ldr	r3, [pc, #52]	; (80087bc <vPortValidateInterruptPriority+0x78>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	429a      	cmp	r2, r3
 800878c:	d909      	bls.n	80087a2 <vPortValidateInterruptPriority+0x5e>
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	e7fe      	b.n	80087a0 <vPortValidateInterruptPriority+0x5c>
	}
 80087a2:	bf00      	nop
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	e000e3f0 	.word	0xe000e3f0
 80087b4:	20000d94 	.word	0x20000d94
 80087b8:	e000ed0c 	.word	0xe000ed0c
 80087bc:	20000d98 	.word	0x20000d98

080087c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b08a      	sub	sp, #40	; 0x28
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087cc:	f7fe fdf2 	bl	80073b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087d0:	4b57      	ldr	r3, [pc, #348]	; (8008930 <pvPortMalloc+0x170>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d101      	bne.n	80087dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087d8:	f000 f90c 	bl	80089f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087dc:	4b55      	ldr	r3, [pc, #340]	; (8008934 <pvPortMalloc+0x174>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f040 808c 	bne.w	8008902 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01c      	beq.n	800882a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80087f0:	2208      	movs	r2, #8
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f003 0307 	and.w	r3, r3, #7
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d013      	beq.n	800882a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f023 0307 	bic.w	r3, r3, #7
 8008808:	3308      	adds	r3, #8
 800880a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <pvPortMalloc+0x6a>
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617b      	str	r3, [r7, #20]
 8008828:	e7fe      	b.n	8008828 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d068      	beq.n	8008902 <pvPortMalloc+0x142>
 8008830:	4b41      	ldr	r3, [pc, #260]	; (8008938 <pvPortMalloc+0x178>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	429a      	cmp	r2, r3
 8008838:	d863      	bhi.n	8008902 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800883a:	4b40      	ldr	r3, [pc, #256]	; (800893c <pvPortMalloc+0x17c>)
 800883c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800883e:	4b3f      	ldr	r3, [pc, #252]	; (800893c <pvPortMalloc+0x17c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008844:	e004      	b.n	8008850 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	429a      	cmp	r2, r3
 8008858:	d903      	bls.n	8008862 <pvPortMalloc+0xa2>
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f1      	bne.n	8008846 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008862:	4b33      	ldr	r3, [pc, #204]	; (8008930 <pvPortMalloc+0x170>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008868:	429a      	cmp	r2, r3
 800886a:	d04a      	beq.n	8008902 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2208      	movs	r2, #8
 8008872:	4413      	add	r3, r2
 8008874:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	6a3b      	ldr	r3, [r7, #32]
 800887c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1ad2      	subs	r2, r2, r3
 8008886:	2308      	movs	r3, #8
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	429a      	cmp	r2, r3
 800888c:	d91e      	bls.n	80088cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800888e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	2b00      	cmp	r3, #0
 800889e:	d009      	beq.n	80088b4 <pvPortMalloc+0xf4>
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	e7fe      	b.n	80088b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	1ad2      	subs	r2, r2, r3
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088c6:	69b8      	ldr	r0, [r7, #24]
 80088c8:	f000 f8f6 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088cc:	4b1a      	ldr	r3, [pc, #104]	; (8008938 <pvPortMalloc+0x178>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	4a18      	ldr	r2, [pc, #96]	; (8008938 <pvPortMalloc+0x178>)
 80088d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088da:	4b17      	ldr	r3, [pc, #92]	; (8008938 <pvPortMalloc+0x178>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	4b18      	ldr	r3, [pc, #96]	; (8008940 <pvPortMalloc+0x180>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d203      	bcs.n	80088ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088e6:	4b14      	ldr	r3, [pc, #80]	; (8008938 <pvPortMalloc+0x178>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a15      	ldr	r2, [pc, #84]	; (8008940 <pvPortMalloc+0x180>)
 80088ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	4b10      	ldr	r3, [pc, #64]	; (8008934 <pvPortMalloc+0x174>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	431a      	orrs	r2, r3
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fe:	2200      	movs	r2, #0
 8008900:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008902:	f7fe fd65 	bl	80073d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <pvPortMalloc+0x164>
 8008910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	60fb      	str	r3, [r7, #12]
 8008922:	e7fe      	b.n	8008922 <pvPortMalloc+0x162>
	return pvReturn;
 8008924:	69fb      	ldr	r3, [r7, #28]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3728      	adds	r7, #40	; 0x28
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200019a4 	.word	0x200019a4
 8008934:	200019b0 	.word	0x200019b0
 8008938:	200019a8 	.word	0x200019a8
 800893c:	2000199c 	.word	0x2000199c
 8008940:	200019ac 	.word	0x200019ac

08008944 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d046      	beq.n	80089e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008956:	2308      	movs	r3, #8
 8008958:	425b      	negs	r3, r3
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	4413      	add	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	685a      	ldr	r2, [r3, #4]
 8008968:	4b20      	ldr	r3, [pc, #128]	; (80089ec <vPortFree+0xa8>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4013      	ands	r3, r2
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <vPortFree+0x42>
 8008972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	e7fe      	b.n	8008984 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <vPortFree+0x5e>
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	60bb      	str	r3, [r7, #8]
 80089a0:	e7fe      	b.n	80089a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <vPortFree+0xa8>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4013      	ands	r3, r2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d019      	beq.n	80089e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d115      	bne.n	80089e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	685a      	ldr	r2, [r3, #4]
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <vPortFree+0xa8>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	43db      	mvns	r3, r3
 80089c2:	401a      	ands	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089c8:	f7fe fcf4 	bl	80073b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	685a      	ldr	r2, [r3, #4]
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <vPortFree+0xac>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a06      	ldr	r2, [pc, #24]	; (80089f0 <vPortFree+0xac>)
 80089d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089da:	6938      	ldr	r0, [r7, #16]
 80089dc:	f000 f86c 	bl	8008ab8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089e0:	f7fe fcf6 	bl	80073d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089e4:	bf00      	nop
 80089e6:	3718      	adds	r7, #24
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	200019b0 	.word	0x200019b0
 80089f0:	200019a8 	.word	0x200019a8

080089f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80089fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a00:	4b27      	ldr	r3, [pc, #156]	; (8008aa0 <prvHeapInit+0xac>)
 8008a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00c      	beq.n	8008a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3307      	adds	r3, #7
 8008a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <prvHeapInit+0xac>)
 8008a24:	4413      	add	r3, r2
 8008a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a40:	2208      	movs	r2, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <prvHeapInit+0xb8>)
 8008a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <prvHeapInit+0xbc>)
 8008a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a8c:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <prvHeapInit+0xc0>)
 8008a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000d9c 	.word	0x20000d9c
 8008aa4:	2000199c 	.word	0x2000199c
 8008aa8:	200019a4 	.word	0x200019a4
 8008aac:	200019ac 	.word	0x200019ac
 8008ab0:	200019a8 	.word	0x200019a8
 8008ab4:	200019b0 	.word	0x200019b0

08008ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ac0:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <prvInsertBlockIntoFreeList+0xac>)
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e002      	b.n	8008acc <prvInsertBlockIntoFreeList+0x14>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d8f7      	bhi.n	8008ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d108      	bne.n	8008afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	441a      	add	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	441a      	add	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d118      	bne.n	8008b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d00d      	beq.n	8008b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e008      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	e003      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d002      	beq.n	8008b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	2000199c 	.word	0x2000199c
 8008b68:	200019a4 	.word	0x200019a4

08008b6c <__libc_init_array>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	4e0d      	ldr	r6, [pc, #52]	; (8008ba4 <__libc_init_array+0x38>)
 8008b70:	4c0d      	ldr	r4, [pc, #52]	; (8008ba8 <__libc_init_array+0x3c>)
 8008b72:	1ba4      	subs	r4, r4, r6
 8008b74:	10a4      	asrs	r4, r4, #2
 8008b76:	2500      	movs	r5, #0
 8008b78:	42a5      	cmp	r5, r4
 8008b7a:	d109      	bne.n	8008b90 <__libc_init_array+0x24>
 8008b7c:	4e0b      	ldr	r6, [pc, #44]	; (8008bac <__libc_init_array+0x40>)
 8008b7e:	4c0c      	ldr	r4, [pc, #48]	; (8008bb0 <__libc_init_array+0x44>)
 8008b80:	f000 f82c 	bl	8008bdc <_init>
 8008b84:	1ba4      	subs	r4, r4, r6
 8008b86:	10a4      	asrs	r4, r4, #2
 8008b88:	2500      	movs	r5, #0
 8008b8a:	42a5      	cmp	r5, r4
 8008b8c:	d105      	bne.n	8008b9a <__libc_init_array+0x2e>
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b94:	4798      	blx	r3
 8008b96:	3501      	adds	r5, #1
 8008b98:	e7ee      	b.n	8008b78 <__libc_init_array+0xc>
 8008b9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b9e:	4798      	blx	r3
 8008ba0:	3501      	adds	r5, #1
 8008ba2:	e7f2      	b.n	8008b8a <__libc_init_array+0x1e>
 8008ba4:	08008ca4 	.word	0x08008ca4
 8008ba8:	08008ca4 	.word	0x08008ca4
 8008bac:	08008ca4 	.word	0x08008ca4
 8008bb0:	08008ca8 	.word	0x08008ca8

08008bb4 <memcpy>:
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	1e43      	subs	r3, r0, #1
 8008bb8:	440a      	add	r2, r1
 8008bba:	4291      	cmp	r1, r2
 8008bbc:	d100      	bne.n	8008bc0 <memcpy+0xc>
 8008bbe:	bd10      	pop	{r4, pc}
 8008bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bc8:	e7f7      	b.n	8008bba <memcpy+0x6>

08008bca <memset>:
 8008bca:	4402      	add	r2, r0
 8008bcc:	4603      	mov	r3, r0
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d100      	bne.n	8008bd4 <memset+0xa>
 8008bd2:	4770      	bx	lr
 8008bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd8:	e7f9      	b.n	8008bce <memset+0x4>
	...

08008bdc <_init>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr

08008be8 <_fini>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr
